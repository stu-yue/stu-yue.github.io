<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yue&#39;s Jotter</title>
  
  
  <link href="https://stu-yue.github.io/atom.xml" rel="self"/>
  
  <link href="https://stu-yue.github.io/"/>
  <updated>2023-09-19T14:18:58.743Z</updated>
  <id>https://stu-yue.github.io/</id>
  
  <author>
    <name>stu-yue</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Memo | Package and Device</title>
    <link href="https://stu-yue.github.io/jottings/languages/shell/memo_package_device/"/>
    <id>https://stu-yue.github.io/jottings/languages/shell/memo_package_device/</id>
    <published>2023-09-19T14:56:53.000Z</published>
    <updated>2023-09-19T14:18:58.743Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h4><ul><li>Package System</li></ul><table><thead><tr><th>Package Management System</th><th>Linux Release Version</th></tr></thead><tbody><tr><td>Debian Style (.deb)</td><td>Debian, Ubuntu</td></tr><tr><td>Red Hat Style (.rpm)</td><td>Fedora, CentOS</td></tr></tbody></table><blockquote><p>A package file is a compressed collection of files that make up a software package and may contain a large number of programs and the data files that support those programs. </p><p><strong>Metadata for the packet</strong> is included, such as a text description of the package and its contents. </p><p>Other included are <strong>pre-installation and post-installation scripts</strong> (which perform configuration tasks before and after installation)</p></blockquote><ul><li>Upper Tools and Underlying Tools:</li></ul><table><thead><tr><th>Linux Release Version</th><th>Underlying Tool (install and delete packages)</th><th>Upper Tool (search for metadata and resolve dependencies)</th></tr></thead><tbody><tr><td>Debian-Style</td><td>dpkg</td><td>apt-get, aptitude</td></tr><tr><td>Fedora, CentOS</td><td>rpm</td><td>yum</td></tr></tbody></table><ul><li>Search for metadata in the resource repository</li></ul><table><thead><tr><th>Style</th><th>Command</th></tr></thead><tbody><tr><td>Debian</td><td>apt-get update; apt-cache search search_string</td></tr><tr><td>Red Hat</td><td>yum search search_string (e.g. yum search emacs)</td></tr></tbody></table><ul><li>Install a package via resource repository</li></ul><table><thead><tr><th>Style</th><th>Command</th></tr></thead><tbody><tr><td>Debian</td><td>apt-get update; apt-get install package_name</td></tr><tr><td>Red Hat</td><td>yum install package_name</td></tr></tbody></table><ul><li>Install a package via raw package files</li></ul><table><thead><tr><th>Style</th><th>Command</th></tr></thead><tbody><tr><td>Debian</td><td>dpkg –install package_file</td></tr><tr><td>Red Hat</td><td>rpm -i package_file (rpm -i emacs-22.1-7.fc7-i386.rpm)</td></tr></tbody></table><blockquote><p>NOTE: Due to this command is executed by rpm, not analyzing dependencies for package_file, so if a dependency is missing, rpm will report error and exit.</p></blockquote><ul><li>Uninstall a package</li></ul><table><thead><tr><th>Style</th><th>Command</th></tr></thead><tbody><tr><td>Debian</td><td>apt-get remove package_name</td></tr><tr><td>Red Hat</td><td>yum erase package_name</td></tr></tbody></table><ul><li>Upgrade package via resource repository</li></ul><table><thead><tr><th>Style</th><th>Command</th></tr></thead><tbody><tr><td>Debian</td><td>apt-get update; apt-get upgrade</td></tr><tr><td>Red Hat</td><td>yum update</td></tr></tbody></table><ul><li>Upgrade package via package_file</li></ul><table><thead><tr><th>Style</th><th>Command</th></tr></thead><tbody><tr><td>Debian</td><td>dpkg –install package_file</td></tr><tr><td>Red Hat</td><td>rpm -U package_file</td></tr></tbody></table><ul><li>List all package installed</li></ul><table><thead><tr><th>Style</th><th>Command</th></tr></thead><tbody><tr><td>Debian</td><td>dpkg –list</td></tr><tr><td>Red Hat</td><td>rpm -qa</td></tr></tbody></table><ul><li>Determine whether a package is installed</li></ul><table><thead><tr><th>Style</th><th>Command</th></tr></thead><tbody><tr><td>Debian</td><td>dpkg –status package_name</td></tr><tr><td>Red Hat</td><td>rpm -q package_name</td></tr></tbody></table><ul><li>Show the info for the installed package</li></ul><table><thead><tr><th>Style</th><th>Command</th></tr></thead><tbody><tr><td>Debian</td><td>apt-cache show package_name</td></tr><tr><td>Red Hat</td><td>yum info package_name</td></tr></tbody></table><h4 id="Device"><a href="#Device" class="headerlink" title="Device"></a>Device</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Package&quot;&gt;&lt;a href=&quot;#Package&quot; class=&quot;headerlink&quot; title=&quot;Package&quot;&gt;&lt;/a&gt;Package&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Package System&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;t</summary>
      
    
    
    
    <category term="languages" scheme="https://stu-yue.github.io/categories/languages/"/>
    
    <category term="shell" scheme="https://stu-yue.github.io/categories/languages/shell/"/>
    
    
    <category term="shell" scheme="https://stu-yue.github.io/tags/shell/"/>
    
    <category term="linux" scheme="https://stu-yue.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Summa |Networks Tidbits</title>
    <link href="https://stu-yue.github.io/jottings/networks/memo_network_tidbits/"/>
    <id>https://stu-yue.github.io/jottings/networks/memo_network_tidbits/</id>
    <published>2023-09-07T10:35:53.000Z</published>
    <updated>2023-09-08T14:19:04.994Z</updated>
    
    <content type="html"><![CDATA[<ol><li><strong>Tunneling</strong>: The basic principle is to create a virtual channel between the source and the target, through which the original packets is encapsulated in the packet of another protocol, and then transmitted between the source and the target. At the target end, the receiver unwarps the encapsulated packet, reverts it to the original packet, and gives it to the target application for processing. For example, <strong>VPN (Virtual Private Network), SSH Tunneling, GRE (Generic Routing Encapsulation, like IPv6 over IPv4)</strong>.</li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Tunneling&lt;/strong&gt;: The basic principle is to create a virtual channel between the source and the target, through which the</summary>
      
    
    
    
    <category term="networks" scheme="https://stu-yue.github.io/categories/networks/"/>
    
    
    <category term="networks" scheme="https://stu-yue.github.io/tags/networks/"/>
    
  </entry>
  
  <entry>
    <title>Memo | Olds and Ends</title>
    <link href="https://stu-yue.github.io/jottings/languages/shell/memo_others/"/>
    <id>https://stu-yue.github.io/jottings/languages/shell/memo_others/</id>
    <published>2023-09-06T07:56:53.000Z</published>
    <updated>2023-09-06T07:37:09.249Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Difference between <strong>sh</strong> and <strong>bash</strong>: <strong>sh</strong> is usually symbolic link for <strong>dash</strong>; <strong>dash</strong> is a more lightweight shell, POSIX, designed to replace <strong>sh</strong> and provide faster startup and executions speeds; <strong>bash</strong> is an extended version of <strong>sh</strong>, and most scripts that conform to <strong>sh</strong> syntax should work fine in <strong>bash</strong>; <strong>In a nutshell, sh is bash, which enables the POSIX standard</strong>.</p><blockquote><p>POSIX, Portable Operating System Interface of UNIX</p><p>In accordance with the POSIX specification, “When a line of code encounters an error, it does not continue to interpret subsequent lines.” However, in bash, even if an error occurs, it will continue to execute subsequent lines.</p></blockquote></li><li><p>To view cpu information: <code>lscpu</code>, or <code>cat /proc/cpuinfo</code>;</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Difference between &lt;strong&gt;sh&lt;/strong&gt; and &lt;strong&gt;bash&lt;/strong&gt;: &lt;strong&gt;sh&lt;/strong&gt; is usually symbolic link for &lt;strong&gt;dash&lt;</summary>
      
    
    
    
    <category term="languages" scheme="https://stu-yue.github.io/categories/languages/"/>
    
    <category term="shell" scheme="https://stu-yue.github.io/categories/languages/shell/"/>
    
    
    <category term="shell" scheme="https://stu-yue.github.io/tags/shell/"/>
    
    <category term="linux" scheme="https://stu-yue.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Memo | Permission, Progress and Shell Environment</title>
    <link href="https://stu-yue.github.io/jottings/languages/shell/memo_permission_progress_env/"/>
    <id>https://stu-yue.github.io/jottings/languages/shell/memo_permission_progress_env/</id>
    <published>2023-08-31T14:56:53.000Z</published>
    <updated>2023-09-09T14:48:36.012Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Permission"><a href="#Permission" class="headerlink" title="Permission"></a>Permission</h4><p>First of all, let’s take a quick look at the permissions-related commands.</p><ul><li><p><code>id</code>: To show the id number of the user.</p><ul><li><code>id username</code>:</li></ul></li><li><p><code>chmod</code>: To change the mode of files.</p><ul><li><p>symbolic examples:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">u (user), g (group), o (other), a (all)</span><br><span class="line">+, -, =</span><br><span class="line">u+x   u-x   +x[=a+x]   o-rw,   go=rw   u+x,go=rw</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>umask</code>: To set default file permissions (before creating).</p><ul><li><p>an example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># umask is 0002</span><br><span class="line">Original file mode  | --- rw- rw- rw-</span><br><span class="line">Mask  | 000 000 000 010</span><br><span class="line">Result| --- rw- rw- r--</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>su</code>: To run the shell as another user. <code>su - username</code>, <code>-</code> can enter the home directory.</p></li><li><p><code>sudo</code>: To execute the command as another user.</p></li><li><p><code>chown</code>: To change the file owner.</p><ul><li><p><code>chown [owner[:group]] file...</code>, here are some examples:</p><table><thead><tr><th>Example</th><th>Explanation</th></tr></thead><tbody><tr><td>bob</td><td>change the file owner to bob</td></tr><tr><td>bob:users</td><td>change the file owner to bob, group to users</td></tr><tr><td>:admins</td><td>change the group to admins, file owner remains the same</td></tr><tr><td>bob:</td><td>change the file owner to bob, group to bob’s login group</td></tr></tbody></table></li></ul></li><li><p><code>chgrp</code>: To change the group ownership of files.</p><ul><li><code>chgrp groupname file...</code></li></ul></li><li><p><code>passwd</code>: To change the user’s password.</p><ul><li><code>passwd username</code>: set user’s password.</li></ul></li></ul><blockquote><ul><li><p>User information is stored in <code>/etc/passwd</code>, group information is stored in <code>/etc/group</code>;</p><p>use the command <code>cat /etc/passwd</code> to have a quick look.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd | grep ubuntu</span><br><span class="line">        </span><br><span class="line"><span class="comment"># username:passwd:uid:gid:comment:home_dir:shell</span></span><br><span class="line"><span class="comment"># passwd (x) denotes that password is protected in /etc/passwd</span></span><br><span class="line"><span class="comment"># comment store some useful comments (like username)</span></span><br><span class="line">ubuntu:x:1000:1000:ubuntu:/home/ubuntu:/bin/bash</span><br><span class="line">        </span><br><span class="line">sudo <span class="built_in">cat</span> /etc/shadow | grep ubuntu</span><br><span class="line">        </span><br><span class="line"><span class="comment">#username:passwd(encrypted):last_modify_time:min_interval:max_interval</span></span><br><span class="line">ubuntu:$1$oQIzlBrL<span class="variable">$MErhwMGkTzqaeWkJNzpUh1</span>:19132:0:99999:7:::</span><br><span class="line">      </span><br><span class="line"><span class="built_in">cat</span> /etc/group | grep cdrom</span><br><span class="line">    </span><br><span class="line"><span class="comment"># groupname:passwd:gid:group_member</span></span><br><span class="line">cdrom:x:24:ubuntu,yue</span><br><span class="line">    </span><br><span class="line">sudo <span class="built_in">cat</span> /etc/gshadow | grep <span class="built_in">test</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># groupname:passwd:group_manager:group_member</span></span><br><span class="line"><span class="built_in">test</span>:*:yue:ubuntu</span><br></pre></td></tr></table></figure></li><li><p><strong>Permission Overview</strong>:</p></li></ul><table><thead><tr><th align="center"></th><th align="center">r</th><th align="center">w</th><th align="center">x</th></tr></thead><tbody><tr><td align="center"><strong>File</strong></td><td align="center">readable</td><td align="center">writable</td><td align="center">executable</td></tr><tr><td align="center"><strong>Directory</strong></td><td align="center">readable</td><td align="center">writable to files in the directory</td><td align="center">enterable to the directory</td></tr></tbody></table><blockquote><p>Home directory default permission: user &#x3D;rwx, go&#x3D;r-x ;</p><ul><li><code>setuid (s/S &lt;-&gt; x/-, 4000/u+s)</code> : It set valid user ID from the running user’s ID to the file owner’s ID;</li><li><code>setgid (g/G &lt;-&gt; x/-, 2000/g+s)</code>: Run not with the permissions of the group to which the user who started it belongs, but with the group that owns the file. In other words, <strong>the process gid is the same as the file gid</strong>.</li><li><code>sticky (t/T &lt;-&gt; x/-, 1000/o+t)</code>: It has no effect on files, but when it is used on a directory, all files in the directory can only be deleted or moved by their owner.</li></ul></blockquote><ul><li><strong>File Type</strong>:</li></ul><table><thead><tr><th align="center">Tag</th><th align="center">Type</th></tr></thead><tbody><tr><td align="center">-</td><td align="center">a normal file</td></tr><tr><td align="center">d</td><td align="center">a directory</td></tr><tr><td align="center">l</td><td align="center">a symbolic link (real file property is the file property that the symbolic link points to)</td></tr><tr><td align="center">c</td><td align="center">a character device file (process bytes stream, like terminal)</td></tr><tr><td align="center">b</td><td align="center">a block device file (process blocks, like hard-disk or CD-ROM)</td></tr></tbody></table></blockquote><h4 id="User-and-Group"><a href="#User-and-Group" class="headerlink" title="User and Group"></a>User and Group</h4><p>Because the permission is too large, you can even delete system files and crash the system. Therefore, you are not recommended to directly use <strong>root</strong> account.</p><p>On Linux systems, <code>sudo</code> is used as the default <strong>root</strong> identity for standard users.</p><p>Next, we have some commands for managing users and groups.</p><ul><li><p><code>groupadd</code>: create a new work group, whose info is added to <code>/etc/group</code>, <code>/etc/gshadow</code> and so on.</p><ul><li><code>[-g gid]</code> (specify the id of new group), <code>-r</code> (create system working groups)</li></ul></li><li><p><code>groupdel</code>: delete a group</p></li><li><p><code>gpasswd [options] groupname</code>: management tool the <code>/etc/group</code> and <code>/etc/gshadow</code></p><ul><li><code>-a/d username</code> (add&#x2F;delete user to group)</li><li><code>-A</code> (specify the manager)</li><li><code>-r/R</code> (cancel the password for the group, then only group member can <code>newgrp</code> to access the group)</li><li><code>-M user1,user2...</code>  add users to group</li></ul></li><li><p><code>groupmod</code>: change the group information</p><ul><li><code>-g gid</code> (change group id)</li><li><code>-n new_name old_name</code> (change group name)</li></ul></li><li><p><code>newgrp groupname</code>: It’s using the same account another group name, to log into the system again.</p></li><li><p><code>useradd</code>: create a new user.</p><ul><li><p><code>-m/M</code> (automatically &#x2F; <strong>not</strong> create a user <strong>home directory</strong>), </p></li><li><p><code>-g</code> (specify the login group), </p></li><li><p><code>-G grp1,grp2...</code> (specify the supplementary groups)</p></li><li><p><code>-d</code> (specify the starting directory for the user to log in to), </p></li><li><p><code>-r</code> (create a system account)</p></li><li><p><code>-s</code> (specify the login shell)</p></li><li><p><code>-n</code> (cancel creating a group with the user name)</p></li><li><p><code>-p</code> (specify the password, or later run the command <code>passwd</code> to set)</p><p><code>useradd -m -g root username</code>, <code>useradd -d /home/test username</code></p></li></ul></li><li><p><code>userdel</code>: <code>-r</code> (recursively delete)</p></li></ul><blockquote><p>Initial <strong>Login Group</strong>, is a group that a user owns immediately upon login. It’s usually specified with <code>-g</code> when creating a user. The GID in the user info (<code>/etc/passwd</code>) is <strong>login group</strong>. A user’s additional group is to assign additional permission to the specified user. (There can be only one <strong>login group</strong> and multiple <strong>supplementary group</strong>)</p></blockquote><ul><li><code>usermod</code>: modify the settings of the user account.<ul><li><code>-d</code>: set login directory of the user account</li><li><code>-e</code>: set validity period …</li><li><code>-g</code>: set the login group …</li><li><code>-G</code>: set the supplementary group …</li><li><code>-s</code>: set the shell used after login …</li><li><code>-l new_name old_name</code>: set the new username …</li><li><code>-L/U</code>: lock&#x2F;unlock the account …</li><li><code>-p</code>: set the new password …</li></ul></li></ul><h4 id="Progress"><a href="#Progress" class="headerlink" title="Progress"></a>Progress</h4><p>When the system starts, the kernel initializes some of its own activities as <strong>Init Process</strong> (PID 1). In turn, a series of shell scripts called <strong>Init Scripts</strong> (located in <code>/etc</code>) are run, which can start all system services. Many of these system services are implemented in the form of <strong>daemons</strong>, which run only in the background without any user interface (inaccessible). Here are some of the command-line tools available:</p><ul><li><p><code>ps</code>: To view the snapshot of process status;</p><ul><li><p>common parameter <code>aux</code> (show all processes)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-16-17-ubuntu:/etc$ ps aux</span><br><span class="line">USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line"></span><br><span class="line"><span class="comment"># TTY: ? denotes terminal running locally, Pts/n denotes terminal running remotely</span></span><br><span class="line"><span class="comment"># VSZ: virtual memory size</span></span><br><span class="line"><span class="comment"># RSS: physical memory size occupied by process</span></span><br><span class="line"><span class="comment"># STAT: R(running), S(sleeping), D(uninterruptible sleeping), T(terminal), Z(zombie) &lt;(high priority) N(low priority)</span></span><br></pre></td></tr></table></figure><blockquote><p>Ctrl-C: send a SIGIN</p><p>Ctrl-D: send a EOF</p><p>Ctrl-Z: send a SIGSTP, pause ongoing process on the terminal so as to be resumed when necessary.</p></blockquote></li></ul></li><li><p><code>top</code>: To displays a continuously updated list of system process in order of process activity (default, refresh per 3s);</p></li><li><p><code>jobs</code>: </p></li><li><p><code>bg</code>: </p></li><li><p><code>fg</code>: </p></li><li><p><code>kill</code>: To send signals to programs (<code>kill [-signal] PID...</code>);</p><ul><li><table><thead><tr><th>NO.</th><th>NAME</th><th>EXPLANATION</th></tr></thead><tbody><tr><td>1</td><td>HUP</td><td>Hang up, this signal is used to tell the program that the control terminal has “hung up.” You can show what this signal does by closing a terminal session. Foreground programs running on the current terminal will receive this signal and terminate. Many daemons also use this signal to re-initialize.</td></tr><tr><td>2</td><td>INT</td><td>like Ctrl-c</td></tr><tr><td>9</td><td>KILL</td><td>The KILL signal is never sent to the target program. Instead, the kernel immediately terminates the process. When a process is terminated in this way, it has no opportunity to do any “cleaning” or saving work.</td></tr><tr><td>15</td><td>TERM</td><td>Terminal, this is default signal sent by KILL</td></tr><tr><td>18</td><td>CONT</td><td>Continue, after getting a stop signal, program will be resumed by CONT</td></tr><tr><td>19</td><td>STOP</td><td>like KILL, STOP is not sent to the target process, so it cannot be ignored</td></tr></tbody></table><p>其他常用信号：</p><table><thead><tr><th>NO.</th><th>NAME</th><th>EXPLANATION</th></tr></thead><tbody><tr><td>3</td><td>QUIT</td><td></td></tr><tr><td>11</td><td>SEGV</td><td>If a program uses memory illegally, this signal will be sent</td></tr><tr><td>20</td><td>TSTP</td><td>Ctrl-z will trigger this signal to cause terminal stop, unlike STOP, it can be ignored</td></tr></tbody></table></li></ul></li><li><p><code>killall</code>: To send signals to multiple processes that match a particular program or username (<code>killall [-u user] [-signal] name...</code>);</p></li><li><p><code>shutdown</code>: To shutdown the machine or reboot;</p></li></ul><h4 id="Shell-Environment"><a href="#Shell-Environment" class="headerlink" title="Shell Environment"></a>Shell Environment</h4><ul><li><p><code>printenv</code>: </p></li><li><p><code>set</code>: To display existing shell variables in the system and set new variable values for shell variables.</p></li><li><p>When user log in to the system, the <strong>bash</strong> program starts and reads a series of configuration scripts (startup files that define a default environment for all users), then it reads the startup files in the home directory that define the user’s personal shell environment.</p><p>The exact startup order depends on the type of shell session you want to run. There are two types, one is login shell session (need username and password), the other is non-login shell session (start under the GUI).</p><p><strong>Login shell startup order</strong>:</p><table><thead><tr><th>File</th><th>Usage</th></tr></thead><tbody><tr><td>&#x2F;etc&#x2F;profile</td><td>global conf script applying to all users</td></tr><tr><td>~&#x2F;.bash_profile</td><td>user’s personal startup file, used to extend or override settings in global conf script</td></tr><tr><td>~&#x2F;.bash_login</td><td>if ~&#x2F;.bash_profile is not found, bash will try to read this script</td></tr></tbody></table><p><strong>Non-login shell startup order</strong>: </p><table><thead><tr><th>File</th><th>Usage</th></tr></thead><tbody><tr><td>&#x2F;etc&#x2F;bash.bashrc</td><td>global conf script applying to all users</td></tr><tr><td>~&#x2F;.bashrc</td><td>user’s personal startup file, used to extend or override settings in global conf script</td></tr></tbody></table><p>In addition to reading the startup files above, <strong>non-login shell also inherit the environment settings of their parent process, usually a login shell</strong>. </p><p>In general users’ points, <strong>the file ~&#x2F;.bashrc is probably the most important startup file</strong> because it’s almost always read. <strong>Non-login shells read it by default, and most startup files for login shells are written in such a way that they can read ~&#x2F;.bashrc</strong> . The below is a typical .bash_profile file (From CentOS 4):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bash_profile</span></span><br><span class="line"><span class="comment"># Get the aliaes and functions</span></span><br><span class="line"><span class="keyword">if</span> [ -f ~/.bashrc ]; <span class="keyword">then</span></span><br><span class="line">. ~/.bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># User specific environment and startup programs</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure></li><li><p><code>export</code>: export environment variables;</p></li><li><p><code>alias</code>: create alias for command;</p></li></ul><h4 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h4><p><a href="https://blog.csdn.net/coobeedongzhou/article/details/24492581">ref1</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Permission&quot;&gt;&lt;a href=&quot;#Permission&quot; class=&quot;headerlink&quot; title=&quot;Permission&quot;&gt;&lt;/a&gt;Permission&lt;/h4&gt;&lt;p&gt;First of all, let’s take a quick look </summary>
      
    
    
    
    <category term="languages" scheme="https://stu-yue.github.io/categories/languages/"/>
    
    <category term="shell" scheme="https://stu-yue.github.io/categories/languages/shell/"/>
    
    
    <category term="shell" scheme="https://stu-yue.github.io/tags/shell/"/>
    
    <category term="linux" scheme="https://stu-yue.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Memo | Parameter Estimation</title>
    <link href="https://stu-yue.github.io/jottings/mathematics/memo_mle_mae_bayes/"/>
    <id>https://stu-yue.github.io/jottings/mathematics/memo_mle_mae_bayes/</id>
    <published>2023-08-30T05:56:53.000Z</published>
    <updated>2023-08-30T09:21:54.177Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Through this note, I hope to deepen my understanding of probability distribution and inference.</p></blockquote><h4 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h4><blockquote><ul><li><strong>Probability:</strong> to predict results obtained in the next observation when parameters are known;</li><li><strong>Statistic&#x2F;Likelihood:</strong> to estimate parameters about properties when the result of observations are known;</li><li><strong>Parametric Method:</strong>  assume that  the learned distribution has a specific functional form (like Gaussian distribution or exponential p.d.f), we only estimate the parameters in these functions.</li><li><strong>Nonparametric Method</strong>: use the training samples to estimate the density of any point in the domain.<ul><li>Nonparametric methods also have parameters, we just don’t assume any specific functional form for distribution;</li><li>Actually, nonparametric methods treat all training samples as parameters;</li><li>example: kernel density estimation;</li></ul></li></ul></blockquote><ol><li>Under the joint distribution $p_{X,Y}(X,Y)$:<ul><li>When the effect of $Y$ is removed from the joint distribution $p_{X,Y}(X,Y)$,  <em>marginal distribution</em> $p_X(X)$ is called <strong>marginal likelihood</strong>;</li><li>When $X$ has not yet been observed,  <em>marginal distribution</em> $p_Y(Y)$ is called <strong>prior distribution</strong>;</li></ul></li><li><strong>Posterior Distribution</strong>:  $p(\theta|\mathcal{D}) &#x3D; \frac{p(\mathcal{D},\theta)}{p(\mathcal{D})}$, concentrating <em>Population Info, Sample Info and Prior Info</em>;<ul><li>$p(\mathcal{D})$ is marginal likelihood;</li><li>$\text{Posterior} &#x3D; \frac{\text{Likelihood}\times \text{Prior}}{\text{Marginal Likelihood}}$, in terms of $p(Y|X) &#x3D; \frac{1}{Z}p(X|Y)p(Y)$, $Z&#x3D;p(X)&gt;0$ is a normalized constant such that $p(Y|X)$ is a valid probability distribution.</li></ul></li><li>The Views<ul><li>Frequentist: <ul><li>Data are repeatable random sample - there is a frequency;</li><li>Underlying parameters remain constant during this repeatable process;</li><li><em>Parameters are <strong>fixed value</strong></em>;</li><li><em>statistical inference: Population Info + Sample Info</em></li><li>MLE, MAP;</li></ul></li><li>Bayesian: <ul><li>Data are observed from the realized sample;</li><li><em>Parameters are unknown <strong>(random variable)</strong> and described probabilistically <strong>(prior distribution)</strong></em>;</li><li><em>statistical inference: Population Info + Sample Info + <strong>Prior Info (Main Diff)</strong></em>;</li><li>Bayesian Estimation;</li></ul></li></ul></li></ol><blockquote><p><strong>Notations</strong></p><ul><li>Training Data: $\mathcal{D} &#x3D; { (\mathbf{x_1}, y_1),\cdots,(\mathbf{x}_n, y_n) }$;</li><li>Model Parameter: $\theta$;</li><li>New Data: $x^*$;</li></ul></blockquote><h4 id="Maximum-Likelihood-Estimation"><a href="#Maximum-Likelihood-Estimation" class="headerlink" title="Maximum Likelihood Estimation"></a>Maximum Likelihood Estimation</h4><ul><li><p>Objective is<br>$$<br>\theta_{MLE}^* &#x3D; \arg\max_\theta p(\mathcal{D}|\theta)<br>$$</p><ul><li>$p(\mathcal{D}|\theta)$ is likelihood, not conditional probability;</li></ul><p>Usually, we define<br>$$<br>\mathscr{l}(\theta) &#x3D; p(\mathcal{D}|\theta) \<br>\mathscr{ll}(\theta) &#x3D; \ln \mathscr{l}(\theta)<br>$$<br>So, objective is equivalent to<br>$$<br>\theta_{MLE}^* &#x3D; \arg\max_\theta \mathscr{ll}(\theta)<br>$$<br>That is, we seek those values for the parameters in $\theta$ which maximize $p(\mathcal{D}|\theta)$. The MLE solution is usually obtained by setting<br>$$<br>\frac{\partial \mathscr{ll}(\theta)}{\partial\theta} &#x3D; 0<br>$$</p></li><li><p><font color=red>However, the model…</font></p><ul><li>Does not incorporate prior belief;</li><li>Easy to overfit the data;</li></ul></li></ul><h4 id="Maximum-A-Posteri-Estimation"><a href="#Maximum-A-Posteri-Estimation" class="headerlink" title="Maximum A Posteri Estimation"></a>Maximum A Posteri Estimation</h4><ul><li><p>Objective is<br>$$<br>\theta^*_{MAP} &#x3D; \arg\max_\theta p(\theta|\mathcal{D})<br>$$<br>Since we have Bayes rule:<br>$$<br>p(\theta | \mathcal{D}) &#x3D; \frac{p(\mathcal{D})p(\theta)}{p(\mathcal{D})}<br>$$<br>Our objective is equivalent to<br>$$<br>\theta^*_{MAP} &#x3D; \arg\max_\theta p(\mathcal{D}|\theta)p(\theta)<br>$$<br>Further, by taking the log<br>$$<br>\theta^*_{MAP} &#x3D; \arg\max_\theta {\ln p(\mathcal{D}|\theta) + lnp(\theta) } \<br>\theta^*_{MAP} &#x3D; \arg\max_\theta { \mathscr{ll}(\theta) + \ln p(\theta) }<br>$$<br>Thus, our final goal is to find<br>$$<br>\theta^*_{MAP} &#x3D; \arg\max_\theta { \mathscr{ll}(\theta) + \ln p(\theta) }<br>$$<br>The difference between MAP and MLE is the “extra” term - $p(\theta)$. The term is:</p><ul><li>our prior (belief)</li><li>also can be seen as penalty (regularization) - to reduce the overfitting.</li></ul></li></ul><blockquote><p> For $p(\theta|\mathcal{D})$, in terms of <strong>point estimation</strong> for $\theta$,</p><ul><li>using the <strong>maximum value</strong> is called <strong>Maximum A Posterior Estimation</strong>;</li><li>using the <strong>median value</strong> is called <strong>Posteriror Median Estimation</strong>;</li><li>using the <strong>expectation value</strong> is called <strong>Posterior Expectation Estimation</strong>;</li></ul></blockquote><h4 id="Bayesian-Estimation"><a href="#Bayesian-Estimation" class="headerlink" title="Bayesian Estimation"></a>Bayesian Estimation</h4><blockquote><ul><li>$p(\theta|\mathcal{D})$ (it’s the result of adjustments to prior $p(\theta)$ by population and sample);</li><li><strong>Equal Ignorance</strong>: If there’s no information about the prior distribution, assume $\theta \sim U(0,1)$ ;</li></ul></blockquote><ul><li><p>Learning:  Computing the posterior $p(\theta|\mathcal{D})$ ;</p></li><li><p>Prediction:  $p(\hat y | x^*,\mathcal{D}) &#x3D; \int_\theta p(\hat y | x^*,\theta)p(\theta|\mathcal{D})d\theta$ ;</p></li><li><p><font color=red>Both MLE and MAP return only single and specific values for the paramter $\theta$; </font></p><p><font color=blue>Bayesian estimation, by contrast, calculates fully the posterior distribution $p(\theta|\mathcal{D})$, </font> and making prediction by considering all possible $\theta$.</p><p>Thus, for Bayesian methods:</p><ul><li>The prediction is optimal</li><li>Avoid the overfitting</li></ul></li><li><p><font color=blue>Bayesian is powerful, but…</font></p><p>We need to compute posterior distribution $p(\theta|\mathcal{D})$, and<br>$$<br>p(\theta|\mathcal{D}) &#x3D; \frac{p(\mathcal{D}|\theta)p(\theta)}{\int p(\mathcal{D},\theta)d\theta}<br>$$<br>In practice, evaluating this posterior is usually intractable due to the <font color=red>complex integrals</font>…</p></li></ul><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://yuanxiaosc.github.io/2018/06/20/%E8%B4%9D%E5%8F%B6%E6%96%AF%E4%BC%B0%E8%AE%A1%E3%80%81%E6%9C%80%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1%E3%80%81%E6%9C%80%E5%A4%A7%E5%90%8E%E9%AA%8C%E4%BC%B0%E8%AE%A1%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB/">Mainly Ref</a></p><p><a href="https://blog.csdn.net/u011508640/article/details/72815981">Ref2</a></p><p><a href="https://www.zhangzhenhu.com/glm/source/%E8%B4%9D%E5%8F%B6%E6%96%AF%E4%BC%B0%E8%AE%A1/content.html">Ref3</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Through this note, I hope to deepen my understanding of probability distribution and inference.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Pr</summary>
      
    
    
    
    <category term="mathematics" scheme="https://stu-yue.github.io/categories/mathematics/"/>
    
    
    <category term="math" scheme="https://stu-yue.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>Memo | Algebra Basis</title>
    <link href="https://stu-yue.github.io/jottings/mathematics/memo_algebra_basis/"/>
    <id>https://stu-yue.github.io/jottings/mathematics/memo_algebra_basis/</id>
    <published>2023-08-27T07:56:53.000Z</published>
    <updated>2023-08-30T05:59:00.628Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>**Positive Definiteness of the Norm: ** According to the usual definition, a norm should satisfy the property of positive definiteness which means that a norm must have a non-negative value for non-zero vectors and only attain zero when the vector is the <strong>zero</strong>.</p></li><li><p>**Norm and Distance Evaluation: **</p><table><thead><tr><th align="left">Norm</th><th>Distance</th></tr></thead><tbody><tr><td align="left">$L_0\ \text{norm}$ : $</td><td></td></tr><tr><td align="left">$L_1\ \text{norm}$ : $</td><td></td></tr><tr><td align="left">$L_2\ \text{norm}$ :  $</td><td></td></tr><tr><td align="left">$L_p\ \text{norm}$ :  $</td><td></td></tr><tr><td align="left">$\text{Infinite norm}$ : $</td><td></td></tr></tbody></table></li><li><p><strong>Normed Space:</strong> Normed space introduces a norm (or length, modulus) concept on the basis of linear space.</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;**Positive Definiteness of the Norm: ** According to the usual definition, a norm should satisfy the property of positive defini</summary>
      
    
    
    
    <category term="mathematics" scheme="https://stu-yue.github.io/categories/mathematics/"/>
    
    
    <category term="algebra" scheme="https://stu-yue.github.io/tags/algebra/"/>
    
  </entry>
  
  <entry>
    <title>Summa | Intro of Statistical ML</title>
    <link href="https://stu-yue.github.io/jottings/statistical_ml/summa_intro/"/>
    <id>https://stu-yue.github.io/jottings/statistical_ml/summa_intro/</id>
    <published>2023-08-27T07:56:53.000Z</published>
    <updated>2023-08-30T09:24:16.463Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>If a system is able to improve its performance by executing a certain process, it is called learning.</p></blockquote><h4 id="1-Basis"><a href="#1-Basis" class="headerlink" title="1 Basis"></a>1 Basis</h4><ol><li><strong>Hypothesis Space:</strong> The set of functions that includes all possible models to be learned.</li><li><strong>Common Steps:</strong> <ol><li>Attain a finite training data set.</li><li>Determine the set of <strong>learning models</strong>.</li><li>Determine the criteria for model selection (<strong>learning strategies</strong>).</li><li>Develop algorithms for solving the optimal model (<strong>learning algorithm</strong>).</li><li>Select optimal model according to criteria.</li><li>Use the learned optimal model to predict or analyze new data.</li></ol></li><li><strong>Problem Types:</strong> <strong>Classification&#x2F;Tagging</strong> (outputs take a finite number of discrete values), <strong>Regression</strong> (function fitting, real values)</li><li><strong>Model Types</strong>:<ul><li><strong>Discriminative Model</strong>: directly model $p(Y|X)$;<ul><li><em>Cons</em>:  easy to learn, high classification accuracy;</li></ul></li><li><strong>Generative Model</strong>: model $p(X, Y)$, usually translating to modeling the prior distribution $p(Y)$ and class conditional distribution $p(X|Y)$, due to ($p(X, Y)&#x3D; P(X|Y)p(Y)$);<ul><li><em>Cons</em>: <strong>add the prior distribution [main diff]</strong>, model the data generation process;</li></ul></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;If a system is able to improve its performance by executing a certain process, it is called learning.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 </summary>
      
    
    
    
    <category term="statistical_ml" scheme="https://stu-yue.github.io/categories/statistical-ml/"/>
    
    
    <category term="ml" scheme="https://stu-yue.github.io/tags/ml/"/>
    
    <category term="statistic" scheme="https://stu-yue.github.io/tags/statistic/"/>
    
  </entry>
  
  <entry>
    <title>Memo | See the World through Shell</title>
    <link href="https://stu-yue.github.io/jottings/languages/shell/memo_see_the_world_through_shell/"/>
    <id>https://stu-yue.github.io/jottings/languages/shell/memo_see_the_world_through_shell/</id>
    <published>2023-08-27T07:56:53.000Z</published>
    <updated>2023-08-31T13:24:31.847Z</updated>
    
    <content type="html"><![CDATA[<p>In this post, there’re other commands we should be familiar with:</p><ul><li><p><code>echo</code>: To display a line text.</p><ul><li><code>-e</code> (explain the escape sequences)</li></ul></li><li><p><code>clear</code>: </p></li><li><p><code>history</code>: To display the history list content.</p><ul><li><p>list history commands: </p><table><thead><tr><th>sequence</th><th>conduct</th></tr></thead><tbody><tr><td>!!</td><td>repeat the last command executed</td></tr><tr><td>!number</td><td>repeat the number line command in the history</td></tr><tr><td>!string</td><td>repeat the command starting with this string</td></tr><tr><td>!?string</td><td>repeat the command containing this string</td></tr></tbody></table></li></ul></li></ul><h4 id="Expansions-in-Shell"><a href="#Expansions-in-Shell" class="headerlink" title="Expansions in Shell"></a>Expansions in Shell</h4><ol><li><p><strong>Mathematical Expression:</strong> </p><ul><li>Format: <code>$((expression))</code>, for example,  <code>echo $((2 + 2))</code>;</li><li>Operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>  (integer division), <code>%</code>, <code>**</code> (exponentiation);</li></ul></li><li><p><strong>Curly Brackets (or Braces):</strong> Curly braces can create multiple text characters. Generally speaking, a pattern in curly braces may contain a header and a postscript. The curly brace expression itself may contain <strong>a list of strings separated by commas, an integer interval, or a single character interval</strong>. <strong>Whitespace characters cannot be embedded in this mode</strong>.</p><ul><li><p><code>echo Number_&#123;1..5&#125;</code>, <code>echo &#123;Z..A&#125;</code>, <code>echo Front-&#123;A,B,C&#125;</code>;</p></li><li><p><code>mkdir &#123;2007..2009&#125;-0&#123;1..9&#125; &#123;2007..2009&#125;-&#123;10..12&#125;</code></p></li><li><p>Furthermore, curly braces can be nested: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo a&#123;A&#123;1,2&#125;,B&#123;3,4&#125;&#125;b</span><br><span class="line">aA1b aA2b aB3b aB4b</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Parameter Expansion:</strong> </p></li><li><p><strong>Command Substitution</strong>: Use the output of a command as expansion mode:</p><ul><li><p><code>ls -l $(which cp)</code>, <code>echo$(ls)</code>, <code>file $(ls /usr/bin* | grep zip)</code>;</p></li><li><p>In the old shell, [&#96;&#96;] can replace [$()]:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l `<span class="built_in">which</span> <span class="built_in">cp</span>`</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Double Quotation:</strong> In double quotes, the special characters used by the shell lose their special meaning and are treated as ordinary characters. <strong>Mathematical expansion, parameter expansion and command substitution</strong> are still performed. (Double quotation can retain whitespace)</p><ul><li><code>ls -l &quot;two words.txt&quot;</code>, <code>echo &quot;$USER $((2+2)) $(cal)&quot;</code>;</li><li><code>echo &quot;$(cal)&quot;</code> is different with <code>echo $(cal)</code>, try it.</li></ul></li><li><p><strong>Single Quotation</strong>: Single quotation disables all mode expansions.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-16-17-ubuntu:~$ <span class="built_in">echo</span> text ~/*.txt &#123;a,b&#125; $(<span class="built_in">echo</span> foo) $((<span class="number">2</span>+<span class="number">2</span>)) <span class="variable">$USER</span></span><br><span class="line">ubuntu@VM-16-17-ubuntu:~$ <span class="built_in">echo</span> <span class="string">&quot;text ~/*.txt &#123;a,b&#125; <span class="subst">$(echo foo)</span> <span class="subst">$((2+2)</span>) <span class="variable">$USER</span>&quot;</span></span><br><span class="line">ubuntu@VM-16-17-ubuntu:~$ <span class="built_in">echo</span> <span class="string">&#x27;text ~/*.txt &#123;a,b&#125; $(echo foo) $((2+2)) $USER&#x27;</span></span><br><span class="line">text /home/ubuntu/lazy_dog.txt /home/ubuntu/ls.txt a b foo 4 ubuntu</span><br><span class="line">text ~/*.txt &#123;a,b&#125; foo 4 ubuntu</span><br><span class="line">text ~/*.txt &#123;a,b&#125; $(<span class="built_in">echo</span> foo) $((<span class="number">2</span>+<span class="number">2</span>)) <span class="variable">$USER</span></span><br></pre></td></tr></table></figure></li><li><p>**Backslash: ** <code>\</code> can escape special characters in shell, but not in single quotes.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The balance for user <span class="variable">$USER</span> is: \$5.00&quot;</span></span><br><span class="line"><span class="built_in">mv</span> bad\&amp;filename good_filename</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><strong>NOTE</strong>: </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="string">&quot;abc&quot;</span>, $<span class="string">&quot;\n&quot;</span></span><br></pre></td></tr></table></figure><p>The above is <strong>a special string conversion syntax</strong> used to <strong>localize strings</strong> (with Settings such as the environment variable <strong>LANG or LC_MESSAGES</strong>).</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="string">&#x27;abc&#x27;</span>, $<span class="string">&#x27;\n&#x27;</span>, $<span class="string">&#x27;ab\tc&#x27;</span></span><br></pre></td></tr></table></figure><p>When you use the form $’abc’ in the Shell, <strong>the Shell extends the string and replaces the special characters with the corresponding escape sequence</strong>.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In this post, there’re other commands we should be familiar with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;echo&lt;/code&gt;: To display a line text.&lt;/p&gt;
&lt;ul&gt;
&lt;li</summary>
      
    
    
    
    <category term="languages" scheme="https://stu-yue.github.io/categories/languages/"/>
    
    <category term="shell" scheme="https://stu-yue.github.io/categories/languages/shell/"/>
    
    
    <category term="shell" scheme="https://stu-yue.github.io/tags/shell/"/>
    
    <category term="linux" scheme="https://stu-yue.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Memo | Redirection</title>
    <link href="https://stu-yue.github.io/jottings/languages/shell/memo_redirection/"/>
    <id>https://stu-yue.github.io/jottings/languages/shell/memo_redirection/</id>
    <published>2023-08-25T06:56:53.000Z</published>
    <updated>2023-08-25T07:42:17.718Z</updated>
    
    <content type="html"><![CDATA[<hr><p><em>Input&#x2F;output redirection is achieved by modifying file pointers.</em> <strong>When redirection occurs, file descriptors themselves are not changed, instead, it’s the file pointers associated with the file descriptors that are altered.</strong></p><h4 id="Manipulation-of-File-Descriptors-in-Shell"><a href="#Manipulation-of-File-Descriptors-in-Shell" class="headerlink" title="Manipulation of File Descriptors in Shell"></a>Manipulation of File Descriptors in Shell</h4><blockquote><p><strong>In redirection, <code>&amp;</code> is used to indicates the following numbers is file descriptor rather than  a filename.</strong></p></blockquote><ul><li><p>Output Redirection:</p><ul><li><code>stdiout</code> redirection: <ul><li><code>command &gt;file</code>: [overwrite], stdout overwrites the file.<ul><li><code>&gt; file</code>: clear the content.</li></ul></li><li><code>command &gt;&gt;file</code>: [append], stdout appends to the file.</li></ul></li><li><code>stderr</code> redirection:<ul><li><code>command 2&gt;file</code>: [overwrite], stderr overwrites the file.</li><li><code>command 2&gt;&gt;file</code>: [append], stderr appends to the file.</li></ul></li><li>Both <code>stdout</code> and <code>stderr</code>:<ul><li><code>command &gt;file 2&gt;&amp;1</code>: [overwrite], both stdout and stderr overwrite the file.</li><li><code>command &gt;&gt;file 2&gt;&amp;1</code>: [append], both stdout and stderr append to the file.</li><li><code>command &gt;file1 2&gt;file2</code>: stdout overwrites the file1, stderr overwrites the file2.</li><li><code>command &gt;&gt;file1 2&gt;&gt;file2</code>: stdout appends to file1, stderr appends to file2.</li><li><code>command &gt;file 2&gt;file</code>: [not recommend] file is opened twice, leading to resource competition.</li><li><code>command &gt;&gt;file 2&gt;&gt;file</code>: [not recommend] file is opened twice, leading to resource competition.</li></ul></li></ul></li><li><p>Input Redirection: </p><ul><li><p><code>command &lt;file</code>: take the contents of the file as the input to command.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">while read str; do</span><br><span class="line">echo $str</span><br><span class="line">done &lt;readme.txt</span><br></pre></td></tr></table></figure></li><li><p><code>command &lt;&lt;END</code>: read data from standard input (keyboard) until meeting the delimiter END (defined by the user).</p></li><li><p><code>command &lt;file1 &gt;file2</code>: input by file1, and output to file2</p></li></ul></li></ul><blockquote><p><code>&amp;&gt;</code>: redirect both stdout and stderr to the same  location (usually a file).</p><p><code>&gt;&amp;</code>: redirect the output of one file descriptor to another</p><p><code>&gt;&amp;-</code>: equal to redirection to <code>/dev/null</code></p></blockquote><h4 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h4><p>Pipeline is used to <strong>link the stdout of the previous instruction</strong> as <strong>the stdin of the next instruction</strong>.</p><p>Pipeline is often used to perform complex operations on data. It’s possible to put several commands together to form a pipeline (usually called filter). For example: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /bin /usr/bin | sort | uniq | less</span><br></pre></td></tr></table></figure><h4 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h4><p>There’s some useful command in this memo:</p><ul><li><code>cat</code>: To link file.<ul><li><code>cat</code> can accept not one parameter, so it can concatenate the file: <code>cat movie.mpeg.0* &gt; movie.mpeg</code>;</li></ul></li><li><code>sort</code>: To sort the text lines.</li><li><code>uniq</code>: To report&#x2F;omit the repetitive lines.</li><li><code>grep</code>: To print the matching rows.<ul><li><code>-i</code> (ignore upper&#x2F;lower), <code>-v</code> (reverse find, print mismatching lines), <code>-n</code>  (show the matching lines), <code>-r</code> (recursively find), <code>-l</code> (only print matching filename), <code>-c</code>  (only print the number of matching line)</li></ul></li><li><code>wc</code>: To print the LF, word, bytes of the text.<ul><li><code>-c</code> (bytes), <code>-l</code> (lines), <code>-w</code> (words)</li></ul></li><li><code>head</code>&#x2F;<code>tail</code>: To print first&#x2F;last part of text.<ul><li><code>-n</code> (lines), <code>-c</code> (bytes)</li><li><code>tail -f filename</code>: continue to monitor this file, when the new is added to the file, they appear immediately on the screen.</li></ul></li><li><code>tee</code>: read from stdin, and write to stdout and file.<ul><li><code>-a</code>  (append mode), <code>-i</code> (ignore-interrupts)</li><li><code>ls -l | tee -a ls.log </code>: print the content both in the stdout and file.</li><li><code>ls /usr/bin | tee ls.log | grep zip</code></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Input&amp;#x2F;output redirection is achieved by modifying file pointers.&lt;/em&gt; &lt;strong&gt;When redirection occurs, file descriptors the</summary>
      
    
    
    
    <category term="languages" scheme="https://stu-yue.github.io/categories/languages/"/>
    
    <category term="shell" scheme="https://stu-yue.github.io/categories/languages/shell/"/>
    
    
    <category term="shell" scheme="https://stu-yue.github.io/tags/shell/"/>
    
    <category term="linux" scheme="https://stu-yue.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Memo | GIL and Coroutine</title>
    <link href="https://stu-yue.github.io/jottings/languages/python/memo_GIL_and_coroutine/"/>
    <id>https://stu-yue.github.io/jottings/languages/python/memo_GIL_and_coroutine/</id>
    <published>2023-08-10T08:01:53.000Z</published>
    <updated>2023-08-11T16:23:09.434Z</updated>
    
    <content type="html"><![CDATA[<h4 id="GIL-Global-Interpreter-Lock"><a href="#GIL-Global-Interpreter-Lock" class="headerlink" title="GIL (Global Interpreter Lock)"></a>GIL (Global Interpreter Lock)</h4><ol><li><p>GIL is not a characteristic of Python itself, but rather a characteristic to CPython, the reference implementation of Python.</p></li><li><p>In CPython, GIL is a mutex lock used to ensure that only on thread is executing at a time within a process.</p></li><li><p>In the absence of the GIL, it’s possible for multiple threads executing the same code simultaneously <strong>to cause incorrect reference counting of variables</strong>, leading to the garbage collector directly reclaiming the variables involved in the executed code. This can result in errors when other threads attempt to use those reclaimed variables.</p></li><li><p><strong>How to work:</strong> </p><ul><li><p>Each thread acquires the GIL at the beginning of its execution to prevent other threads from preempting. Similarly, <strong>after each thread completes a segment of code</strong> (or <strong>before system calls that may cause blocking, such as IO operations</strong>), it releases the GIL to allow other threads to utilize resources.</p></li><li><p>In CPython, there’s another mechanism called <code>check_interval</code>, where the interpreter periodically checks the status of the GIL lock for threads. After a certain interval, the interpreter forces the current thread to release the GIL, allowing other threads to have opportunity to execute.</p><p>Overall, each Python thread is encapsulated in a similar loop structure. Let’s take a look at the following code: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (--ticker &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ticker = check_interval;</span><br><span class="line">        <span class="comment">/* Give another thread a chance */</span></span><br><span class="line">        PyThread_release_lock(interpreter_lock);</span><br><span class="line">        <span class="comment">/* Other thread may run now */</span></span><br><span class="line">        PyThread_acquire_lock(interpreter_lock);</span><br><span class="line">    &#125;</span><br><span class="line">    bytecode = *next_instr++;</span><br><span class="line">    <span class="keyword">switch</span>(bytecode) &#123;</span><br><span class="line">            <span class="comment">/* execute the next instruction ... */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above example represents instruction counting, while the current approach is mostly based on time slicing.</p></li><li><p>Here’s another example that demonstrates GIL’s working principle:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="comment"># endless loop for full CPU utilization</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># multi-thread version:</span></span><br><span class="line"><span class="comment"># t1 = Thread(target=test)</span></span><br><span class="line"><span class="comment"># multi-process version:</span></span><br><span class="line">t1 = Process(target=test)</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># main thread execution</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>When the multi-thread code running, we can observe the CPU utilization from <code>htop</code> as shown below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1  [50%]</span><br><span class="line">2  [50%]</span><br></pre></td></tr></table></figure><p>According to the above, we can know that each thread spends their a half time waiting for GIL.</p><p>Additionally, the multi-process version as shown below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1  [100%]</span><br><span class="line">2  [100%]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>The other way to utilize multi-core CPU is <strong>Multi-Process or Coroutine</strong></p></li></ol><h4 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h4><p><strong>Generator</strong> contains the <code>yield</code> keyword to produce values. It has the following characteristics:</p><ol><li><em>Laziness</em>: Generators are lazy in nature, meaning they produce values on-demand as requested by the caller, rather than generating all the values at once. This lazy evaluation allows for efficient memory usage, especially when dealing with large or infinite sequences.</li><li><em>Memory efficiency</em>: Due to their lazy evaluation, generators are memory-efficient. </li><li><em>Iterability:</em> Generators are iterable objects, which means they can be looped over using a <code>for</code> loop or consumed by other iterable functions like <code>list()</code> or <code>sum()</code>. They provide a convenient way to iterate over a sequence of values without the need to store the entire sequence in memory.</li><li><em>State persistence</em>: Generators maintain their internal state between successive calls. When a generator function is paused at a <code>yield</code> statement, the local variables’ values are preserved. This allows the generator to resume execution from where it left off, retaining the necessary information to generate the next value.</li><li><em>Infinite sequences</em>: Generators can be used to represent infinite sequences since they generate values on-the-fly.</li><li><em>Function-like behavior</em>: Generators are defined using the <code>def</code> keyword like regular functions, and they can have parameters, return values, and other function features. However, they differ in their execution behavior, as they can be paused and resumed.</li></ol><blockquote><p>When the generator function finishes executing (no more <code>yield</code> statements or returns), the generator object raises a <code>StopIteration</code> exception.</p><ul><li><p><code>yield from</code> is a syntactic sugar that allows delegation of generator execution within a generator function. It provides a concise way to call a sub-generator from a parent generator and directly pass the values yielded by the sub-generator to the parent generator.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sub_generator</span>():</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parent_generator</span>():</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;START&#x27;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> sub_generator()</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;END&#x27;</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> parent_generator():</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></li><li><p><code>yield</code> and <code>send</code> are used together to allow the generator function to receive values during each iteration and send values back into the generator function for processing.</p><p>Here is an example of how <code>yield</code> and <code>send</code> are used:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generator_function</span>():</span><br><span class="line">    result = <span class="keyword">yield</span>  <span class="comment"># First call, receives a value sent by send()</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;gen&#x27;</span>, result)</span><br><span class="line">        result = <span class="keyword">yield</span> result</span><br><span class="line">gen = generator_function()</span><br><span class="line"><span class="comment"># Start the generator</span></span><br><span class="line"><span class="built_in">next</span>(gen)<span class="comment"># or gen.send(None)</span></span><br><span class="line">output = gen.send(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;out&#x27;</span>, output)</span><br><span class="line">output = gen.send(<span class="string">&quot;World&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;out&#x27;</span>, output)</span><br><span class="line"><span class="comment"># print result:</span></span><br><span class="line"><span class="comment"># gen Hello</span></span><br><span class="line"><span class="comment"># out Hello</span></span><br><span class="line"><span class="comment"># gen World</span></span><br><span class="line"><span class="comment"># out World</span></span><br></pre></td></tr></table></figure></li><li><p><code>generator.throw(AnyException)</code> allows generator to throw an Exception, and <code>generator.close()</code> can stop the generator.</p></li></ul></blockquote><h4 id="Coroutine"><a href="#Coroutine" class="headerlink" title="Coroutine"></a>Coroutine</h4><p><strong>Coroutines</strong> are implemented using generator functions and the <code>yield</code> statement. The principle of coroutines is as follows:</p><ol><li><em>Coroutine Function Definition</em>: Define a generator function as a coroutine function. This function can use the <code>yield</code> statement to specify suspension points, where it pauses execution and returns a value to the caller.</li><li><em>Coroutine Initialization</em>: Create a coroutine object by calling the coroutine function.</li><li><em>Coroutine Iteration</em>: Use the <code>next()</code> function or the <code>.send()</code> method of the coroutine object to iterate and execute the coroutine. When the coroutine encounters a <code>yield</code> statement, it pauses execution and returns the result to the caller.</li><li><em>Coroutine Resumption</em>: When the caller sends a value to the coroutine (using the <code>.send()</code> method), the coroutine resumes execution from the last paused position and uses the sent value as the result of the <code>yield</code> expression.</li><li><em>Coroutine Termination</em>: When the coroutine reaches the end of the function or encounters a <code>StopIteration</code> exception, the coroutine terminates. Further calls to the <code>.send()</code> method on the coroutine object will raise a <code>StopIteration</code> exception.</li></ol><blockquote><p>Coroutines allow achieving concurrent execution without the need for multiple threads or processes. Coroutines can switch between different execution paths, enabling efficient asynchronous programming. Coroutines can also delegate to other coroutines using the <code>yield from</code> statement, enabling more complex cooperation and task decomposition.</p><p><strong>Python provides the <code>asyncio</code> module to support coroutine programming, where the <code>async</code> and <code>await</code> keywords offer a more concise syntax for defining and managing coroutines. With <code>asyncio</code>, it becomes easy to write asynchronous programs and handle tasks like I&#x2F;O operations, network communication, and more.</strong></p><p>It’s important to note that coroutines run in a single thread, so their performance may not be as good as multi-threading or multiprocessing when it comes to CPU-bound tasks. <strong>However, in I&#x2F;O-bound tasks, coroutines shine because they can effectively utilize the waiting time for I&#x2F;O to execute other tasks.</strong></p></blockquote><h4 id="Async-x2F-Await"><a href="#Async-x2F-Await" class="headerlink" title="Async&#x2F;Await"></a>Async&#x2F;Await</h4><ol><li><p><strong><code>async def</code></strong> is a keyword combination used in Python to <strong>define asynchronous functions</strong>. An <strong>asynchronous function</strong> is a special type of function <strong>that can contain <code>await</code> expressions</strong>, <strong>which suspend the execution of the function and wait for the completion of asynchronous operations</strong>.</p><p>Here is a example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define an asynchronous function</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">async_func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)  <span class="comment"># Suspend function execution using await, waiting for the completion of an asynchronous operation</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;End&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the asynchronous function in an event loop</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">await</span> async_func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create an event loop and run the main function</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(main())</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure></li><li><p><strong><code>await</code></strong> is a keyword used to suspend the execution of an asynchronous function and wait for the completion of an asynchronous operation. <strong><code>await</code> can only be used within an asynchronous context and is typically used in conjunction with <code>async def</code>.</strong></p><p>The general usage of <code>await</code> is as follows:</p><ul><li><p>Use <code>await</code> within an asynchronous function or coroutine to suspend its execution and wait for the completion of an asynchronous operation. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">async_func</span>():</span><br><span class="line">    result = <span class="keyword">await</span> async_operation()  <span class="comment"># 等待 async_operation() 异步操作的完成</span></span><br><span class="line">    <span class="comment"># 继续异步操作，使用异步操作的结果 result</span></span><br></pre></td></tr></table></figure><blockquote><p> <em><strong>Note that <code>await</code> can only be used within asynchronous functions or coroutines. It is not valid to use <code>await</code> in synchronous code.</strong></em></p></blockquote></li><li><p>Typically, <code>await</code> is followed by an awaitable object, such as an asynchronous function, coroutine, asynchronous iterator, etc. These awaitable objects must implement specific protocols, which include methods like <code>__await__()</code> or <code>__aiter__()</code>. The <code>await</code> expression invokes these methods to obtain an iterator or a context manager from the awaitable object and waits for its completion.</p><p>Here are some common awaitable objects:</p><ul><li><em>Asynchronous functions or coroutines</em>: Use <code>await</code> to wait for the execution of an asynchronous function or coroutine to complete.</li><li>Asynchronous generators: Use <code>await</code> to iterate over asynchronous generators and wait for each generated value.</li><li><em>Asynchronous iterators</em>: Use <code>await</code> to iterate over asynchronous iterators and wait for each iteration value.</li><li><em>Asynchronous context managers</em>: Use <code>await</code> to enter and exit the context of an asynchronous context manager.</li></ul><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">async_func</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> async_context_manager() <span class="keyword">as</span> cm:</span><br><span class="line">        <span class="keyword">await</span> cm.do_something()  <span class="comment"># Wait for the completion of the asynchronous context manager</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">for</span> item <span class="keyword">in</span> async_iterator():</span><br><span class="line">        <span class="keyword">await</span> process_item(item)  <span class="comment"># Wait for the completion of each item generated by the asynchronous iterator</span></span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;GIL-Global-Interpreter-Lock&quot;&gt;&lt;a href=&quot;#GIL-Global-Interpreter-Lock&quot; class=&quot;headerlink&quot; title=&quot;GIL (Global Interpreter Lock)&quot;&gt;&lt;/a&gt;GIL</summary>
      
    
    
    
    <category term="languages" scheme="https://stu-yue.github.io/categories/languages/"/>
    
    <category term="python" scheme="https://stu-yue.github.io/categories/languages/python/"/>
    
    
    <category term="python" scheme="https://stu-yue.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Memo | Optimization Algorithm in Machine Learning</title>
    <link href="https://stu-yue.github.io/jottings/mathematics/memo_optimization_alg/"/>
    <id>https://stu-yue.github.io/jottings/mathematics/memo_optimization_alg/</id>
    <published>2023-08-05T14:56:53.000Z</published>
    <updated>2023-08-27T07:48:39.542Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Reproduced in <a href="https://zhuanlan.zhihu.com/p/42689565">The Summary of Optimization Algorithm in ML</a></p></blockquote><p>For machine learning algorithms with diverse forms and characteristics, we have various optimization algorithms suitable for optimizing their objective functions. Apart from a few problems that can be solved using <strong>Brute Force Search</strong> to obtain the optimal solution, we can categorize the optimization algorithms used in machine learning into two types: </p><ul><li><strong>Analytical Solutions</strong>: <em><strong>These algorithms aim to find the optimal solution to the objective function by solving mathematical equations or performing algebraic manipulations. They often involve setting derivatives or gradients to zero and solving the resulting equations</strong>.</em> Analytical solutions are typically used for linear regression, logistic regression, and certain types of optimization problems with closed-form solutions.</li><li><strong>Numerical Optimization</strong>: <em><strong>These algorithms iteratively search for the optimal solution by evaluating the objective function at different points in the search space. They do not rely on explicit mathematical equations or derivatives</strong></em>. Numerical optimization methods include gradient-based algorithms like gradient descent and its variants, Newton’s method, stochastic gradient descent, and quasi-Newton methods. <ul><li><strong>Global Optimization Methods:</strong> <ul><li><strong>Heuristic Algorithm, Simulated Annealing, Particle Swarm Optimization</strong>, etc.</li></ul></li><li><strong>Local Optimization Methods:</strong> <ul><li><strong>Gradient Based:</strong> <ul><li><strong>First Order Derivative:</strong> <ul><li><strong>Gradient Descent:</strong></li></ul></li><li><strong>Second Order Derivative:</strong> <ul><li><strong>Newton Method:</strong></li></ul></li></ul></li><li><strong>Divide and Conquer:</strong> <ul><li><strong>Coordinate Descent:</strong> </li><li><strong>SMO Algorithm:</strong> </li><li><strong>Staged Optimization:</strong></li></ul></li><li><strong>Dynamic Programming:</strong></li></ul></li></ul></li></ul><p>The following picture illustrates the organization of this memorandum: </p><img src="./memo_optimization_alg/overview.png" style="zoom:100%"><img src="./overview.png" style="zoom:100%">]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Reproduced in &lt;a href=&quot;https://zhuanlan.zhihu.com/p/42689565&quot;&gt;The Summary of Optimization Algorithm in ML&lt;/a&gt;&lt;/p&gt;
&lt;/blockquo</summary>
      
    
    
    
    <category term="mathematics" scheme="https://stu-yue.github.io/categories/mathematics/"/>
    
    
    <category term="optimization" scheme="https://stu-yue.github.io/tags/optimization/"/>
    
    <category term="ml" scheme="https://stu-yue.github.io/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>Memo | Exploring Linux Files and Directories</title>
    <link href="https://stu-yue.github.io/jottings/languages/shell/memo_exploring_os/"/>
    <id>https://stu-yue.github.io/jottings/languages/shell/memo_exploring_os/</id>
    <published>2023-08-05T02:56:53.000Z</published>
    <updated>2023-09-08T14:17:30.961Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s start by learning some commands that are helpful for researching Linux systems.</p><ul><li><p><code>type</code>: To explain how to interpret a command name.</p></li><li><p><code>which</code>: To show which executable program will be executed.</p></li><li><p><code>man</code>: To show command manual.</p></li><li><p><code>apropos</code>: To display a list of appropriate commands.</p></li><li><p><code>info</code>: To display the command info.</p></li><li><p><code>alias</code>: To create an alias for the command</p><ul><li><code>unalias</code>: To cancel a alias for the command.</li></ul></li><li><p><code>ls</code>: To list the files and directories in the current directory.</p><ul><li><code>-a</code>, <code>-d</code>, <code>-h</code>, <code>-r/--reverse</code>, <code>-l</code>, <code>-S[sort by size]</code>, <code>-t[sort by modification time]</code></li></ul></li><li><p><code>file</code>: To determine the file type.</p><ul><li><code>file filename</code> is OK.</li></ul></li><li><p><code>less</code>: To browse the content of a file,  specifically, less is an improved version of <code>more</code>.</p><ul><li><p><code>less filename</code> is OK.</p><table><thead><tr><th align="left">Commands</th><th>Behavior</th></tr></thead><tbody><tr><td align="left">Page UP or b</td><td>Backward one window</td></tr><tr><td align="left">Page Down or space</td><td>Forward one window</td></tr><tr><td align="left">UP Arrow</td><td>Backward one line</td></tr><tr><td align="left">Down Arrow</td><td>Forward one line</td></tr><tr><td align="left">[N]G</td><td>Go to last line in file (or N lines)</td></tr><tr><td align="left">[N]g</td><td>Go to first line in file (or N lines)</td></tr><tr><td align="left">&#x2F;characters</td><td>Search forward for matching line</td></tr><tr><td align="left">n</td><td>Repeat previous search</td></tr><tr><td align="left">h</td><td>Display help.</td></tr></tbody></table></li></ul></li><li><p><code>cp</code>： </p><table><thead><tr><th>Options</th><th>Implication</th></tr></thead><tbody><tr><td>-a, –archive</td><td>Copy files and directories, along with their attributes, including ownership and permissions</td></tr><tr><td>-i, –interactive</td><td>Prompt the user for confirmation before overwriting an existing file (default disable)</td></tr><tr><td>-r, –recursive</td><td></td></tr><tr><td>-u, –update</td><td>Update the content not already present in the original</td></tr><tr><td>-v, –verbose</td><td>Display detailed command operation information</td></tr></tbody></table></li><li><p><code>mv</code>:</p><table><thead><tr><th>Options</th><th>Implication</th></tr></thead><tbody><tr><td>-i, –interactive</td><td>Prompt the user for confirmation before overwriting an existing file (default disable)</td></tr><tr><td>-u, –update</td><td>Update the content not already present in the original</td></tr><tr><td>-v, –verbose</td><td>Display detailed command operation information</td></tr></tbody></table></li><li><p><code>rm</code>:</p><table><thead><tr><th>Options</th><th>Implication</th></tr></thead><tbody><tr><td>-f, –force</td><td>Directly delete the file even if its attributes are read-only, without requiring individual confirmation</td></tr><tr><td>-i, –interactive</td><td>Prompt the user for confirmation before overwriting an existing file (default disable)</td></tr><tr><td>-r, –recursive</td><td></td></tr><tr><td>-v, –verbose</td><td>Display detailed command operation information</td></tr></tbody></table></li><li><p><code>ln</code>:</p><p><code>ln file hard_link</code> creates a hard link, and <code>ln -s item soft_link</code> creates a soft link.</p><ul><li><p><strong>Hard Links:</strong></p><ul><li>A hard link is a direct reference to the same physical location of a file on the storage device.</li><li>It creates an additional entry in the file system that points to the same <strong>inode</strong> (data structure representing a file) as the original file.</li><li>Changes made to either the original file or the hard link are reflected in both, as they refer to the same underlying data.</li><li>Hard links cannot reference directories or files on different file systems or partitions.</li></ul></li><li><p><strong>Soft Links:</strong></p><ul><li>A symbolic link is a special file that contains a path pointing to another file or directory.</li><li>It acts as a pointer or shortcut to the target file or directory.</li><li>Symbolic links are independent files and have their own <strong>inodes</strong>.</li><li>Modifying the original file or symbolic link does not affect each other, as they are separate entities.</li><li>Symbolic links can reference directories or files on different file systems or partitions.</li></ul><blockquote><p><strong>Soft links can be created to a non-existent filename (of course, if you use <code>vi</code> on this soft link file, Linux will automatically create a new file named “filename”). Hard links cannot be created in such cases since the file must already exist, and the inode must exist as well.</strong></p><p><strong>Using <code>ls -li</code> can view the inodes of the files.</strong> <strong><code>drwxrwxr-x 2 </code>‘s 2</strong> is the number of hard links to a file. Besides, the usual number of inodes for a directory is 2 (include parent directory and itself <code>.</code>)</p></blockquote></li></ul></li><li><p><code>tar</code>: To create archive files (usually with the <code>.tar</code> extension) and <em>archive</em> files.</p><ul><li><p><em>create archive file</em>: <code>tar -cvf archive.tar file1 file2 directory/</code></p><ul><li><code>-c</code> (<strong>c</strong>reate archive file), <code>-v</code> (view details), <code>-f</code> (specify archive file)</li></ul></li><li><p><em>extract archive file</em>: <code>tar -xvf archive.tar</code></p><ul><li><code>-x</code> (extract the content of archive files)</li></ul></li><li><p><em>compress archive file</em>: <code>tar -czvf archive.tar.gz directory/</code></p><ul><li><code>-z</code> (use <code>gzip</code> to compress)</li></ul></li><li><p><em>decompress archive file</em>: <code>tar -xzvf archive.tar.gz</code>, <code>tar -xjvf archive.tar.bz2</code></p></li><li><p><em>list the content of archive files</em>: <code>tar -tvf archive.tar</code></p></li><li><p><code>tar -tf test.tar</code>: view package structure</p></li><li><p><code>tar -C dest_dir/ -x[z]vf test.tar[.gz] specified_dir_or_file...[path in -tf shows]</code>: unzip the specified file&#x2F;directory in the package;</p></li></ul><blockquote><p><code>unzip archive.zip -d dest_dir</code></p></blockquote></li></ul><p>Before starting using commands, let’s introduce <strong>wildcards</strong> that provide special characters to help you quickly specify a group of filenames.</p><table><thead><tr><th>Wildcard</th><th>Implication</th></tr></thead><tbody><tr><td>*</td><td>match any sequence of characters, including zero characters.</td></tr><tr><td>?</td><td>match any single character (excluding zero character)</td></tr><tr><td>[character]</td><td>match any single character within the specified character set</td></tr><tr><td>[!character]</td><td>match any single character without the specified character set</td></tr><tr><td>[[:class:]]</td><td>match any single character within the specified character class</td></tr></tbody></table><p>The following table lists the most commonly used character classes.</p><table><thead><tr><th>Character Class</th><th>Implication</th></tr></thead><tbody><tr><td>[:alnum:]</td><td>match any single letter or digit</td></tr><tr><td>[:alpha:]</td><td>match any single letter</td></tr><tr><td>[:digit:]</td><td>match any single digit</td></tr><tr><td>[:lower:]</td><td>match any single lower letter</td></tr><tr><td>[:upper:]</td><td>match any single upper letter</td></tr></tbody></table><p>There are some examples constructed with wildcard:</p><p><code>*</code>, <code>g*</code>, <code>b*.txt</code>, <code>Data???</code>, <code>[abc]*</code>, <code>BACKUP.[0-9][0-9][0-9]</code>, <code>[[:upper:]]</code>, <code>[![:digit:]]*</code>, <code>*[[:lower:]123]</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Let’s start by learning some commands that are helpful for researching Linux systems.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;type&lt;/code&gt;: To explain how t</summary>
      
    
    
    
    <category term="languages" scheme="https://stu-yue.github.io/categories/languages/"/>
    
    <category term="shell" scheme="https://stu-yue.github.io/categories/languages/shell/"/>
    
    
    <category term="shell" scheme="https://stu-yue.github.io/tags/shell/"/>
    
    <category term="linux" scheme="https://stu-yue.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Hot Points</title>
    <link href="https://stu-yue.github.io/jottings/tidbits/hot_points/"/>
    <id>https://stu-yue.github.io/jottings/tidbits/hot_points/</id>
    <published>2023-07-22T12:00:53.000Z</published>
    <updated>2023-09-23T04:05:12.231Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Generate random numbers by reading <strong>thermal noise</strong> on CPU pins.</p></li><li><p><strong>Hot Plug</strong>, refers to the operation of inserting&#x2F;removing a device while it is running. In contrast, <strong>Cold Plug</strong> means do above operation while the device is powered off.</p></li><li><p>Software version’s explanation:</p><table><thead><tr><th>Version</th><th>Description</th></tr></thead><tbody><tr><td>Snapshot</td><td>Development version</td></tr><tr><td>Alpha</td><td>Internal beta</td></tr><tr><td>Beta</td><td>Public beta</td></tr><tr><td>Pre (M)</td><td>Similar to Alpha, sometimes subdivided into M_(Milestone) version</td></tr><tr><td>RC(Release Candidate)</td><td>During Beta stage, new features will continue to be added, but once the RC version is reached, there will mainly be on debugging and issue resolution.</td></tr><tr><td>GA(General Availability)</td><td>Some software may be labeled as “stable” or “production”.</td></tr><tr><td>Release&#x2F;Stable</td><td></td></tr><tr><td>Current</td><td>The latest version, but no necessarily a stable one.</td></tr><tr><td>Eval</td><td>There may be a monthly or fixed time limit for usage.</td></tr></tbody></table></li><li><p><strong>Declarative Programming</strong> expresses the logic of a computation without describing its control flow.</p><blockquote><p>Many languages that apply this style attempt to minimize or eliminate side effects by describing <em>what</em> the  program must accomplish in terms of the problem domain (what to do), rather than specifying all the details of <em>how</em> the program should achieve the result (how to do).</p></blockquote><p><strong>Imperative Programming</strong> uses statements that change a program’s state. </p><blockquote><p>Imperative Programming focuses on describing <em>how</em> a program operates step by step, rather than on high-level descriptions of its expected results.</p></blockquote></li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Generate random numbers by reading &lt;strong&gt;thermal noise&lt;/strong&gt; on CPU pins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hot Plug&lt;/strong&gt;, refer</summary>
      
    
    
    
    <category term="tidbits" scheme="https://stu-yue.github.io/categories/tidbits/"/>
    
    
    <category term="points" scheme="https://stu-yue.github.io/tags/points/"/>
    
  </entry>
  
  <entry>
    <title>Summa | The Majority of Memory Categories</title>
    <link href="https://stu-yue.github.io/jottings/architecture/summa_memory_categories/"/>
    <id>https://stu-yue.github.io/jottings/architecture/summa_memory_categories/</id>
    <published>2023-07-20T08:41:53.000Z</published>
    <updated>2023-07-22T11:56:11.198Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Reproduced in <a href="https://embeddedinventor.com/8-types-of-memory-every-embedded-engineer-should-know-about/">8 types of memory every embedded engineer should know about!</a></p></blockquote><p>The majority of memory can be categorized as shown in the following picture:</p><img src="./summa_memory_categories/category.png" style="zoom:80%"><img src="./category.png" style="zoom:80%"><blockquote><p>The real difference between primary and secondary memories is the <strong>speed&#x2F;volatility(without power) tradeoffs</strong>.</p></blockquote><h3 id="Primary-Memory"><a href="#Primary-Memory" class="headerlink" title="Primary Memory"></a>Primary Memory</h3><p>Primary memory is <strong>very fast, but it cannot hold data without power</strong>. The popular name for Primary Memory is <strong>RAM</strong>, which has 2 most important types namely <strong>SRAM</strong> and <strong>DRAM</strong>.</p><blockquote><p>Bistable Circuit usually consists of <strong>two complementary transistors or other switching devices</strong>, <strong>one used to hold the circuit in one stable state and the other to switch the circuit to another stable state</strong>. The switch between these two states is triggered by the input signal. <strong>Bistable Circuit can store data. Latches and registers are bistable devices.</strong></p><img src="./summa_memory_categories/bistable.png" style="zoom:50%"><img src="./bistable.png" style="zoom:50%"></blockquote><ul><li><strong>SRAM is the use of bistable flip-flop to save information, as long as the power is not lost, the information is not lost.</strong></li><li><strong>DRAM uses capacitors to store charge to store information, so data stored in the DRAM must be constantly refreshed every few milliseconds or else it will end up being erased</strong>. The action is taken care of by a special device named <strong>DRAM controllers</strong>.</li></ul><img src="./summa_memory_categories/ram_arch.png" style="zoom:60%"><img src="./ram_arch.png" style="zoom:60%"><table><thead><tr><th></th><th>SRAM</th><th>DRAM</th></tr></thead><tbody><tr><td>Construction Principle</td><td>It uses a cross-coupled flip flop configuration of transistors</td><td>It uses a capacitor transistor circuit to hold data</td></tr><tr><td>Cost</td><td>Relatively more expensive, it needs more transistors per bit of data it can store</td><td>Relatively less expensive, as fewer transistors per bit of storage are needed</td></tr><tr><td>Speed</td><td>Faster</td><td>Slower (capacitor charge and discharge time)</td></tr><tr><td>Volatility</td><td>As long as power is ON, it can store data since it uses no capacitors</td><td>Data needs to be continuously refreshed (usually in the order of 4 times a second) since the capacitors leak power.</td></tr><tr><td>Power consumption</td><td>Less</td><td>More</td></tr><tr><td>Density</td><td>Less dense (6 transistors, more area needed)</td><td>Highly dense (1 pass transistor and 1 capacitor, easy to integrate)</td></tr><tr><td>Addition components needed</td><td>None</td><td>DRAM controllers are needed to make it work like an SRAM. This controller offloads the data refreshing duties of a microprocessor and hence a DRAM coupled with a DRAM controller behaves more like an SRAM from the processor’s perspective.</td></tr><tr><td>Application areas</td><td>Cache memory (Ls2)</td><td>Main memory (memory chips)</td></tr></tbody></table><blockquote><p>NVRAM or Non Volatile Random Access Memory, is a special type of RAM that can store data permanently. It’s basically an SRAM with a power supply</p></blockquote><h3 id="Secondary-Memory"><a href="#Secondary-Memory" class="headerlink" title="Secondary Memory"></a>Secondary Memory</h3><h4 id="ROM"><a href="#ROM" class="headerlink" title="ROM"></a>ROM</h4><ul><li><p><strong>MASK ROM</strong>: The main characteristic of this device is the fact that the data is written onto the device as it gets manufactured and it is impossible to change them. This is done by designing the chip in such a manner so that it already contains the necessary data.</p><p>In order to mass production, the manufacturer makes a ROM or EPROM with original data as a sample in advance, and then mass-produces the same ROM as the sample. This kind of ROM sample for mass production is the MASK ROM, and the data burned in the MASK ROM can never be modified.</p></li><li><p><strong>PROM</strong> stands for Programmable Read-Only Memory. These are <strong>programmable chips for user needs</strong>, the main characteristic being it can <strong>only be programmed one time</strong>. That is it cannot be erased or reprogrammed. They are also known as <strong>One Time Programmable</strong> devices or <strong>OTP</strong>s for short. </p></li><li><p><strong>EPROM</strong> stands for Erasable Programmable Read-Only Memory. These chips usually <strong>have a small glass window on top and if you expose them to direct sunlight(UV, ultraviolet) that will erase the chip’s data.</strong> They can then be programmed again with fresh data.</p><ul><li>Cons: Inconvenient, instability, can not be exposed to the light source otherwise easy to lead to data loss</li></ul></li><li><p><strong>EEPROM</strong> stands for Electrically Erasable Programmable Read-Only Memory. These chips can be <strong>erased and reprogrammed using electricity</strong> as opposed to exposing them to UV rays as EPROMs. EEPROM can be erased and reprogrammed on a computer or dedicated device,  generally plugging and playing.</p></li></ul><h4 id="FLASH-MEMORY"><a href="#FLASH-MEMORY" class="headerlink" title="FLASH MEMORY"></a>FLASH MEMORY</h4><ol><li><p>The basic storage unit of flash memory is the transistor-based storage unit, and each storage unit can store 1 bit of data. Storage units are usually organized into a block, and each block contains thousands of storage units.</p></li><li><p>Each storage unit has a floating gate to store electric charges. The state of a storage unit can be determined as “1” or “0” based on the amount of electric charges stored in the floating gate. The state of a storage unit is changed by injecting or extracting electrons into&#x2F;from the floating gate to modify the amount of electric charges stored in it.</p></li><li><p>Flash memory uses <strong>Hot carrier injection(HCI)</strong> mechanism to write data. In simple terms, a certain storage unit is grounded at the <strong>source</strong>, a positive voltage is applied to its <strong>control gate</strong>, and a positive voltage is applied to the <strong>drain</strong> to generate a strong electric field between the source and drain. This will give electrons enough energy (<strong>hot carriers</strong>) to be attracted by the voltage at the <strong>control gate</strong> and injected into the <strong>floating gate</strong>. Afterwards, as the <strong>insulating material</strong> on the top and bottom of the <strong>floating gate</strong> is <strong>not conductive</strong>, these <strong>electrons are trapped in the floating gate and cannot escape</strong>. (Every time <strong>electrons enter and exit the surrounding silicon dioxide on the floating gate</strong>, <strong>it will cause aging</strong><a href="https://www.cnblogs.com/ricklz/p/16415763.html">[1]</a>)</p><img src="./summa_memory_categories/flash_particle.png" style="zoom:50%"><img src="./flash_particle.png" style="zoom:50%"></li><li><p>To save  cost, flash memory adopts page programming mode. Each page contains a certain number of storage units, and all units in a page are written at the same time.</p></li></ol><ul><li>Cons: Flash memory has the issue of wear-out (<strong>write&#x2F;erase endurance limits</strong>), which is usually mitigated by disabling bad blocks, and then reducing usable capacity.</li></ul><blockquote><ul><li><strong>USB flash disk, namely “U disk”</strong>, is a new generation of storage devices <strong>based on USB interface and flash memory chip as storage medium</strong>. It is basically composed of five parts: <strong>USB port, main control chip, flash memory chip, PCB backboard, outer package</strong>.</li><li><strong>USB flash drives, SD cards, and SSDs are a type of storage device that uses flash memory chips as the storage medium</strong>. They are primarily composed of a controller (main control) and flash memory chips, and have no mechanical structure, consisting purely of electronic circuitry. <strong>They are resistant to physical shocks and impacts.</strong> The controller manages data storage and other functions. Even after power loss, data remains stored in the memory cells.</li><li>USB flash drives generally have a cache on them to prevent the loss of data copies from being quickly plugged in&#x2F;out.</li></ul></blockquote><h4 id="OTHER"><a href="#OTHER" class="headerlink" title="OTHER"></a>OTHER</h4><ul><li>Hard Disk Drive: The disk reads data according to the polarity of the magnetic particle and writes data according to the polarity of the magnetic head.</li><li>Compact Disk: CD-ROM can only be read and not written to because after being burned once, each unit has a fixed different reflectivity (the reading probe emits laser and the reflected laser is read as “1”, or non-reflected laser is read as “0”).</li><li>Floppy Disk: A type of magnetic disk, less capacity, slower speed.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Reproduced in &lt;a href=&quot;https://embeddedinventor.com/8-types-of-memory-every-embedded-engineer-should-know-about/&quot;&gt;8 types of</summary>
      
    
    
    
    <category term="architecture" scheme="https://stu-yue.github.io/categories/architecture/"/>
    
    
    <category term="memory" scheme="https://stu-yue.github.io/tags/memory/"/>
    
  </entry>
  
  <entry>
    <title>Welcome to Yue&#39;s Jotter</title>
    <link href="https://stu-yue.github.io/jottings/intro/"/>
    <id>https://stu-yue.github.io/jottings/intro/</id>
    <published>2023-07-13T08:23:57.000Z</published>
    <updated>2023-07-19T06:33:54.671Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Summa | Firmware and Drivers</title>
    <link href="https://stu-yue.github.io/jottings/architecture/summa_firmware_and_drivers/"/>
    <id>https://stu-yue.github.io/jottings/architecture/summa_firmware_and_drivers/</id>
    <published>2023-07-13T06:21:53.000Z</published>
    <updated>2023-07-20T05:15:59.324Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Reproduced in <a href="https://embeddedinventor.com/firmware-vs-device-drivers-explained-with-examples/">Firmware vs Device Drivers: Explained with Examples!</a></p></blockquote><h3 id="Firmware-vs-Device-Drivers"><a href="#Firmware-vs-Device-Drivers" class="headerlink" title="Firmware vs. Device Drivers"></a>Firmware vs. Device Drivers</h3><table><thead><tr><th>Firmware</th><th>Device Drivers</th></tr></thead><tbody><tr><td>Firmware is a class of software that is written for specific custom hardware.</td><td>Device drivers are software that is needed to make a given hardware accessory</td></tr><tr><td>Firmware lives and runs directly on the hardware.</td><td>Device drivers live on hard-disk and run on the CPU.</td></tr><tr><td>Firmware is independent of an operating system, i.e.,  you can run any operating system on top of a  given motherboard’s firmware.</td><td>Device drivers are highly dependent on the operating system on which they are used. For example, for the same hardware device, you need different device drivers for using that on Windows vs Linux.</td></tr><tr><td>Firmware cannot be updated through an operating system, we need to go into the BIOS&#x2F;UEFI to update the device drivers.</td><td>Drivers can be updated from within the operating system.</td></tr><tr><td>Firmware engineers do not need any knowledge of operating systems. But they need core knowledge on processors and the latest RAMs, PCIe standards, and so on to write firmware that complies with the latest standards</td><td>Device driver engineers need knowledge about the specific device that they are using, the communication standard the device uses to talk to the computer (like Bluetooth, USB, etc), and the operating system the device driver is written for.</td></tr><tr><td>Firmware is written by motherboard manufacturers</td><td>Drivers are written by engineers in companies that produce hardware accessories that connect to your computer</td></tr><tr><td>Examples include the BIOS&#x2F;UEFI interface that comes with the computer’s motherboard</td><td>Examples include special software you install to handle the extra buttons on your mouse, software that comes with any non-standard hardware like special game controllers, also the software that helps us use all the standard hardware like USB storage devices, keyboards, mice, headphones, etc.</td></tr></tbody></table><p>Layers of software on a typical computer are shown in the following figure:</p><img src="./summa_firmware_and_drivers/layer.png" style="zoom:80%" ><img src="./layer.png" style="zoom:80%" ><blockquote><h4 id="Firmware"><a href="#Firmware" class="headerlink" title="Firmware"></a>Firmware</h4><p>​        <strong>Firmware is a computer program that is written to work directly on specific custom hardware and it lives in non-volatile memory such as a flash chip and it is executed directly from it. The job of the firmware is to make the hardware accessible to the operating system.</strong> Firmware can be thought of as the glasses through which the operating system can see the actual hardware!</p><p>​           Originally Firmware is written on Masked ROMs, which is a special type of memory that can be programmed&#x2F;written-data-to only once. The products were then shipped with these unchangeable programs called firmware and they run for ages till the device goes out of use.</p><p>​         The first replacement of Masked ROMs came in the form of EPROM which can be erased by exposure to UV light and then reprogrammed as required. Then came EEPROMs which used electricity to change the contents. Nowadays the Masked ROMs have been replaced with Flash memory, which is cheaper and serves the purpose. </p><h4 id="Device-Drivers"><a href="#Device-Drivers" class="headerlink" title="Device Drivers"></a>Device Drivers</h4><p><strong>Device drivers are programs that can control a given hardware and provide a software interface to it. Other programs like Operating Systems can interact with the hardware through this software interface without needing to know the actual underlying implementation of the software interface.</strong></p></blockquote><p>The relation graph between firmware and drivers is also shown below:</p><img src="./summa_firmware_and_drivers/relation_graph.png" style="zoom:80%" ><img src="./relation_graph.png" style="zoom:80%" ><p>​        Generally speaking, drivers and firmware together form the module that operates hardware. <strong>But why not make the firmware perfect so that it doesn’t require driver support?</strong> </p><p>​         The answer to the above question is, there are different operating systems which have completely different ways of operating hardware. So, <strong>on the one hand, hardware manufactures need to write firmware to make their hardware easier to use with software,</strong> but <strong>on the other hand, they cannot make the firmware too rigid in order to be compatible with various operating systems. They must leave enough room for software to freely operate</strong> —— and <strong>that’s where drivers come in.</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Reproduced in &lt;a href=&quot;https://embeddedinventor.com/firmware-vs-device-drivers-explained-with-examples/&quot;&gt;Firmware vs Device </summary>
      
    
    
    
    <category term="architecture" scheme="https://stu-yue.github.io/categories/architecture/"/>
    
    
    <category term="firmware" scheme="https://stu-yue.github.io/tags/firmware/"/>
    
    <category term="driver" scheme="https://stu-yue.github.io/tags/driver/"/>
    
  </entry>
  
</feed>
