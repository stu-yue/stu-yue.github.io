<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yue&#39;s Jotter</title>
  
  
  <link href="https://stu-yue.github.io/atom.xml" rel="self"/>
  
  <link href="https://stu-yue.github.io/"/>
  <updated>2023-11-08T07:12:14.475Z</updated>
  <id>https://stu-yue.github.io/</id>
  
  <author>
    <name>stu-yue</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://stu-yue.github.io/jottings/languages/shell/shell/"/>
    <id>https://stu-yue.github.io/jottings/languages/shell/shell/</id>
    <published>2023-11-08T06:48:23.989Z</published>
    <updated>2023-11-08T07:12:14.475Z</updated>
    
    <content type="html"><![CDATA[<p>交互式登录 shell 和非登录 shell 是两种在 Linux 系统中使用 Shell 时的不同环境。它们有以下区别：</p><p>交互式登录 shell：</p><ul><li>当用户通过登录界面（例如终端登录、SSH 远程登录）成功登录到系统时，系统会为用户启动一个交互式登录 shell。</li><li>交互式登录 shell 会读取系统的登录配置文件（如 <code>/etc/profile</code> 和 <code>~/.bash_profile</code>）来执行初始化操作，设置环境变量、加载别名和执行其他登录时需要的配置。</li><li>它还会执行 <code>~/.bashrc</code> 文件，以便加载用户自定义的 Shell 配置。</li><li>用户在交互式登录 shell 中执行的命令会被记录到历史记录文件（如 <code>~/.bash_history</code>）中。</li></ul><p>非登录 shell：</p><ul><li>当用户已经登录到系统后，在当前 shell 中打开一个新的终端或运行脚本时，会启动一个非登录 shell。</li><li>非登录 shell 不会读取登录配置文件（如 <code>/etc/profile</code> 和 <code>~/.bash_profile</code>），而是读取 <code>~/.bashrc</code> 文件进行初始化。</li><li>它不会执行登录时需要的配置，只会加载用户自定义的 Shell 配置。</li><li>用户在非登录 shell 中执行的命令不会被记录到历史记录文件中，除非用户在 <code>~/.bashrc</code> 中显式地指定。</li></ul><p>大部分Linux发行版用<code>~/.profile</code>替换<code>~/.bash_profile</code>，<code>~/.profile</code>被所有shell读取，<code>~\.bash_profile</code>仅被Bash读取；</p><p><code>.profile</code>在登录shell启动时，被读取和执行；<code>.bashrc</code>在非登录shell启动时执行；</p><blockquote><p><code>profile</code>中会读取各自级别的<code>bashrc</code>；</p><p>Shell启动时读取配置文件的顺序：</p><ol><li><code>/etc/profile</code></li><li><code>/etc/profile.d/*.sh</code></li><li><code>/etc/bash.bashrc</code></li><li><code>~/.profile</code> 或 <code>~/.bash_login</code> 或 <code>~/.bash_profile</code>：个性化环境变量设置</li><li><code>~/.bashrc</code> ：别名、函数和其他个性化设置；</li></ol></blockquote><table><thead><tr><th align="center"></th><th align="center">系统级</th><th align="center">用户级</th></tr></thead><tbody><tr><td align="center">登录shell</td><td align="center">&#x2F;etc&#x2F;profile</td><td align="center">~&#x2F;.profile  | ~&#x2F;.bash_profile</td></tr><tr><td align="center">非登录shell</td><td align="center">&#x2F;etc&#x2F;bash.bashrc</td><td align="center">~&#x2F;.bashrc</td></tr></tbody></table><h5 id="登录式-shell-和非登录式-shell-的运行形式如下："><a href="#登录式-shell-和非登录式-shell-的运行形式如下：" class="headerlink" title="登录式 shell 和非登录式 shell 的运行形式如下："></a>登录式 shell 和非登录式 shell 的运行形式如下：</h5><ul><li>登录式 shell：<ul><li>正常通过某终端登录的 shell。</li><li>su - username。</li><li>su -l username。</li></ul></li><li>非登录式 shell：<ul><li>su username。</li><li><strong>图形终端</strong>下打开的命令窗口。</li><li>自动执行的 shell 脚本。</li></ul></li></ul><p>**<code>echo $0</code>**：<code>-bash</code>登录shell；<code>bash</code>非登录；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;交互式登录 shell 和非登录 shell 是两种在 Linux 系统中使用 Shell 时的不同环境。它们有以下区别：&lt;/p&gt;
&lt;p&gt;交互式登录 shell：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当用户通过登录界面（例如终端登录、SSH 远程登录）成功登录到系统时，系统会为用户启</summary>
      
    
    
    
    <category term="languages" scheme="https://stu-yue.github.io/categories/languages/"/>
    
    <category term="shell" scheme="https://stu-yue.github.io/categories/languages/shell/"/>
    
    
  </entry>
  
  <entry>
    <title>Memo | Law of Large Number</title>
    <link href="https://stu-yue.github.io/jottings/mathematics/memo_law_of_probability/"/>
    <id>https://stu-yue.github.io/jottings/mathematics/memo_law_of_probability/</id>
    <published>2023-10-21T05:56:53.000Z</published>
    <updated>2023-10-23T10:26:48.546Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-Law-of-Large-Number"><a href="#1-Law-of-Large-Number" class="headerlink" title="1 Law of Large Number"></a>1 Law of Large Number</h4><h5 id="1-1-Folk-Understanding"><a href="#1-1-Folk-Understanding" class="headerlink" title="1.1 Folk Understanding"></a>1.1 Folk Understanding</h5><p>In simple terms, the large numbers theorem refers to that a random event may or may not occur  in a single experiment, but in a large number of repeated experiments, it often shows obvious regularity, that is, the frequency of the random event will converge to a constant value, which is the probability of the event.</p><p>Another way to express it is that when the sample data is infinite, the sample mean tends to population mean.</p><p>Because in real life, we can not run  an infinite number of experiments, and it is difficult to estimate the parameters of the population.</p><blockquote><p><strong>The law of large numbers connects mean values, which belong to mathematical statistics, with expectations, which belong to probability theory.</strong></p></blockquote><h5 id="1-2-Convergence-in-Probability"><a href="#1-2-Convergence-in-Probability" class="headerlink" title="1.2 Convergence in Probability"></a>1.2 Convergence in Probability</h5><ul><li>Weak Law: convergence in probability</li><li>Strong Law: almost sure convergence (outlier can be negligible in measure)</li></ul><h5 id="1-3-Bernoulli’s-Law"><a href="#1-3-Bernoulli’s-Law" class="headerlink" title="1.3 Bernoulli’s Law"></a>1.3 Bernoulli’s Law</h5><p>From the perspective of defining probability, <strong>reveals the relationship between probability and frequency</strong>.<br>$$<br>\lim\limits_{n\rightarrow \infin} P{ |\frac{f_A}{n} - p| &lt; \epsilon } &#x3D; 1<br>$$</p><h5 id="1-4-Khinchin’s-Law"><a href="#1-4-Khinchin’s-Law" class="headerlink" title="1.4 Khinchin’s Law"></a>1.4 Khinchin’s Law</h5><p>Priori Condition: Independent Identically Distributed,     $\lim\limits_{n\rightarrow \infin} P{ |\frac{1}{n}\sum\limits_{i&#x3D;1}^nX_i - \frac{1}{n}\sum\limits_{i&#x3D;1}^{n}E(X_i)| &lt; \epsilon } &#x3D; 1$</p><h5 id="1-5-Chebyshev’s-Law"><a href="#1-5-Chebyshev’s-Law" class="headerlink" title="1.5 Chebyshev’s Law"></a>1.5 Chebyshev’s Law</h5><p>Priori Condition: Independent Distributed,     $\lim\limits_{n\rightarrow \infin} P{ |\frac{1}{n}\sum\limits_{i&#x3D;1}^nX_i - \frac{1}{n}\sum\limits_{i&#x3D;1}^{n}\mu_i| &lt; \epsilon } &#x3D; 1$</p><h4 id="2-Heavy-tailed-Distribution"><a href="#2-Heavy-tailed-Distribution" class="headerlink" title="2 Heavy-tailed Distribution"></a>2 Heavy-tailed Distribution</h4><img src="./memo_law_of_probability/types.png" style="zoom:50%"><img src="./types.png" style="zoom:50%"><blockquote><p>Ref: <a href="https://www.jianshu.com/p/b7e06c4839b2">1</a>,  <a href="">2</a></p></blockquote><ul><li><p>Pareto  Distribution:<br>$$<br>P(X&gt;x) &#x3D; \left{<br>\begin{align}<br>(\frac{x_{min}}{x})^\alpha,&amp;\quad x\ge x_{min} \<br>1, &amp;\quad x&lt;x_{min}<br>\end{align}<br>\right.<br>$$</p><p>$$<br>f(x) &#x3D; \left{<br>\begin{align}<br>\frac{1}{x^\alpha}\cdot\frac{\alpha x_{min}^\alpha}{x},&amp;\quad x\ge x_{min} \<br>0, &amp;\quad x&lt;x_{min}<br>\end{align}<br>\right.<br>$$</p><p><strong>Pareto Principle</strong>: states that for many outcomes, roughly 80% of consequences com from 20% of causes (the “vital few”). Other names —— 80&#x2F;20 rule, the <strong>law of the vital few</strong> (states the imbalance phenomenon);</p><p><strong>Mathematically</strong>, the 80&#x2F;20 rule is roughly described by a <strong>power law distribution</strong> (also known as a Pareto distribution) for a particular set of parameters.</p><ul><li><p>Zipf Distribution:<br>$$<br>f(x) &#x3D; \frac{1}{x^\alpha\sum_{i&#x3D;1}^{n}(1&#x2F;i)^\alpha}, \  x &#x3D; 1,2,\cdots,n<br>$$<br><strong>Zipf’s law</strong> states that the value of the <em>n</em>th entry is <strong>inversely proportional</strong> to <em>n</em>, when a list of measured values is sorted in decreasing order.</p><ul><li>Zeta Distribution:  when $n\rightarrow \infty$,   $\text{Zipf}(\alpha, n)\rightarrow\text{Zeta}(\alpha)$ ; Zeta is regraded as a type of pareto distribution in the discrete distribution.<br>$$<br>f(x) &#x3D; \frac{1}{x^\alpha\sum_{i&#x3D;1}^{\infty}(1&#x2F;i)^\alpha}, \  x &#x3D; 1,2,\cdots,n,\text{and}\ \alpha &gt; 1<br>$$</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-Law-of-Large-Number&quot;&gt;&lt;a href=&quot;#1-Law-of-Large-Number&quot; class=&quot;headerlink&quot; title=&quot;1 Law of Large Number&quot;&gt;&lt;/a&gt;1 Law of Large Number&lt;/</summary>
      
    
    
    
    <category term="mathematics" scheme="https://stu-yue.github.io/categories/mathematics/"/>
    
    
    <category term="math" scheme="https://stu-yue.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>Memo | CTC Introduction</title>
    <link href="https://stu-yue.github.io/jottings/statistics_ml/memo_ctc/"/>
    <id>https://stu-yue.github.io/jottings/statistics_ml/memo_ctc/</id>
    <published>2023-10-17T07:56:53.000Z</published>
    <updated>2023-10-17T15:49:36.026Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-Problem-Description"><a href="#1-Problem-Description" class="headerlink" title="1 Problem Description"></a>1 Problem Description</h4><p>In seq2seq structure, given input sequence $X&#x3D;[x_1,\cdots,x_T]$ with corresponding label $Y &#x3D; [y_1,\cdots,y_N]$, such as speech recognition. Our job is to find a map, and this algorithm for classifying time series data is called <strong>Temporal Classification</strong>.</p><p>Compared with traditional classification, temporal classification has the following difficulties:</p><ol><li>The lengths of $X$ and $Y$ are variable.</li><li>The lengths of $X$ and $Y$ are not equal.</li><li>For an end-to-end model,  we don’t want manual design the alignment between $X$ and $Y$.</li></ol><p>The <strong>CTC</strong> provides the solution, that for a given input sequence $X$, CTC gives the output distribution of all possible $Y$. Based on this distribution, we can output the most likely outcome or give the probability of a certain output.</p><ul><li><p><strong>Loss Function</strong>: Given the input sequence $X$, we want to <strong>maximize the posterior probability</strong> $P(Y|X)$ of $Y$, and $P(Y|X)$ should be derivable so that we can perform the <strong>gradient-descent algorithm</strong>;</p></li><li><p><strong>Test</strong>: Given a trained model and input sequence $X$, we want to output $Y$ with the highest probability:<br>$$<br>Y^* &#x3D; \arg\max_YP(Y|X)<br>$$<br>Of course, when testing, we want Y to be searched as soon as possible (greedy, beam, prefix-beam, LM).</p></li></ul><h4 id="CTC-Procedure"><a href="#CTC-Procedure" class="headerlink" title="CTC Procedure"></a>CTC Procedure</h4><blockquote><p>REF: <a href="https://zhuanlan.zhihu.com/p/42719047">https://zhuanlan.zhihu.com/p/42719047</a></p></blockquote><h4 id="CTC-Traits"><a href="#CTC-Traits" class="headerlink" title="CTC Traits"></a>CTC Traits</h4><ol><li><p><strong>Conditional independence</strong>: A very unreasonable assumption of the CTC is its assumption that each time slice is independent of each other, which is a very bad assumption. </p><p>In OCR or speech recognition, there is some semantic information between each time slice, so the effect should be improved if the <strong>language model can be added</strong> to the CTC.</p></li><li><p><strong>Monotonic alignment</strong>: Another constraint of CTC is the monotonic alignment between input $X$ and output $Y$, which holds true in OCR and speech recognition. However, in some scenarios, such as machine translation, this constraint is not valid.</p></li><li><p><strong>Many-to-one mapping</strong>: Another constraint of CTC is that the length of the input sequence $X$ is greater than the length of the label data $Y$, but for scenarios where the length of $Y$ is greater than the length of $X$, <strong>CTC is invalid</strong>.</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-Problem-Description&quot;&gt;&lt;a href=&quot;#1-Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;1 Problem Description&quot;&gt;&lt;/a&gt;1 Problem Description&lt;/</summary>
      
    
    
    
    <category term="statistics_ml" scheme="https://stu-yue.github.io/categories/statistics-ml/"/>
    
    
    <category term="ml" scheme="https://stu-yue.github.io/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>Memo | LM and Word Representation</title>
    <link href="https://stu-yue.github.io/jottings/statistics_ml/memo_lm_and_word_vector/"/>
    <id>https://stu-yue.github.io/jottings/statistics_ml/memo_lm_and_word_vector/</id>
    <published>2023-10-17T07:56:53.000Z</published>
    <updated>2023-10-22T10:59:24.709Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Language-Model"><a href="#Language-Model" class="headerlink" title="Language Model"></a>Language Model</h4><ul><li><p>语言模型是衡量一句话出现在自然语言中的概率的模型；</p></li><li><p>数学形式上，给定一句话 $s &#x3D; { w_1,\cdots,w_n }$，它对应的概率为：<br>$$<br>\begin{align*}<br>P(s) &amp;&#x3D; P(w_1,\cdots,w_n) \<br>&amp;&#x3D; P(w_1)\times P(w_2|w_1) \times \cdots \times P(w_n|w_1,\cdots,w_{n-1})\<br>&amp;&#x3D; \prod\limits_{i&#x3D;1}^{n}P(w_i|w_1,\cdots,w_{i-1})<br>\end{align*}<br>$$</p></li><li><p>语言模型的核心在于根据前文预测下一个词出现的概率；</p><p>$P(w_i|w_1,\cdots,w_{i-1}),\  w_i \in V,\ V&#x3D;{ w_1,\cdots,w_{|V|} }$</p></li><li><p>马尔可夫假设 (Markov Assumption)：当前词出现的概率只和它前面的k个词相关；<br>$$<br>\begin{align*}<br>P(w_i | w_1,\cdots,w_{i-1}) &amp;&#x3D; P(w_i | w_{i-k},\cdots,w_{i-1}) \<br>&amp; &#x3D; P(w_i) \qquad\qquad\qquad \rightarrow\quad\text{k&#x3D;0, Unigram Model} \<br>&amp; &#x3D; P(w_i | w_{i-1}) \qquad\qquad \rightarrow\quad\text{k&#x3D;1, Bigram Model} \<br>&amp; &#x3D; P(w_i | w_{i-2}, w_{i-1})\qquad\rightarrow\quad\text{k&#x3D;2, Trigram Model}\<br>\end{align*}<br>$$</p></li><li><p>用频率估计概率（大数定理——伯努利）<br>$$<br>\begin{align*}<br>P(w_i | w_1,\cdots,w_{i-1}) &amp;&#x3D; P(w_i | w_{i-k},\cdots,w_{i-1}) \<br>&amp; &#x3D; \frac{P(w_{i-k},\cdots,w_{i-1},w_i)}{P(w_{i-k},\cdots,w_{i-1})} \<br>&amp; \approx \frac{\text{count}(w_{i-k},\cdots,w_{i-1},w_i)}{\text{count}(w_{i-k},\cdots,w_{i-1})} \<br>\end{align*}<br>$$</p></li><li><p>Zipf Law, also known as the rank-size rule or Zipf distribution, is an empirical observation about the frequency distribution of words or other items in a given corpus of natural language. It states that <strong>the frequency of any word is inversely proportional to its rank in the frequency table</strong>.</p><ul><li><p>隐藏信息，排位靠后的词的频率非常低，甚至未出现在语料中；</p></li><li><p>数据稀疏，对于未出现在语料中的词或n-gram，无法估计其概率；</p><ul><li>平滑技术 （拉普拉斯平滑、古德-图灵平滑、插值平滑、Katz平滑）</li></ul><p>$$<br>\begin{align*}<br>P(w_i | w_1,\cdots,w_{i-1}) &amp;&#x3D; P(w_i | w_{i-k},\cdots,w_{i-1}) \<br>&amp; &#x3D; \frac{P(w_{i-k},\cdots,w_{i-1},w_i)}{P(w_{i-k},\cdots,w_{i-1})} \<br>&amp; \approx \frac{\text{count}(w_{i-k},\cdots,w_{i-1},w_i)+1}{\text{count}(w_{i-k},\cdots,w_{i-1})+|V|} \<br>\end{align*}<br>$$</p><ul><li><p>回退策略<br>$$<br>\begin{align*}<br>P(w_i | w_1,\cdots,w_{i-1}) &amp;&#x3D; P(w_i | w_{i-k},\cdots,w_{i-1}) \<br>&amp; &#x3D; \frac{P(w_{i-k},\cdots,w_{i-1},w_i)}{P(w_{i-k},\cdots,w_{i-1})} \<br>&amp; \approx \frac{\text{count}(w_{i-k},\cdots,w_{i-1},w_i)}{\text{count}(w_{i-k},\cdots,w_{i-1})}\qquad \rightarrow\quad\text{students opened their} \<br>&amp; \approx \frac{\text{count}(w_{i-k+j},\cdots,w_{i-1},w_i)}{\text{count}(w_{i-k+j},\cdots,w_{i-1})}\quad \rightarrow\quad\text{opened their} \<br>\end{align*}<br>$$</p></li><li><p>参数规模问题：随着k的增大，参数数目呈指数增长，无法存储；</p><p>k&#x3D;1，参数量&#x3D;$|V|^2$；k&#x3D;2，参数量&#x3D;$|V|^3$；k&#x3D;n-1，参数量&#x3D;$|V|^n$；</p></li></ul></li></ul></li><li><p>困惑度（Perplexity）</p><ul><li><p>用来衡量一个概率分布或概率模型预测样本的好坏程度；</p></li><li><p>可以用来比较两个概率模型，低困惑度的概率模型能更好地预测样本；<br>$$<br>\text{Perplexity}(s) &#x3D; 2^{H(s)} &#x3D; \sqrt[n]{1&#x2F;P(w_1,\cdots,w_n)}<br>$$</p></li></ul></li></ul><h4 id="Word-Representation"><a href="#Word-Representation" class="headerlink" title="Word Representation"></a>Word Representation</h4><ul><li><p>词库：</p><ul><li>WordNet：一个包含同义词（ synonym ）和上位词（ hypernyms ）的知识库；</li><li>词库的问题：<ul><li>缺少差异性 (proficient也被视为good的同义词)，不够精确；</li><li>缺少新词，无法及时更新</li><li>主观性，人工标注；</li></ul></li></ul></li><li><p>离散词表示：</p><ul><li><p>One-hot表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">单词表示motel = [0 0 0 0 0 1 0]</span><br><span class="line">   hotel = [0 0 0 1 0 0 0]</span><br><span class="line">文本表示The students opened their books</span><br><span class="line">   [0 0 1 1 0 0 1 0]</span><br><span class="line">        ⬆</span><br><span class="line">   次数、频率、逆文档频率、TF-IDF、...</span><br></pre></td></tr></table></figure></li><li><p>词袋模型（Bag of Word）：词袋模型用于文本表示，如果每个词为One-hot表示，那么把每个词的One-hot向量相加，得到的向量就是该文本基于BOW得到的表示；</p></li><li><p>词频（Term Frequency，TF）：在文档中出现频率越高的词对当前文档可能越重要；<br>$$<br>f_{ij} &#x3D; \frac{\text{count}(\text{term}\ i)\text{in doc} \ j}{\text{count}(\text{all term})\text{in doc} \ j}, \<br>tf_{ij} &#x3D; \frac{f_{ij}}{\max_k(f_{kj})}<br>$$</p></li><li><p>逆文档频率（Inverse Document Frequency，IDF）：在很多文档中都出现的词可能不重要（如虚词）；<br>$$<br>df_i &#x3D; \text{doc frequency of term}\ i &#x3D; \text{numbers of doc containing term} \ i, \<br>idf_i &#x3D; \log_2\frac{N}{df_i} \ \text{（N为文档总数）}<br>$$</p></li><li><p>TF-IDF：综合一个词在当前文档中的频率和所有文档中出现的次数来度量这个词对当前文档重要性；<br>$$<br>tf_{ij}-idf_i &#x3D; tf_{ij}*idf_i &#x3D; tf_{ij}*\log_2\frac{N}{df_i}<br>$$</p></li><li><p>N-gram：N元组提取局部的上下文你信息；</p></li><li><p>离散词表示问题：语义鸿沟、维度爆炸；</p></li></ul></li><li><p>分布式词表示（词嵌入）</p><ul><li><p>用一个低维稠密的向量表示单词的整体含义；</p></li><li><p>核心思想：一个词的含义能被该词所在的上下文反映；</p></li><li><p>Co-occurrence：</p><ul><li>基于窗口的共现矩阵：<ul><li>统计窗口内单词之间的共现信息；</li><li>类似于word2vec；</li><li>能够捕获一些句法和语义信息（局部信息）；</li></ul></li><li>基于文档的共现矩阵：<ul><li>统计文档和单词之间的共现信息；</li><li>Latent Semantics Analysis (LSA)；</li><li>能够捕获话题信息（全局信息）；</li></ul></li></ul></li><li><p>Word2vec[Mikolov et al. 2013] 是一套学习词向量的算法框架</p><ul><li>算法思想：大量的自然语言文本（训练语料）</li><li>为词表中的每个词随机初始化一个向量表示</li><li>遍历文本中的每个单词 $c$，其上下文单词为 $o$</li><li>使用单词 $c$ 的上下文 $o$ 预测单词 $c$ 的概率分布（核心思想）</li><li>更新词向量的表示使得单词 $c$ 的预测概率最大化</li><li>连续词袋模型（CBOW，Continuous Bag of Words）</li><li>目标：通过局部语言模型的优化，获得词向量</li><li>优化目标：固定上下文词向量表示，计算中心词的似然函数，最大化其似然（负对数）</li><li>计算优化：负采样（Negative Sampling）<ul><li>为避免softmax计算整个庞大的词表，通常采用负采样的方法，将多分类问题转换为二分类问题；大大减少了训练时间和计算成本；</li></ul></li><li>Skip-gram：中心词 $c$ 预测上下文 $o$；</li></ul><table><thead><tr><th></th><th>优点</th><th>缺点</th><th>代表方法</th></tr></thead><tbody><tr><td>共现矩阵法</td><td>速度快，有效利用统计数据</td><td>过分依赖单词共现性和数据量</td><td>LSA, HAL</td></tr><tr><td>直接学习法</td><td>能够捕获语法和语义信息</td><td>速度和数据规模相关，未有效利用统计数据</td><td>Skip-gram,  CBOW</td></tr></tbody></table><p>基于计数的和基于预测的都探究了语料库的潜在共现统计</p></li><li><p>GloVe：集两家之长</p><ul><li><p>共现概率矩阵$X_{ij}$；</p></li><li><p>单词 $w_i$，$w_j$ 的词向量 $v_i$，$v_j$；</p></li><li><p>以学习的方式，用词向量之间的语义关系来拟合共现概率矩阵；<br>$$<br>J &#x3D; \sum\limits_{i,j&#x3D;1}^{|V|}f(X_{ij})(v_i^Tv_j+b_i+b_j-\log X_{ij})^2 \<br>v_i^Tv_j \quad\rightarrow\quad\text{局部信息} \<br>\log X_{ij}\quad\rightarrow\quad\text{全局统计信息} \<br>$$</p></li><li><p>训练快，适应于大规模数据，在小规模数据上性能优秀；</p></li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Language-Model&quot;&gt;&lt;a href=&quot;#Language-Model&quot; class=&quot;headerlink&quot; title=&quot;Language Model&quot;&gt;&lt;/a&gt;Language Model&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;语言模型是衡量一句话出现在</summary>
      
    
    
    
    <category term="statistics_ml" scheme="https://stu-yue.github.io/categories/statistics-ml/"/>
    
    
    <category term="ml" scheme="https://stu-yue.github.io/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>Memo | ISA and Micro-architecture</title>
    <link href="https://stu-yue.github.io/jottings/architecture/memo_isa_and_micro_architecture/"/>
    <id>https://stu-yue.github.io/jottings/architecture/memo_isa_and_micro_architecture/</id>
    <published>2023-10-14T10:21:53.000Z</published>
    <updated>2023-10-15T06:29:11.484Z</updated>
    
    <content type="html"><![CDATA[<h4 id="What-is-CPU"><a href="#What-is-CPU" class="headerlink" title="What is CPU?"></a>What is CPU?</h4><ol><li><p>CPUs are a general purpose, flexible architecture that take in a stream of instructions from all types of workloads, and compute or process information based on those instructions.</p><p>Simply put, CPUs do what we tell them or program them to do.</p></li><li><p>This ability to continue shrinking transistors is based on a famous law&#x2F;observation that we in the industry refer to as Moore’s Law, that is, we can double the number of transistors per unit area about every two year.</p></li><li><p><strong>Bug Aside</strong>: Operators traced an error on the computers to a moth trapped in a relay, recoining the term “bug”.</p></li><li><p><strong>CPU Architecture</strong>: </p></li><li><p>**ENIAC: ** In early period, computer <strong>programs are hardware-based</strong>. Computers with <strong>data in memory and programs embedded in the hardware</strong> are computationally inefficient and less flexible.</p></li><li><p><strong>Von Neumann Machine</strong>: Programs are encoded as data and stored in memory (Principle of Stored Program Control).</p><img src="./memo_isa_and_micro_architecture/von_neumann.png" style="zoom:30%"><img src="./von_neumann.png" style="zoom:30%"></li><li><p><strong>Harvard Machine</strong>: A memory structure that separates program instruction storage from data storage. <strong>CPU can access instructions and read&#x2F;write data at the same time</strong>.</p><ol><li>Use two independent memory modules to store instructions and data respectively, and each storage module does not allow instructions and data to coexist;</li><li>Use two independent buses as a dedicated communication path between the CPU and each memory, and these two buses are unrelated.</li></ol><img src="./memo_isa_and_micro_architecture/harvard.png" style="zoom:40%"><img src="./harvard.png" style="zoom:40%"></li></ol><blockquote><p>In fact, the vast majority of modern computers use “Modified Harvard Architecture,” where instructions and data share the same address space, but the cache is separate.</p><p>As it stands, von Neumann for large-scale processing, and Harvard for small-scale processing.</p></blockquote><ol start="5"><li><p>CPU workflow architecture:</p><img src="./memo_isa_and_micro_architecture/arch.png" style="zoom:50%"><img src="./arch.png" style="zoom:30%"></li></ol><h4 id="Instruction-Set-Architecture"><a href="#Instruction-Set-Architecture" class="headerlink" title="Instruction Set Architecture"></a>Instruction Set Architecture</h4><p>The ISA is the dictionary of instructions, data types, and the formats that the CPU adhering to that ISA must execute. The <strong>ISA</strong> is used as a design spec (<strong>specification</strong>) that tells the engineer what operations it needs to execute. Because of this layer of abstraction, the <strong>instructions</strong> in the ISA are <strong>implementation independent</strong>. <strong>Micro-architecture is the concrete implementation of ISA in the hardware</strong>.</p><img src="./memo_isa_and_micro_architecture/isa.png" style="zoom:50%"><img src="./isa.png" style="zoom:50%"><p><strong>CISC (Complex Instruction Set Computers)</strong>: </p><ul><li>Early CPUs all used CISC, which was designed to perform the required computational tasks <strong>with minimal</strong> machine language <strong>instructions</strong>.</li><li>In order to achieve complex operations, <strong>microprocessors</strong> provide programmers with functions similar to various registers and machine instructions, but also through <strong>microprograms</strong> stored in read-only memory (<strong>ROM</strong>) to achieve its <strong>extremely powerful functions</strong>.</li></ul><p><strong>RISC (Reduced Instruction Set Computers)</strong>: </p><ul><li>In CISC, many complex instructions require extremely complex operations, and most of these instructions are direct copies of some high-level language, so the universality is poor. Because of the secondary microcode execution, it also slows down the operation of simple instruction systems that are frequently invoked.</li></ul><blockquote><p><strong>Summary:</strong> </p><p>The <strong>complex</strong> instructions are converted into a <strong>microprogram</strong>, which is stored in the <strong>microservice</strong> memory when the CPU is manufactured. A microprogram contains several <strong>microinstructions</strong> (also known as <strong>microcode</strong>), and when <strong>executing complex instructions</strong>, it is actually <strong>executing a microprogram</strong>. </p><p>This also brings a difference between the two instruction sets, <strong>the execution of microprograms cannot be interrupted,</strong> while <strong>RISC instructions can be interrupted between each other</strong>, so in theory <strong>RISC can respond faster to interrupts</strong>.</p><ul><li><p>Command  Capability:</p><ul><li>The instruction capability of CISC is strong, but the usage rate of most instructions is low, which increases the complexity of CPU. Instructions are <strong>variable length format</strong>, which must be divided into different length instructions, so more processing work is needed when executing a single instruction.</li><li>Most RISC instructions are single-cycle instructions, <strong>the length of instructions is fixed</strong>, and the CPU is fast and stable when executing instructions.</li></ul></li><li><p>Addressing Mode:</p><ul><li>CISC supports a variety of addressing methods. RISC supports few addressing methods.</li></ul></li><li><p>Implementation Mode:</p><ul><li>CISC is implemented through microprogrammed control technology (microcode).</li><li>RISC adds a general register, hard-wired logic control is the main, suitable for pipelined execution. RISC can optimize compilation and effectively support high-level languages.</li></ul></li><li><p>R&amp;D Cycle:</p><ul><li>CISC has a long development cycle.</li><li>RISC hardware is simple, so its manufacturing process is simple and low cost.</li></ul></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;What-is-CPU&quot;&gt;&lt;a href=&quot;#What-is-CPU&quot; class=&quot;headerlink&quot; title=&quot;What is CPU?&quot;&gt;&lt;/a&gt;What is CPU?&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;CPUs are a general purp</summary>
      
    
    
    
    <category term="architecture" scheme="https://stu-yue.github.io/categories/architecture/"/>
    
    
    <category term="instruction set arch" scheme="https://stu-yue.github.io/tags/instruction-set-arch/"/>
    
  </entry>
  
  <entry>
    <title>Memo | Tmux</title>
    <link href="https://stu-yue.github.io/jottings/languages/shell/memo_tmux/"/>
    <id>https://stu-yue.github.io/jottings/languages/shell/memo_tmux/</id>
    <published>2023-10-04T07:56:53.000Z</published>
    <updated>2024-01-06T15:10:12.480Z</updated>
    
    <content type="html"><![CDATA[<h4 id="What-is-tmux"><a href="#What-is-tmux" class="headerlink" title="What is tmux?"></a>What is tmux?</h4><ul><li><p>A typical use of the command line is to open a terminal window (session), whose important feature is that window is connected to the process started in it (window closed, session ends, vice versa).</p></li><li><p><strong>Tmux,</strong> Terminal multiplexer, is  the session and window “unbind” tool. It allows:</p><ul><li>simultaneous access to multiple sessions in a single window. (useful for running multiple terminal simultaneously)</li><li>a new window to  access an existing session;</li><li>each session having multiple connection window (multiple people sharing sessions in real time)</li><li>arbitrary vertical and horizontal splitting of windows;</li></ul></li><li><p>Basic conception:</p><ul><li>session:</li></ul><img src="./memo_tmux/tmux_basic.png" style="zoom:50%"><img src="./tmux_basic.png" style="zoom:50%"></li></ul><h4 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h4><ul><li><p>Start —<code>tmux</code>, Quit—<code>exit/Ctrl-d</code>, Prefix Key—<code>Ctrl+b</code>;</p></li><li><p>A status bar is located at the bottom:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[name/id] [list of ]</span><br><span class="line">[0] 0:bash  1:test3* 2:test4-         &quot;VM-16-17-ubuntu&quot; 15:28 04-Oct-23</span><br></pre></td></tr></table></figure></li></ul><h4 id="Session-Management"><a href="#Session-Management" class="headerlink" title="Session Management"></a>Session Management</h4><ul><li><p>New a session: <code>tmux new -s &lt;session-name&gt;</code>; </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new -s sessionName -n window</span><br></pre></td></tr></table></figure></li><li><p>Split sessions: <code>tmux detach/Ctrl+b d</code>, after the command is executed, the current Tmux window exits, but the session and the processes inside it still run in the background;</p></li><li><p>View all current tmux sessions: <code>tmux ls</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0: 1 windows (created Tue Sep 19 20:42:24 2023)</span><br><span class="line">1: 1 windows (created Tue Oct  3 19:57:48 2023)</span><br><span class="line">test2: 1 windows (created Wed Oct  4 14:49:04 2023) (attached)</span><br></pre></td></tr></table></figure></li><li><p>Attach a session: <code>tmux attach -t id/&lt;session-name&gt;</code>;</p></li><li><p>Kill a session: <code>tmux kill-session -t id/&lt;session-name&gt;</code>;</p></li><li><p>Switch a session: <code>tmux switch -t id/&lt;session-name&gt;</code>;</p></li><li><p>Rename a session: <code>tmux rename-session -t id/&lt;session-name&gt; &lt;new-name&gt;</code>;</p></li><li><p>Shortcuts: </p><ul><li><code>Ctrl+b</code>d: Split current session;</li><li><strong><code>Ctrl+b s</code> list all session;</strong></li><li><strong><code>Ctrl+b w</code> list all windows;</strong></li><li><code>Ctrl+b $</code>: rename current session;</li></ul></li><li><p>Simple workflow of tmux:</p><ol><li>new a session: <code>tmux new -s my_session</code>;</li><li>run program in tmux window;</li><li><code>Ctrl+b d</code> splits the session;</li><li>Attach the last session <code>tmux attach-session -t my_session</code>;</li></ol></li></ul><h4 id="Pane-Operation"><a href="#Pane-Operation" class="headerlink" title="Pane Operation"></a>Pane Operation</h4><p>Tmux can split the window into panes, which can execute different commands.</p><ul><li><p><code>tmux splilt-window</code> splits into vertical layout;</p></li><li><p><code>tmux split-window -h</code> splits into horizontal layout;</p></li><li><p><code>tmux select-pane</code> moves the cursor in different panes:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">光标切换到上方窗格</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tmux select-pane -U</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">光标切换到下方窗格</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tmux select-pane -D</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">光标切换到左边窗格</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tmux select-pane -L</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">光标切换到右边窗格</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tmux select-pane -R</span></span><br></pre></td></tr></table></figure></li><li><p><code>tmux swap-pane</code> exchanges the positions of panes:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当前窗格上移</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tmux swap-pane -U</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当前窗格下移</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tmux swap-pane -D</span></span><br></pre></td></tr></table></figure></li><li><p>Shortcuts in pane operations:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+b %：划分左右两个窗格。</span><br><span class="line">Ctrl+b &quot;：划分上下两个窗格。</span><br><span class="line">Ctrl+b &lt;arrow key&gt;：光标切换到其他窗格。&lt;arrow key&gt;是指向要切换到的窗格的方向键，比如切换到下方窗格，就按方向键↓。</span><br><span class="line">Ctrl+b ;：光标切换到上一个窗格。</span><br><span class="line">Ctrl+b o：光标切换到下一个窗格。</span><br><span class="line">Ctrl+b &#123;：当前窗格与上一个窗格交换位置。</span><br><span class="line">Ctrl+b &#125;：当前窗格与下一个窗格交换位置。</span><br><span class="line">Ctrl+b Ctrl+o：所有窗格向前移动一个位置，第一个窗格变成最后一个窗格。</span><br><span class="line">Ctrl+b Alt+o：所有窗格向后移动一个位置，最后一个窗格变成第一个窗格。</span><br><span class="line">Ctrl+b x：关闭当前窗格。</span><br><span class="line">Ctrl+b !：将当前窗格拆分为一个独立窗口。</span><br><span class="line">Ctrl+b z：当前窗格全屏显示，再使用一次会变回原来大小。</span><br><span class="line">Ctrl+b Ctrl+&lt;arrow key&gt;：按箭头方向调整窗格大小。</span><br><span class="line">Ctrl+b q：显示窗格编号。</span><br></pre></td></tr></table></figure></li><li><p>Close window&#x2F;pane</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure></li></ul><h4 id="Window-Operation"><a href="#Window-Operation" class="headerlink" title="Window Operation"></a>Window Operation</h4><ul><li><p><code>tmux new-window -n &lt;window-name&gt;</code>: new a window;</p></li><li><p><code>tmux select-window -t &lt;window-number/name&gt;</code>: switch window</p></li><li><p><code>tmux rename-window</code></p></li><li><p>Shortcuts in window operation:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+b c：创建一个新窗口，状态栏会显示多个窗口的信息。</span><br><span class="line">Ctrl+b p：切换到上一个窗口（按照状态栏上的顺序）。</span><br><span class="line">Ctrl+b n：切换到下一个窗口。</span><br><span class="line">Ctrl+b &lt;number&gt;：切换到指定编号的窗口，其中的&lt;number&gt;是状态栏上的窗口编号。</span><br><span class="line">Ctrl+b w：从列表中选择窗口。</span><br><span class="line">Ctrl+b ,：窗口重命名。</span><br></pre></td></tr></table></figure></li></ul><h4 id="Other-Commands"><a href="#Other-Commands" class="headerlink" title="Other Commands"></a>Other Commands</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有快捷键，及其对应的 Tmux 命令</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tmux list-keys</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有 Tmux 命令及其参数</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tmux list-commands</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出当前所有 Tmux 会话的信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tmux info</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用快捷键</span></span><br><span class="line">Ctrl+b s列出所有sessions信息</span><br><span class="line">Ctrl+b w</span><br><span class="line">Ctrl+b o切换窗格</span><br><span class="line">Ctrl+b n切换窗口</span><br><span class="line">Ctrl+b d分离session</span><br><span class="line"></span><br><span class="line">tmux new [-t xx [-n xx]]</span><br><span class="line">tmux new-window</span><br><span class="line">tmux split-window [-h]</span><br><span class="line">tmux ls</span><br><span class="line">tmux attach -t xx</span><br><span class="line">tmux detach</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">打开鼠标模式</span><br><span class="line">tmux set mouse on</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载当前的 Tmux 配置</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tmux source-file ~/.tmux.conf</span></span><br><span class="line"></span><br><span class="line">ctrl+b, :  //按完前缀ctrl+B后，再按分号：进入命令行模式</span><br><span class="line">set -g mouse on //命令行中输入这句命令，回车就行了</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重命名</span></span><br><span class="line">tmux rename-session -t id &lt;new&gt;-t (target)</span><br><span class="line">tmux rename-window -t id &lt;new&gt;</span><br><span class="line"></span><br><span class="line">tmux resize-pane -U/D/L/R 10</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选中复制</span></span><br><span class="line">shift + 左键选中</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;What-is-tmux&quot;&gt;&lt;a href=&quot;#What-is-tmux&quot; class=&quot;headerlink&quot; title=&quot;What is tmux?&quot;&gt;&lt;/a&gt;What is tmux?&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A typical use of th</summary>
      
    
    
    
    <category term="languages" scheme="https://stu-yue.github.io/categories/languages/"/>
    
    <category term="shell" scheme="https://stu-yue.github.io/categories/languages/shell/"/>
    
    
    <category term="shell" scheme="https://stu-yue.github.io/tags/shell/"/>
    
    <category term="linux" scheme="https://stu-yue.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://stu-yue.github.io/jottings/tidbits/quantization/"/>
    <id>https://stu-yue.github.io/jottings/tidbits/quantization/</id>
    <published>2023-09-26T06:40:27.727Z</published>
    <updated>2023-10-08T10:50:28.480Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>在线量化：指量化感知训练(Quantization-Aware Training)，在网络模型训练阶段采用量化方案进行量化；</p><ol><li><p>量化感知训练本质上是一种伪量化的过程，它是在可识别的某些操作内嵌入伪量化节点（fake quantization op），并参与模型训练的前向推理过程模拟引入，但模型的反向传播过程依旧使用全精度浮点数进行；</p></li><li><p>伪量化节点，是指量化感知训练中插入的节点，用以寻找网络数据分布，并反馈损失精度：</p><ol><li>找到输入、权重等待量化数据的分布，找到待量化数据的最大和最小值；</li><li>模拟低比特量化带来的精度损失，把该损失作用到网络模型中，传递给损失函数，让优化器在训练过程中对该损失值进行优化， 尽可能减少由于伪量化操作而引起的精度下降；</li></ol></li><li><p>先饱和截断处理：$clamp(x,x_{min}, x_{max}) &#x3D; \min(\max(x,x_{min}), x_{max})$；</p></li><li><p>再Float-&gt;Int-&gt;Float：</p><img src="D:\Program Files\Typora\img\image-20230926154839682.png" alt="image-20230926154839682" style="zoom:50%;" /></li></ol></li><li><p>离线量化：指训练后量化(Post-Training Quantization)：</p><ol><li><p>动态离线量化(PTQ, Dynamic)：</p><p>动态离线量化仅将模型中特定算子的<strong>权重</strong>从FP32类型映射成 INT8&#x2F;16 类型，bias和激活函数 在推理过程中动态量化。但是对于不同的输入值来说，其缩放因子是<strong>动态计算</strong>的（“动态”的由来）。动态量化是几种量化方法中性能最差的。动态量化常用于非常大的模型。</p></li><li><p>静态离线量化(PTQ, Static)：</p><p>静态离线量化使用少量无标签校准数据，采用 KL 散度等方法计算量化比例因子。静态量化（Static quantization）与动态量化的区别在于其输入的缩放因子计算方法不同，静态量化的模型在使用前有“calibrate”的过程（校准缩放因子）：准备部分输入（对于图像分类模型就是准备一些图片，其他任务类似），使用静态量化后的模型进行预测，在此过程中量化模型的缩放因子会根据输入数据的分布进行调整。一旦校准完成后，权重和输入的缩放因子都固定（<strong>“静态”的由来</strong>）。静态量化的性能一般比动态量化好，常用于中等模型和大模型。因此实际中基本都是在用静态量化。</p><p>静态离线量化的目标是求取量化比例因子，主要通过对称量化、非对称量化方式来求，而找最大值或者阈值的方法又有MinMax、KLD、ADMM、EQ等方法。</p></li></ol></li></ol><img src="D:\Program Files\Typora\img\image-20230926153543814.png" alt="image-20230926153543814" style="zoom:67%;" /><ul><li>对称量化与非对称量化：对于weight权重的量化使用对称量化[-INT_MAX, INT_MAX]，对于activate激活的量化使用非对称量化[0, INT_MAX]；</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在线量化：指量化感知训练(Quantization-Aware Training)，在网络模型训练阶段采用量化方案进行量化；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;量化感知训练本质上是一种伪量化的过程，它是在可识别的某些操作内嵌入伪量化节点（fake quant</summary>
      
    
    
    
    <category term="tidbits" scheme="https://stu-yue.github.io/categories/tidbits/"/>
    
    
  </entry>
  
  <entry>
    <title>Memo | Package and Device</title>
    <link href="https://stu-yue.github.io/jottings/languages/shell/memo_package_device/"/>
    <id>https://stu-yue.github.io/jottings/languages/shell/memo_package_device/</id>
    <published>2023-09-19T14:56:53.000Z</published>
    <updated>2023-11-01T03:27:05.881Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h4><ul><li>Package System</li></ul><table><thead><tr><th>Package Management System</th><th>Linux Release Version</th></tr></thead><tbody><tr><td>Debian Style (.deb)</td><td>Debian, Ubuntu</td></tr><tr><td>Red Hat Style (.rpm)</td><td>Fedora, CentOS</td></tr></tbody></table><blockquote><p>A package file is a compressed collection of files that make up a software package and may contain a large number of programs and the data files that support those programs. </p><p><strong>Metadata for the packet</strong> is included, such as a text description of the package and its contents. </p><p>Other included are <strong>pre-installation and post-installation scripts</strong> (which perform configuration tasks before and after installation)</p></blockquote><ul><li>Upper Tools and Underlying Tools:</li></ul><table><thead><tr><th>Linux Release Version</th><th>Underlying Tool (install and delete packages)</th><th>Upper Tool (search for metadata and resolve dependencies)</th></tr></thead><tbody><tr><td>Debian-Style</td><td>dpkg</td><td>apt, aptitude</td></tr><tr><td>Fedora, CentOS</td><td>rpm</td><td>yum</td></tr></tbody></table><ul><li>Search for metadata in the resource repository</li></ul><table><thead><tr><th>Style</th><th>Command</th></tr></thead><tbody><tr><td>Debian</td><td>apt update; apt search search_string</td></tr><tr><td>Red Hat</td><td>yum search search_string (e.g. yum search emacs)</td></tr></tbody></table><ul><li>Install a package via resource repository</li></ul><table><thead><tr><th>Style</th><th>Command</th></tr></thead><tbody><tr><td>Debian</td><td>apt update; apt install package_name</td></tr><tr><td>Red Hat</td><td>yum install package_name</td></tr></tbody></table><ul><li>Install a package via raw package files</li></ul><table><thead><tr><th>Style</th><th>Command</th></tr></thead><tbody><tr><td>Debian</td><td>dpkg –install &#x2F; -i package_file</td></tr><tr><td>Red Hat</td><td>rpm -i package_file (rpm -i emacs-22.1-7.fc7-i386.rpm)</td></tr></tbody></table><blockquote><p>NOTE: Due to this command is executed by rpm, not analyzing dependencies for package_file, so if a dependency is missing, rpm will report error and exit.</p></blockquote><ul><li>Uninstall a package</li></ul><table><thead><tr><th>Style</th><th>Command</th></tr></thead><tbody><tr><td>Debian</td><td>apt remove package_name  &#x2F; dpkg -r package_name</td></tr><tr><td>Red Hat</td><td>yum erase package_name</td></tr></tbody></table><ul><li>Upgrade package via resource repository</li></ul><table><thead><tr><th>Style</th><th>Command</th></tr></thead><tbody><tr><td>Debian</td><td>apt update; apt upgrade</td></tr><tr><td>Red Hat</td><td>yum update</td></tr></tbody></table><ul><li>Upgrade package via package_file</li></ul><table><thead><tr><th>Style</th><th>Command</th></tr></thead><tbody><tr><td>Debian</td><td>dpkg –install package_file</td></tr><tr><td>Red Hat</td><td>rpm -U package_file</td></tr></tbody></table><ul><li>List all package installed</li></ul><table><thead><tr><th>Style</th><th>Command</th></tr></thead><tbody><tr><td>Debian</td><td>dpkg –list &#x2F; -l</td></tr><tr><td>Red Hat</td><td>rpm -qa</td></tr></tbody></table><ul><li>Determine whether a package is installed</li></ul><table><thead><tr><th>Style</th><th>Command</th></tr></thead><tbody><tr><td>Debian</td><td>dpkg –status package_name</td></tr><tr><td>Red Hat</td><td>rpm -q package_name</td></tr></tbody></table><ul><li>Show the info for the installed package</li></ul><table><thead><tr><th>Style</th><th>Command</th></tr></thead><tbody><tr><td>Debian</td><td>apt show package_name</td></tr><tr><td>Red Hat</td><td>yum info package_name</td></tr></tbody></table><blockquote><ul><li><code>apt</code> useful arguments:<ul><li><code>-y</code> : default set yes in interactive shell;</li><li><code>-f</code>: solve the package dependencies;</li></ul></li></ul></blockquote><h4 id="Device"><a href="#Device" class="headerlink" title="Device"></a>Device</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Package&quot;&gt;&lt;a href=&quot;#Package&quot; class=&quot;headerlink&quot; title=&quot;Package&quot;&gt;&lt;/a&gt;Package&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Package System&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;t</summary>
      
    
    
    
    <category term="languages" scheme="https://stu-yue.github.io/categories/languages/"/>
    
    <category term="shell" scheme="https://stu-yue.github.io/categories/languages/shell/"/>
    
    
    <category term="shell" scheme="https://stu-yue.github.io/tags/shell/"/>
    
    <category term="linux" scheme="https://stu-yue.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Summa |Networks Tidbits</title>
    <link href="https://stu-yue.github.io/jottings/networks/memo_network_tidbits/"/>
    <id>https://stu-yue.github.io/jottings/networks/memo_network_tidbits/</id>
    <published>2023-09-07T10:35:53.000Z</published>
    <updated>2023-09-08T14:19:04.994Z</updated>
    
    <content type="html"><![CDATA[<ol><li><strong>Tunneling</strong>: The basic principle is to create a virtual channel between the source and the target, through which the original packets is encapsulated in the packet of another protocol, and then transmitted between the source and the target. At the target end, the receiver unwarps the encapsulated packet, reverts it to the original packet, and gives it to the target application for processing. For example, <strong>VPN (Virtual Private Network), SSH Tunneling, GRE (Generic Routing Encapsulation, like IPv6 over IPv4)</strong>.</li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Tunneling&lt;/strong&gt;: The basic principle is to create a virtual channel between the source and the target, through which the</summary>
      
    
    
    
    <category term="networks" scheme="https://stu-yue.github.io/categories/networks/"/>
    
    
    <category term="networks" scheme="https://stu-yue.github.io/tags/networks/"/>
    
  </entry>
  
  <entry>
    <title>Memo | Olds and Ends</title>
    <link href="https://stu-yue.github.io/jottings/languages/shell/memo_others/"/>
    <id>https://stu-yue.github.io/jottings/languages/shell/memo_others/</id>
    <published>2023-09-06T07:56:53.000Z</published>
    <updated>2023-09-06T07:37:09.249Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Difference between <strong>sh</strong> and <strong>bash</strong>: <strong>sh</strong> is usually symbolic link for <strong>dash</strong>; <strong>dash</strong> is a more lightweight shell, POSIX, designed to replace <strong>sh</strong> and provide faster startup and executions speeds; <strong>bash</strong> is an extended version of <strong>sh</strong>, and most scripts that conform to <strong>sh</strong> syntax should work fine in <strong>bash</strong>; <strong>In a nutshell, sh is bash, which enables the POSIX standard</strong>.</p><blockquote><p>POSIX, Portable Operating System Interface of UNIX</p><p>In accordance with the POSIX specification, “When a line of code encounters an error, it does not continue to interpret subsequent lines.” However, in bash, even if an error occurs, it will continue to execute subsequent lines.</p></blockquote></li><li><p>To view cpu information: <code>lscpu</code>, or <code>cat /proc/cpuinfo</code>;</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Difference between &lt;strong&gt;sh&lt;/strong&gt; and &lt;strong&gt;bash&lt;/strong&gt;: &lt;strong&gt;sh&lt;/strong&gt; is usually symbolic link for &lt;strong&gt;dash&lt;</summary>
      
    
    
    
    <category term="languages" scheme="https://stu-yue.github.io/categories/languages/"/>
    
    <category term="shell" scheme="https://stu-yue.github.io/categories/languages/shell/"/>
    
    
    <category term="shell" scheme="https://stu-yue.github.io/tags/shell/"/>
    
    <category term="linux" scheme="https://stu-yue.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Memo | Permission, Progress and Shell Environment</title>
    <link href="https://stu-yue.github.io/jottings/languages/shell/memo_permission_progress_env/"/>
    <id>https://stu-yue.github.io/jottings/languages/shell/memo_permission_progress_env/</id>
    <published>2023-08-31T14:56:53.000Z</published>
    <updated>2023-09-09T14:48:36.012Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Permission"><a href="#Permission" class="headerlink" title="Permission"></a>Permission</h4><p>First of all, let’s take a quick look at the permissions-related commands.</p><ul><li><p><code>id</code>: To show the id number of the user.</p><ul><li><code>id username</code>:</li></ul></li><li><p><code>chmod</code>: To change the mode of files.</p><ul><li><p>symbolic examples:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">u (user), g (group), o (other), a (all)</span><br><span class="line">+, -, =</span><br><span class="line">u+x   u-x   +x[=a+x]   o-rw,   go=rw   u+x,go=rw</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>umask</code>: To set default file permissions (before creating).</p><ul><li><p>an example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># umask is 0002</span><br><span class="line">Original file mode  | --- rw- rw- rw-</span><br><span class="line">Mask  | 000 000 000 010</span><br><span class="line">Result| --- rw- rw- r--</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>su</code>: To run the shell as another user. <code>su - username</code>, <code>-</code> can enter the home directory.</p></li><li><p><code>sudo</code>: To execute the command as another user.</p></li><li><p><code>chown</code>: To change the file owner.</p><ul><li><p><code>chown [owner[:group]] file...</code>, here are some examples:</p><table><thead><tr><th>Example</th><th>Explanation</th></tr></thead><tbody><tr><td>bob</td><td>change the file owner to bob</td></tr><tr><td>bob:users</td><td>change the file owner to bob, group to users</td></tr><tr><td>:admins</td><td>change the group to admins, file owner remains the same</td></tr><tr><td>bob:</td><td>change the file owner to bob, group to bob’s login group</td></tr></tbody></table></li></ul></li><li><p><code>chgrp</code>: To change the group ownership of files.</p><ul><li><code>chgrp groupname file...</code></li></ul></li><li><p><code>passwd</code>: To change the user’s password.</p><ul><li><code>passwd username</code>: set user’s password.</li></ul></li></ul><blockquote><ul><li><p>User information is stored in <code>/etc/passwd</code>, group information is stored in <code>/etc/group</code>;</p><p>use the command <code>cat /etc/passwd</code> to have a quick look.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd | grep ubuntu</span><br><span class="line">        </span><br><span class="line"><span class="comment"># username:passwd:uid:gid:comment:home_dir:shell</span></span><br><span class="line"><span class="comment"># passwd (x) denotes that password is protected in /etc/passwd</span></span><br><span class="line"><span class="comment"># comment store some useful comments (like username)</span></span><br><span class="line">ubuntu:x:1000:1000:ubuntu:/home/ubuntu:/bin/bash</span><br><span class="line">        </span><br><span class="line">sudo <span class="built_in">cat</span> /etc/shadow | grep ubuntu</span><br><span class="line">        </span><br><span class="line"><span class="comment">#username:passwd(encrypted):last_modify_time:min_interval:max_interval</span></span><br><span class="line">ubuntu:$1$oQIzlBrL<span class="variable">$MErhwMGkTzqaeWkJNzpUh1</span>:19132:0:99999:7:::</span><br><span class="line">      </span><br><span class="line"><span class="built_in">cat</span> /etc/group | grep cdrom</span><br><span class="line">    </span><br><span class="line"><span class="comment"># groupname:passwd:gid:group_member</span></span><br><span class="line">cdrom:x:24:ubuntu,yue</span><br><span class="line">    </span><br><span class="line">sudo <span class="built_in">cat</span> /etc/gshadow | grep <span class="built_in">test</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># groupname:passwd:group_manager:group_member</span></span><br><span class="line"><span class="built_in">test</span>:*:yue:ubuntu</span><br></pre></td></tr></table></figure></li><li><p><strong>Permission Overview</strong>:</p></li></ul><table><thead><tr><th align="center"></th><th align="center">r</th><th align="center">w</th><th align="center">x</th></tr></thead><tbody><tr><td align="center"><strong>File</strong></td><td align="center">readable</td><td align="center">writable</td><td align="center">executable</td></tr><tr><td align="center"><strong>Directory</strong></td><td align="center">readable</td><td align="center">writable to files in the directory</td><td align="center">enterable to the directory</td></tr></tbody></table><blockquote><p>Home directory default permission: user &#x3D;rwx, go&#x3D;r-x ;</p><ul><li><code>setuid (s/S &lt;-&gt; x/-, 4000/u+s)</code> : It set valid user ID from the running user’s ID to the file owner’s ID;</li><li><code>setgid (g/G &lt;-&gt; x/-, 2000/g+s)</code>: Run not with the permissions of the group to which the user who started it belongs, but with the group that owns the file. In other words, <strong>the process gid is the same as the file gid</strong>.</li><li><code>sticky (t/T &lt;-&gt; x/-, 1000/o+t)</code>: It has no effect on files, but when it is used on a directory, all files in the directory can only be deleted or moved by their owner.</li></ul></blockquote><ul><li><strong>File Type</strong>:</li></ul><table><thead><tr><th align="center">Tag</th><th align="center">Type</th></tr></thead><tbody><tr><td align="center">-</td><td align="center">a normal file</td></tr><tr><td align="center">d</td><td align="center">a directory</td></tr><tr><td align="center">l</td><td align="center">a symbolic link (real file property is the file property that the symbolic link points to)</td></tr><tr><td align="center">c</td><td align="center">a character device file (process bytes stream, like terminal)</td></tr><tr><td align="center">b</td><td align="center">a block device file (process blocks, like hard-disk or CD-ROM)</td></tr></tbody></table></blockquote><h4 id="User-and-Group"><a href="#User-and-Group" class="headerlink" title="User and Group"></a>User and Group</h4><p>Because the permission is too large, you can even delete system files and crash the system. Therefore, you are not recommended to directly use <strong>root</strong> account.</p><p>On Linux systems, <code>sudo</code> is used as the default <strong>root</strong> identity for standard users.</p><p>Next, we have some commands for managing users and groups.</p><ul><li><p><code>groupadd</code>: create a new work group, whose info is added to <code>/etc/group</code>, <code>/etc/gshadow</code> and so on.</p><ul><li><code>[-g gid]</code> (specify the id of new group), <code>-r</code> (create system working groups)</li></ul></li><li><p><code>groupdel</code>: delete a group</p></li><li><p><code>gpasswd [options] groupname</code>: management tool the <code>/etc/group</code> and <code>/etc/gshadow</code></p><ul><li><code>-a/d username</code> (add&#x2F;delete user to group)</li><li><code>-A</code> (specify the manager)</li><li><code>-r/R</code> (cancel the password for the group, then only group member can <code>newgrp</code> to access the group)</li><li><code>-M user1,user2...</code>  add users to group</li></ul></li><li><p><code>groupmod</code>: change the group information</p><ul><li><code>-g gid</code> (change group id)</li><li><code>-n new_name old_name</code> (change group name)</li></ul></li><li><p><code>newgrp groupname</code>: It’s using the same account another group name, to log into the system again.</p></li><li><p><code>useradd</code>: create a new user.</p><ul><li><p><code>-m/M</code> (automatically &#x2F; <strong>not</strong> create a user <strong>home directory</strong>), </p></li><li><p><code>-g</code> (specify the login group), </p></li><li><p><code>-G grp1,grp2...</code> (specify the supplementary groups)</p></li><li><p><code>-d</code> (specify the starting directory for the user to log in to), </p></li><li><p><code>-r</code> (create a system account)</p></li><li><p><code>-s</code> (specify the login shell)</p></li><li><p><code>-n</code> (cancel creating a group with the user name)</p></li><li><p><code>-p</code> (specify the password, or later run the command <code>passwd</code> to set)</p><p><code>useradd -m -g root username</code>, <code>useradd -d /home/test username</code></p></li></ul></li><li><p><code>userdel</code>: <code>-r</code> (recursively delete)</p></li></ul><blockquote><p>Initial <strong>Login Group</strong>, is a group that a user owns immediately upon login. It’s usually specified with <code>-g</code> when creating a user. The GID in the user info (<code>/etc/passwd</code>) is <strong>login group</strong>. A user’s additional group is to assign additional permission to the specified user. (There can be only one <strong>login group</strong> and multiple <strong>supplementary group</strong>)</p></blockquote><ul><li><code>usermod</code>: modify the settings of the user account.<ul><li><code>-d</code>: set login directory of the user account</li><li><code>-e</code>: set validity period …</li><li><code>-g</code>: set the login group …</li><li><code>-G</code>: set the supplementary group …</li><li><code>-s</code>: set the shell used after login …</li><li><code>-l new_name old_name</code>: set the new username …</li><li><code>-L/U</code>: lock&#x2F;unlock the account …</li><li><code>-p</code>: set the new password …</li></ul></li></ul><h4 id="Progress"><a href="#Progress" class="headerlink" title="Progress"></a>Progress</h4><p>When the system starts, the kernel initializes some of its own activities as <strong>Init Process</strong> (PID 1). In turn, a series of shell scripts called <strong>Init Scripts</strong> (located in <code>/etc</code>) are run, which can start all system services. Many of these system services are implemented in the form of <strong>daemons</strong>, which run only in the background without any user interface (inaccessible). Here are some of the command-line tools available:</p><ul><li><p><code>ps</code>: To view the snapshot of process status;</p><ul><li><p>common parameter <code>aux</code> (show all processes)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-16-17-ubuntu:/etc$ ps aux</span><br><span class="line">USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line"></span><br><span class="line"><span class="comment"># TTY: ? denotes terminal running locally, Pts/n denotes terminal running remotely</span></span><br><span class="line"><span class="comment"># VSZ: virtual memory size</span></span><br><span class="line"><span class="comment"># RSS: physical memory size occupied by process</span></span><br><span class="line"><span class="comment"># STAT: R(running), S(sleeping), D(uninterruptible sleeping), T(terminal), Z(zombie) &lt;(high priority) N(low priority)</span></span><br></pre></td></tr></table></figure><blockquote><p>Ctrl-C: send a SIGIN</p><p>Ctrl-D: send a EOF</p><p>Ctrl-Z: send a SIGSTP, pause ongoing process on the terminal so as to be resumed when necessary.</p></blockquote></li></ul></li><li><p><code>top</code>: To displays a continuously updated list of system process in order of process activity (default, refresh per 3s);</p></li><li><p><code>jobs</code>: </p></li><li><p><code>bg</code>: </p></li><li><p><code>fg</code>: </p></li><li><p><code>kill</code>: To send signals to programs (<code>kill [-signal] PID...</code>);</p><ul><li><table><thead><tr><th>NO.</th><th>NAME</th><th>EXPLANATION</th></tr></thead><tbody><tr><td>1</td><td>HUP</td><td>Hang up, this signal is used to tell the program that the control terminal has “hung up.” You can show what this signal does by closing a terminal session. Foreground programs running on the current terminal will receive this signal and terminate. Many daemons also use this signal to re-initialize.</td></tr><tr><td>2</td><td>INT</td><td>like Ctrl-c</td></tr><tr><td>9</td><td>KILL</td><td>The KILL signal is never sent to the target program. Instead, the kernel immediately terminates the process. When a process is terminated in this way, it has no opportunity to do any “cleaning” or saving work.</td></tr><tr><td>15</td><td>TERM</td><td>Terminal, this is default signal sent by KILL</td></tr><tr><td>18</td><td>CONT</td><td>Continue, after getting a stop signal, program will be resumed by CONT</td></tr><tr><td>19</td><td>STOP</td><td>like KILL, STOP is not sent to the target process, so it cannot be ignored</td></tr></tbody></table><p>其他常用信号：</p><table><thead><tr><th>NO.</th><th>NAME</th><th>EXPLANATION</th></tr></thead><tbody><tr><td>3</td><td>QUIT</td><td></td></tr><tr><td>11</td><td>SEGV</td><td>If a program uses memory illegally, this signal will be sent</td></tr><tr><td>20</td><td>TSTP</td><td>Ctrl-z will trigger this signal to cause terminal stop, unlike STOP, it can be ignored</td></tr></tbody></table></li></ul></li><li><p><code>killall</code>: To send signals to multiple processes that match a particular program or username (<code>killall [-u user] [-signal] name...</code>);</p></li><li><p><code>shutdown</code>: To shutdown the machine or reboot;</p></li></ul><h4 id="Shell-Environment"><a href="#Shell-Environment" class="headerlink" title="Shell Environment"></a>Shell Environment</h4><ul><li><p><code>printenv</code>: </p></li><li><p><code>set</code>: To display existing shell variables in the system and set new variable values for shell variables.</p></li><li><p>When user log in to the system, the <strong>bash</strong> program starts and reads a series of configuration scripts (startup files that define a default environment for all users), then it reads the startup files in the home directory that define the user’s personal shell environment.</p><p>The exact startup order depends on the type of shell session you want to run. There are two types, one is login shell session (need username and password), the other is non-login shell session (start under the GUI).</p><p><strong>Login shell startup order</strong>:</p><table><thead><tr><th>File</th><th>Usage</th></tr></thead><tbody><tr><td>&#x2F;etc&#x2F;profile</td><td>global conf script applying to all users</td></tr><tr><td>~&#x2F;.bash_profile</td><td>user’s personal startup file, used to extend or override settings in global conf script</td></tr><tr><td>~&#x2F;.bash_login</td><td>if ~&#x2F;.bash_profile is not found, bash will try to read this script</td></tr></tbody></table><p><strong>Non-login shell startup order</strong>: </p><table><thead><tr><th>File</th><th>Usage</th></tr></thead><tbody><tr><td>&#x2F;etc&#x2F;bash.bashrc</td><td>global conf script applying to all users</td></tr><tr><td>~&#x2F;.bashrc</td><td>user’s personal startup file, used to extend or override settings in global conf script</td></tr></tbody></table><p>In addition to reading the startup files above, <strong>non-login shell also inherit the environment settings of their parent process, usually a login shell</strong>. </p><p>In general users’ points, <strong>the file ~&#x2F;.bashrc is probably the most important startup file</strong> because it’s almost always read. <strong>Non-login shells read it by default, and most startup files for login shells are written in such a way that they can read ~&#x2F;.bashrc</strong> . The below is a typical .bash_profile file (From CentOS 4):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bash_profile</span></span><br><span class="line"><span class="comment"># Get the aliaes and functions</span></span><br><span class="line"><span class="keyword">if</span> [ -f ~/.bashrc ]; <span class="keyword">then</span></span><br><span class="line">. ~/.bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># User specific environment and startup programs</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure></li><li><p><code>export</code>: export environment variables;</p></li><li><p><code>alias</code>: create alias for command;</p></li></ul><h4 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h4><p><a href="https://blog.csdn.net/coobeedongzhou/article/details/24492581">ref1</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Permission&quot;&gt;&lt;a href=&quot;#Permission&quot; class=&quot;headerlink&quot; title=&quot;Permission&quot;&gt;&lt;/a&gt;Permission&lt;/h4&gt;&lt;p&gt;First of all, let’s take a quick look </summary>
      
    
    
    
    <category term="languages" scheme="https://stu-yue.github.io/categories/languages/"/>
    
    <category term="shell" scheme="https://stu-yue.github.io/categories/languages/shell/"/>
    
    
    <category term="shell" scheme="https://stu-yue.github.io/tags/shell/"/>
    
    <category term="linux" scheme="https://stu-yue.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Memo | Parameter Estimation</title>
    <link href="https://stu-yue.github.io/jottings/mathematics/memo_mle_mae_bayes/"/>
    <id>https://stu-yue.github.io/jottings/mathematics/memo_mle_mae_bayes/</id>
    <published>2023-08-30T05:56:53.000Z</published>
    <updated>2023-08-30T09:21:54.177Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Through this note, I hope to deepen my understanding of probability distribution and inference.</p></blockquote><h4 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h4><blockquote><ul><li><strong>Probability:</strong> to predict results obtained in the next observation when parameters are known;</li><li><strong>Statistic&#x2F;Likelihood:</strong> to estimate parameters about properties when the result of observations are known;</li><li><strong>Parametric Method:</strong>  assume that  the learned distribution has a specific functional form (like Gaussian distribution or exponential p.d.f), we only estimate the parameters in these functions.</li><li><strong>Nonparametric Method</strong>: use the training samples to estimate the density of any point in the domain.<ul><li>Nonparametric methods also have parameters, we just don’t assume any specific functional form for distribution;</li><li>Actually, nonparametric methods treat all training samples as parameters;</li><li>example: kernel density estimation;</li></ul></li></ul></blockquote><ol><li>Under the joint distribution $p_{X,Y}(X,Y)$:<ul><li>When the effect of $Y$ is removed from the joint distribution $p_{X,Y}(X,Y)$,  <em>marginal distribution</em> $p_X(X)$ is called <strong>marginal likelihood</strong>;</li><li>When $X$ has not yet been observed,  <em>marginal distribution</em> $p_Y(Y)$ is called <strong>prior distribution</strong>;</li></ul></li><li><strong>Posterior Distribution</strong>:  $p(\theta|\mathcal{D}) &#x3D; \frac{p(\mathcal{D},\theta)}{p(\mathcal{D})}$, concentrating <em>Population Info, Sample Info and Prior Info</em>;<ul><li>$p(\mathcal{D})$ is marginal likelihood;</li><li>$\text{Posterior} &#x3D; \frac{\text{Likelihood}\times \text{Prior}}{\text{Marginal Likelihood}}$, in terms of $p(Y|X) &#x3D; \frac{1}{Z}p(X|Y)p(Y)$, $Z&#x3D;p(X)&gt;0$ is a normalized constant such that $p(Y|X)$ is a valid probability distribution.</li></ul></li><li>The Views<ul><li>Frequentist: <ul><li>Data are repeatable random sample - there is a frequency;</li><li>Underlying parameters remain constant during this repeatable process;</li><li><em>Parameters are <strong>fixed value</strong></em>;</li><li><em>statistical inference: Population Info + Sample Info</em></li><li>MLE, MAP;</li></ul></li><li>Bayesian: <ul><li>Data are observed from the realized sample;</li><li><em>Parameters are unknown <strong>(random variable)</strong> and described probabilistically <strong>(prior distribution)</strong></em>;</li><li><em>statistical inference: Population Info + Sample Info + <strong>Prior Info (Main Diff)</strong></em>;</li><li>Bayesian Estimation;</li></ul></li></ul></li></ol><blockquote><p><strong>Notations</strong></p><ul><li>Training Data: $\mathcal{D} &#x3D; { (\mathbf{x_1}, y_1),\cdots,(\mathbf{x}_n, y_n) }$;</li><li>Model Parameter: $\theta$;</li><li>New Data: $x^*$;</li></ul></blockquote><h4 id="Maximum-Likelihood-Estimation"><a href="#Maximum-Likelihood-Estimation" class="headerlink" title="Maximum Likelihood Estimation"></a>Maximum Likelihood Estimation</h4><ul><li><p>Objective is<br>$$<br>\theta_{MLE}^* &#x3D; \arg\max_\theta p(\mathcal{D}|\theta)<br>$$</p><ul><li>$p(\mathcal{D}|\theta)$ is likelihood, not conditional probability;</li></ul><p>Usually, we define<br>$$<br>\mathscr{l}(\theta) &#x3D; p(\mathcal{D}|\theta) \<br>\mathscr{ll}(\theta) &#x3D; \ln \mathscr{l}(\theta)<br>$$<br>So, objective is equivalent to<br>$$<br>\theta_{MLE}^* &#x3D; \arg\max_\theta \mathscr{ll}(\theta)<br>$$<br>That is, we seek those values for the parameters in $\theta$ which maximize $p(\mathcal{D}|\theta)$. The MLE solution is usually obtained by setting<br>$$<br>\frac{\partial \mathscr{ll}(\theta)}{\partial\theta} &#x3D; 0<br>$$</p></li><li><p><font color=red>However, the model…</font></p><ul><li>Does not incorporate prior belief;</li><li>Easy to overfit the data;</li></ul></li></ul><h4 id="Maximum-A-Posteri-Estimation"><a href="#Maximum-A-Posteri-Estimation" class="headerlink" title="Maximum A Posteri Estimation"></a>Maximum A Posteri Estimation</h4><ul><li><p>Objective is<br>$$<br>\theta^*_{MAP} &#x3D; \arg\max_\theta p(\theta|\mathcal{D})<br>$$<br>Since we have Bayes rule:<br>$$<br>p(\theta | \mathcal{D}) &#x3D; \frac{p(\mathcal{D})p(\theta)}{p(\mathcal{D})}<br>$$<br>Our objective is equivalent to<br>$$<br>\theta^*_{MAP} &#x3D; \arg\max_\theta p(\mathcal{D}|\theta)p(\theta)<br>$$<br>Further, by taking the log<br>$$<br>\theta^*_{MAP} &#x3D; \arg\max_\theta {\ln p(\mathcal{D}|\theta) + lnp(\theta) } \<br>\theta^*_{MAP} &#x3D; \arg\max_\theta { \mathscr{ll}(\theta) + \ln p(\theta) }<br>$$<br>Thus, our final goal is to find<br>$$<br>\theta^*_{MAP} &#x3D; \arg\max_\theta { \mathscr{ll}(\theta) + \ln p(\theta) }<br>$$<br>The difference between MAP and MLE is the “extra” term - $p(\theta)$. The term is:</p><ul><li>our prior (belief)</li><li>also can be seen as penalty (regularization) - to reduce the overfitting.</li></ul></li></ul><blockquote><p> For $p(\theta|\mathcal{D})$, in terms of <strong>point estimation</strong> for $\theta$,</p><ul><li>using the <strong>maximum value</strong> is called <strong>Maximum A Posterior Estimation</strong>;</li><li>using the <strong>median value</strong> is called <strong>Posteriror Median Estimation</strong>;</li><li>using the <strong>expectation value</strong> is called <strong>Posterior Expectation Estimation</strong>;</li></ul></blockquote><h4 id="Bayesian-Estimation"><a href="#Bayesian-Estimation" class="headerlink" title="Bayesian Estimation"></a>Bayesian Estimation</h4><blockquote><ul><li>$p(\theta|\mathcal{D})$ (it’s the result of adjustments to prior $p(\theta)$ by population and sample);</li><li><strong>Equal Ignorance</strong>: If there’s no information about the prior distribution, assume $\theta \sim U(0,1)$ ;</li></ul></blockquote><ul><li><p>Learning:  Computing the posterior $p(\theta|\mathcal{D})$ ;</p></li><li><p>Prediction:  $p(\hat y | x^*,\mathcal{D}) &#x3D; \int_\theta p(\hat y | x^*,\theta)p(\theta|\mathcal{D})d\theta$ ;</p></li><li><p><font color=red>Both MLE and MAP return only single and specific values for the paramter $\theta$; </font></p><p><font color=blue>Bayesian estimation, by contrast, calculates fully the posterior distribution $p(\theta|\mathcal{D})$, </font> and making prediction by considering all possible $\theta$.</p><p>Thus, for Bayesian methods:</p><ul><li>The prediction is optimal</li><li>Avoid the overfitting</li></ul></li><li><p><font color=blue>Bayesian is powerful, but…</font></p><p>We need to compute posterior distribution $p(\theta|\mathcal{D})$, and<br>$$<br>p(\theta|\mathcal{D}) &#x3D; \frac{p(\mathcal{D}|\theta)p(\theta)}{\int p(\mathcal{D},\theta)d\theta}<br>$$<br>In practice, evaluating this posterior is usually intractable due to the <font color=red>complex integrals</font>…</p></li></ul><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://yuanxiaosc.github.io/2018/06/20/%E8%B4%9D%E5%8F%B6%E6%96%AF%E4%BC%B0%E8%AE%A1%E3%80%81%E6%9C%80%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1%E3%80%81%E6%9C%80%E5%A4%A7%E5%90%8E%E9%AA%8C%E4%BC%B0%E8%AE%A1%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB/">Mainly Ref</a></p><p><a href="https://blog.csdn.net/u011508640/article/details/72815981">Ref2</a></p><p><a href="https://www.zhangzhenhu.com/glm/source/%E8%B4%9D%E5%8F%B6%E6%96%AF%E4%BC%B0%E8%AE%A1/content.html">Ref3</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Through this note, I hope to deepen my understanding of probability distribution and inference.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Pr</summary>
      
    
    
    
    <category term="mathematics" scheme="https://stu-yue.github.io/categories/mathematics/"/>
    
    
    <category term="math" scheme="https://stu-yue.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>Memo | Algebra Basis</title>
    <link href="https://stu-yue.github.io/jottings/mathematics/memo_algebra_basis/"/>
    <id>https://stu-yue.github.io/jottings/mathematics/memo_algebra_basis/</id>
    <published>2023-08-27T07:56:53.000Z</published>
    <updated>2023-08-30T05:59:00.628Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>**Positive Definiteness of the Norm: ** According to the usual definition, a norm should satisfy the property of positive definiteness which means that a norm must have a non-negative value for non-zero vectors and only attain zero when the vector is the <strong>zero</strong>.</p></li><li><p>**Norm and Distance Evaluation: **</p><table><thead><tr><th align="left">Norm</th><th>Distance</th></tr></thead><tbody><tr><td align="left">$L_0\ \text{norm}$ : $</td><td></td></tr><tr><td align="left">$L_1\ \text{norm}$ : $</td><td></td></tr><tr><td align="left">$L_2\ \text{norm}$ :  $</td><td></td></tr><tr><td align="left">$L_p\ \text{norm}$ :  $</td><td></td></tr><tr><td align="left">$\text{Infinite norm}$ : $</td><td></td></tr></tbody></table></li><li><p><strong>Normed Space:</strong> Normed space introduces a norm (or length, modulus) concept on the basis of linear space.</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;**Positive Definiteness of the Norm: ** According to the usual definition, a norm should satisfy the property of positive defini</summary>
      
    
    
    
    <category term="mathematics" scheme="https://stu-yue.github.io/categories/mathematics/"/>
    
    
    <category term="algebra" scheme="https://stu-yue.github.io/tags/algebra/"/>
    
  </entry>
  
  <entry>
    <title>Summa | Intro of Statistical ML</title>
    <link href="https://stu-yue.github.io/jottings/statistics_ml/summa_intro/"/>
    <id>https://stu-yue.github.io/jottings/statistics_ml/summa_intro/</id>
    <published>2023-08-27T07:56:53.000Z</published>
    <updated>2023-08-30T09:24:16.463Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>If a system is able to improve its performance by executing a certain process, it is called learning.</p></blockquote><h4 id="1-Basis"><a href="#1-Basis" class="headerlink" title="1 Basis"></a>1 Basis</h4><ol><li><strong>Hypothesis Space:</strong> The set of functions that includes all possible models to be learned.</li><li><strong>Common Steps:</strong> <ol><li>Attain a finite training data set.</li><li>Determine the set of <strong>learning models</strong>.</li><li>Determine the criteria for model selection (<strong>learning strategies</strong>).</li><li>Develop algorithms for solving the optimal model (<strong>learning algorithm</strong>).</li><li>Select optimal model according to criteria.</li><li>Use the learned optimal model to predict or analyze new data.</li></ol></li><li><strong>Problem Types:</strong> <strong>Classification&#x2F;Tagging</strong> (outputs take a finite number of discrete values), <strong>Regression</strong> (function fitting, real values)</li><li><strong>Model Types</strong>:<ul><li><strong>Discriminative Model</strong>: directly model $p(Y|X)$;<ul><li><em>Cons</em>:  easy to learn, high classification accuracy;</li></ul></li><li><strong>Generative Model</strong>: model $p(X, Y)$, usually translating to modeling the prior distribution $p(Y)$ and class conditional distribution $p(X|Y)$, due to ($p(X, Y)&#x3D; P(X|Y)p(Y)$);<ul><li><em>Cons</em>: <strong>add the prior distribution [main diff]</strong>, model the data generation process;</li></ul></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;If a system is able to improve its performance by executing a certain process, it is called learning.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 </summary>
      
    
    
    
    <category term="statistics_ml" scheme="https://stu-yue.github.io/categories/statistics-ml/"/>
    
    
    <category term="ml" scheme="https://stu-yue.github.io/tags/ml/"/>
    
    <category term="statistic" scheme="https://stu-yue.github.io/tags/statistic/"/>
    
  </entry>
  
  <entry>
    <title>Memo | See the World through Shell</title>
    <link href="https://stu-yue.github.io/jottings/languages/shell/memo_see_the_world_through_shell/"/>
    <id>https://stu-yue.github.io/jottings/languages/shell/memo_see_the_world_through_shell/</id>
    <published>2023-08-27T07:56:53.000Z</published>
    <updated>2023-11-08T05:38:14.844Z</updated>
    
    <content type="html"><![CDATA[<p>In this post, there’re other commands we should be familiar with:</p><ul><li><p><code>echo</code>: To display a line text.</p><ul><li><code>-e</code> (explain the escape sequences)</li></ul></li><li><p><code>clear</code>: </p></li><li><p><code>history</code>: To display the history list content.</p><ul><li><p>list history commands: </p><table><thead><tr><th>sequence</th><th>conduct</th></tr></thead><tbody><tr><td>!!</td><td>repeat the last command executed</td></tr><tr><td>!number</td><td>repeat the number line command in the history</td></tr><tr><td>!string</td><td>repeat the command starting with this string</td></tr><tr><td>!?string</td><td>repeat the command containing this string</td></tr></tbody></table></li></ul></li></ul><h4 id="Expansions-in-Shell"><a href="#Expansions-in-Shell" class="headerlink" title="Expansions in Shell"></a>Expansions in Shell</h4><ol><li><p><strong>Mathematical Expression:</strong> </p><ul><li>Format: <code>$((expression))</code>, for example,  <code>echo $((2 + 2))</code>;</li><li>Operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>  (integer division), <code>%</code>, <code>**</code> (exponentiation);</li></ul></li><li><p><strong>Curly Brackets (or Braces):</strong> Curly braces can create multiple text characters. Generally speaking, a pattern in curly braces may contain a header and a postscript. The curly brace expression itself may contain <strong>a list of strings separated by commas, an integer interval, or a single character interval</strong>. <strong>Whitespace characters cannot be embedded in this mode</strong>.</p><ul><li><p><code>echo Number_&#123;1..5&#125;</code>, <code>echo &#123;Z..A&#125;</code>, <code>echo Front-&#123;A,B,C&#125;</code>;</p></li><li><p><code>mkdir &#123;2007..2009&#125;-0&#123;1..9&#125; &#123;2007..2009&#125;-&#123;10..12&#125;</code></p></li><li><p>Furthermore, curly braces can be nested: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo a&#123;A&#123;1,2&#125;,B&#123;3,4&#125;&#125;b</span><br><span class="line">aA1b aA2b aB3b aB4b</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Parameter Expansion:</strong> </p></li><li><p><strong>Command Substitution</strong>: Use the output of a command as expansion mode:</p><ul><li><p><code>ls -l $(which cp)</code>, <code>echo$(ls)</code>, <code>file $(ls /usr/bin* | grep zip)</code>;</p></li><li><p>In the old shell, [&#96;&#96;] can replace [$()]:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l `<span class="built_in">which</span> <span class="built_in">cp</span>`</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Double Quotation:</strong> In double quotes, the special characters used by the shell lose their special meaning and are treated as ordinary characters. <strong>Mathematical expansion, parameter expansion and command substitution</strong> are still performed. (Double quotation can retain whitespace)</p><ul><li><code>ls -l &quot;two words.txt&quot;</code>, <code>echo &quot;$USER $((2+2)) $(cal)&quot;</code>;</li><li><code>echo &quot;$(cal)&quot;</code> is different with <code>echo $(cal)</code>, try it.</li></ul></li><li><p><strong>Single Quotation</strong>: Single quotation disables all mode expansions.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-16-17-ubuntu:~$ <span class="built_in">echo</span> text ~/*.txt &#123;a,b&#125; $(<span class="built_in">echo</span> foo) $((<span class="number">2</span>+<span class="number">2</span>)) <span class="variable">$USER</span></span><br><span class="line">ubuntu@VM-16-17-ubuntu:~$ <span class="built_in">echo</span> <span class="string">&quot;text ~/*.txt &#123;a,b&#125; <span class="subst">$(echo foo)</span> <span class="subst">$((2+2)</span>) <span class="variable">$USER</span>&quot;</span></span><br><span class="line">ubuntu@VM-16-17-ubuntu:~$ <span class="built_in">echo</span> <span class="string">&#x27;text ~/*.txt &#123;a,b&#125; $(echo foo) $((2+2)) $USER&#x27;</span></span><br><span class="line">text /home/ubuntu/lazy_dog.txt /home/ubuntu/ls.txt a b foo 4 ubuntu</span><br><span class="line">text ~/*.txt &#123;a,b&#125; foo 4 ubuntu</span><br><span class="line">text ~/*.txt &#123;a,b&#125; $(<span class="built_in">echo</span> foo) $((<span class="number">2</span>+<span class="number">2</span>)) <span class="variable">$USER</span></span><br></pre></td></tr></table></figure></li><li><p>**Backslash: ** <code>\</code> can escape special characters in shell, but not in single quotes.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The balance for user <span class="variable">$USER</span> is: \$5.00&quot;</span></span><br><span class="line"><span class="built_in">mv</span> bad\&amp;filename good_filename</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><strong>NOTE</strong>: </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="string">&quot;abc&quot;</span>, $<span class="string">&quot;\n&quot;</span></span><br></pre></td></tr></table></figure><p>The above is <strong>a special string conversion syntax</strong> used to <strong>localize strings</strong> (with Settings such as the environment variable <strong>LANG or LC_MESSAGES</strong>).</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="string">&#x27;abc&#x27;</span>, $<span class="string">&#x27;\n&#x27;</span>, $<span class="string">&#x27;ab\tc&#x27;</span></span><br></pre></td></tr></table></figure><p>When you use the form $’abc’ in the Shell, <strong>the Shell extends the string and replaces the special characters with the corresponding escape sequence</strong>.</p></blockquote><h4 id="Supplement"><a href="#Supplement" class="headerlink" title="Supplement"></a>Supplement</h4><ol><li><p><code>$()</code>仅在Bash Shell中有效，反引号可在多种Shell中使用；它俩作用都是执行命令</p></li><li><p><code>$()</code>是新用法，``是老用法；<code>$()</code>支持嵌套——如<code>$(wc -l $(ls | sed -n &#39;1p&#39;))</code>;</p></li><li><p>单引号（’）所见即所得，直接显示单引号里的内容。即单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</p></li><li><p>双引号（“）先把变量解析之后，再输出；双引号括起来的字符中（$，\，`)，<strong>主要是区分空格</strong></p><ul><li><p><code>$</code> 代表引用变量的值；</p></li><li><p><code>\</code> 是转义字符；</p></li><li><p>`   代表引用命令；</p></li><li><p><code>echo -e</code>可以识别双引号中的转义字符；</p></li></ul></li><li><p>反引号用于命令替换，即先执行反引号中的语句，再把结果加入到原命令中；</p></li><li><p><code>$&#123;a&#125;</code>和<code>$a</code>一样，数组则需要<code>$&#123;array[0]&#125;</code>；</p></li></ol><p><a href="https://blog.csdn.net/qq_39852676/article/details/90228973">https://blog.csdn.net/qq_39852676/article/details/90228973</a></p><h4 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h4><h5 id="1-替换字符串"><a href="#1-替换字符串" class="headerlink" title="1 替换字符串"></a>1 替换字符串</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">:[range]s/&#123;pattern&#125;/&#123;string&#125;/[flags] [count]</span><br><span class="line"></span><br><span class="line">range:</span><br><span class="line">.,<span class="variable">$s</span>/foo/bar/   .表示当前行</span><br><span class="line">3,10s/foo/bar/3-10行</span><br><span class="line">%s/foo/bar/整个文本</span><br><span class="line"></span><br><span class="line">flags:</span><br><span class="line">i:忽略大小写</span><br><span class="line">g:出现的所有模式</span><br><span class="line">c:确认每次替换</span><br></pre></td></tr></table></figure><p><a href="https://cloud.tencent.com/developer/article/2015348">https://cloud.tencent.com/developer/article/2015348</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In this post, there’re other commands we should be familiar with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;echo&lt;/code&gt;: To display a line text.&lt;/p&gt;
&lt;ul&gt;
&lt;li</summary>
      
    
    
    
    <category term="languages" scheme="https://stu-yue.github.io/categories/languages/"/>
    
    <category term="shell" scheme="https://stu-yue.github.io/categories/languages/shell/"/>
    
    
    <category term="shell" scheme="https://stu-yue.github.io/tags/shell/"/>
    
    <category term="linux" scheme="https://stu-yue.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Memo | Redirection</title>
    <link href="https://stu-yue.github.io/jottings/languages/shell/memo_redirection/"/>
    <id>https://stu-yue.github.io/jottings/languages/shell/memo_redirection/</id>
    <published>2023-08-25T06:56:53.000Z</published>
    <updated>2023-08-25T07:42:17.718Z</updated>
    
    <content type="html"><![CDATA[<hr><p><em>Input&#x2F;output redirection is achieved by modifying file pointers.</em> <strong>When redirection occurs, file descriptors themselves are not changed, instead, it’s the file pointers associated with the file descriptors that are altered.</strong></p><h4 id="Manipulation-of-File-Descriptors-in-Shell"><a href="#Manipulation-of-File-Descriptors-in-Shell" class="headerlink" title="Manipulation of File Descriptors in Shell"></a>Manipulation of File Descriptors in Shell</h4><blockquote><p><strong>In redirection, <code>&amp;</code> is used to indicates the following numbers is file descriptor rather than  a filename.</strong></p></blockquote><ul><li><p>Output Redirection:</p><ul><li><code>stdiout</code> redirection: <ul><li><code>command &gt;file</code>: [overwrite], stdout overwrites the file.<ul><li><code>&gt; file</code>: clear the content.</li></ul></li><li><code>command &gt;&gt;file</code>: [append], stdout appends to the file.</li></ul></li><li><code>stderr</code> redirection:<ul><li><code>command 2&gt;file</code>: [overwrite], stderr overwrites the file.</li><li><code>command 2&gt;&gt;file</code>: [append], stderr appends to the file.</li></ul></li><li>Both <code>stdout</code> and <code>stderr</code>:<ul><li><code>command &gt;file 2&gt;&amp;1</code>: [overwrite], both stdout and stderr overwrite the file.</li><li><code>command &gt;&gt;file 2&gt;&amp;1</code>: [append], both stdout and stderr append to the file.</li><li><code>command &gt;file1 2&gt;file2</code>: stdout overwrites the file1, stderr overwrites the file2.</li><li><code>command &gt;&gt;file1 2&gt;&gt;file2</code>: stdout appends to file1, stderr appends to file2.</li><li><code>command &gt;file 2&gt;file</code>: [not recommend] file is opened twice, leading to resource competition.</li><li><code>command &gt;&gt;file 2&gt;&gt;file</code>: [not recommend] file is opened twice, leading to resource competition.</li></ul></li></ul></li><li><p>Input Redirection: </p><ul><li><p><code>command &lt;file</code>: take the contents of the file as the input to command.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">while read str; do</span><br><span class="line">echo $str</span><br><span class="line">done &lt;readme.txt</span><br></pre></td></tr></table></figure></li><li><p><code>command &lt;&lt;END</code>: read data from standard input (keyboard) until meeting the delimiter END (defined by the user).</p></li><li><p><code>command &lt;file1 &gt;file2</code>: input by file1, and output to file2</p></li></ul></li></ul><blockquote><p><code>&amp;&gt;</code>: redirect both stdout and stderr to the same  location (usually a file).</p><p><code>&gt;&amp;</code>: redirect the output of one file descriptor to another</p><p><code>&gt;&amp;-</code>: equal to redirection to <code>/dev/null</code></p></blockquote><h4 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h4><p>Pipeline is used to <strong>link the stdout of the previous instruction</strong> as <strong>the stdin of the next instruction</strong>.</p><p>Pipeline is often used to perform complex operations on data. It’s possible to put several commands together to form a pipeline (usually called filter). For example: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /bin /usr/bin | sort | uniq | less</span><br></pre></td></tr></table></figure><h4 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h4><p>There’s some useful command in this memo:</p><ul><li><code>cat</code>: To link file.<ul><li><code>cat</code> can accept not one parameter, so it can concatenate the file: <code>cat movie.mpeg.0* &gt; movie.mpeg</code>;</li></ul></li><li><code>sort</code>: To sort the text lines.</li><li><code>uniq</code>: To report&#x2F;omit the repetitive lines.</li><li><code>grep</code>: To print the matching rows.<ul><li><code>-i</code> (ignore upper&#x2F;lower), <code>-v</code> (reverse find, print mismatching lines), <code>-n</code>  (show the matching lines), <code>-r</code> (recursively find), <code>-l</code> (only print matching filename), <code>-c</code>  (only print the number of matching line)</li></ul></li><li><code>wc</code>: To print the LF, word, bytes of the text.<ul><li><code>-c</code> (bytes), <code>-l</code> (lines), <code>-w</code> (words)</li></ul></li><li><code>head</code>&#x2F;<code>tail</code>: To print first&#x2F;last part of text.<ul><li><code>-n</code> (lines), <code>-c</code> (bytes)</li><li><code>tail -f filename</code>: continue to monitor this file, when the new is added to the file, they appear immediately on the screen.</li></ul></li><li><code>tee</code>: read from stdin, and write to stdout and file.<ul><li><code>-a</code>  (append mode), <code>-i</code> (ignore-interrupts)</li><li><code>ls -l | tee -a ls.log </code>: print the content both in the stdout and file.</li><li><code>ls /usr/bin | tee ls.log | grep zip</code></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Input&amp;#x2F;output redirection is achieved by modifying file pointers.&lt;/em&gt; &lt;strong&gt;When redirection occurs, file descriptors the</summary>
      
    
    
    
    <category term="languages" scheme="https://stu-yue.github.io/categories/languages/"/>
    
    <category term="shell" scheme="https://stu-yue.github.io/categories/languages/shell/"/>
    
    
    <category term="shell" scheme="https://stu-yue.github.io/tags/shell/"/>
    
    <category term="linux" scheme="https://stu-yue.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Memo | GIL and Coroutine</title>
    <link href="https://stu-yue.github.io/jottings/languages/python/memo_GIL_and_coroutine/"/>
    <id>https://stu-yue.github.io/jottings/languages/python/memo_GIL_and_coroutine/</id>
    <published>2023-08-10T08:01:53.000Z</published>
    <updated>2023-08-11T16:23:09.434Z</updated>
    
    <content type="html"><![CDATA[<h4 id="GIL-Global-Interpreter-Lock"><a href="#GIL-Global-Interpreter-Lock" class="headerlink" title="GIL (Global Interpreter Lock)"></a>GIL (Global Interpreter Lock)</h4><ol><li><p>GIL is not a characteristic of Python itself, but rather a characteristic to CPython, the reference implementation of Python.</p></li><li><p>In CPython, GIL is a mutex lock used to ensure that only on thread is executing at a time within a process.</p></li><li><p>In the absence of the GIL, it’s possible for multiple threads executing the same code simultaneously <strong>to cause incorrect reference counting of variables</strong>, leading to the garbage collector directly reclaiming the variables involved in the executed code. This can result in errors when other threads attempt to use those reclaimed variables.</p></li><li><p><strong>How to work:</strong> </p><ul><li><p>Each thread acquires the GIL at the beginning of its execution to prevent other threads from preempting. Similarly, <strong>after each thread completes a segment of code</strong> (or <strong>before system calls that may cause blocking, such as IO operations</strong>), it releases the GIL to allow other threads to utilize resources.</p></li><li><p>In CPython, there’s another mechanism called <code>check_interval</code>, where the interpreter periodically checks the status of the GIL lock for threads. After a certain interval, the interpreter forces the current thread to release the GIL, allowing other threads to have opportunity to execute.</p><p>Overall, each Python thread is encapsulated in a similar loop structure. Let’s take a look at the following code: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (--ticker &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ticker = check_interval;</span><br><span class="line">        <span class="comment">/* Give another thread a chance */</span></span><br><span class="line">        PyThread_release_lock(interpreter_lock);</span><br><span class="line">        <span class="comment">/* Other thread may run now */</span></span><br><span class="line">        PyThread_acquire_lock(interpreter_lock);</span><br><span class="line">    &#125;</span><br><span class="line">    bytecode = *next_instr++;</span><br><span class="line">    <span class="keyword">switch</span>(bytecode) &#123;</span><br><span class="line">            <span class="comment">/* execute the next instruction ... */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above example represents instruction counting, while the current approach is mostly based on time slicing.</p></li><li><p>Here’s another example that demonstrates GIL’s working principle:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="comment"># endless loop for full CPU utilization</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># multi-thread version:</span></span><br><span class="line"><span class="comment"># t1 = Thread(target=test)</span></span><br><span class="line"><span class="comment"># multi-process version:</span></span><br><span class="line">t1 = Process(target=test)</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># main thread execution</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>When the multi-thread code running, we can observe the CPU utilization from <code>htop</code> as shown below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1  [50%]</span><br><span class="line">2  [50%]</span><br></pre></td></tr></table></figure><p>According to the above, we can know that each thread spends their a half time waiting for GIL.</p><p>Additionally, the multi-process version as shown below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1  [100%]</span><br><span class="line">2  [100%]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>The other way to utilize multi-core CPU is <strong>Multi-Process or Coroutine</strong></p></li></ol><h4 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h4><p><strong>Generator</strong> contains the <code>yield</code> keyword to produce values. It has the following characteristics:</p><ol><li><em>Laziness</em>: Generators are lazy in nature, meaning they produce values on-demand as requested by the caller, rather than generating all the values at once. This lazy evaluation allows for efficient memory usage, especially when dealing with large or infinite sequences.</li><li><em>Memory efficiency</em>: Due to their lazy evaluation, generators are memory-efficient. </li><li><em>Iterability:</em> Generators are iterable objects, which means they can be looped over using a <code>for</code> loop or consumed by other iterable functions like <code>list()</code> or <code>sum()</code>. They provide a convenient way to iterate over a sequence of values without the need to store the entire sequence in memory.</li><li><em>State persistence</em>: Generators maintain their internal state between successive calls. When a generator function is paused at a <code>yield</code> statement, the local variables’ values are preserved. This allows the generator to resume execution from where it left off, retaining the necessary information to generate the next value.</li><li><em>Infinite sequences</em>: Generators can be used to represent infinite sequences since they generate values on-the-fly.</li><li><em>Function-like behavior</em>: Generators are defined using the <code>def</code> keyword like regular functions, and they can have parameters, return values, and other function features. However, they differ in their execution behavior, as they can be paused and resumed.</li></ol><blockquote><p>When the generator function finishes executing (no more <code>yield</code> statements or returns), the generator object raises a <code>StopIteration</code> exception.</p><ul><li><p><code>yield from</code> is a syntactic sugar that allows delegation of generator execution within a generator function. It provides a concise way to call a sub-generator from a parent generator and directly pass the values yielded by the sub-generator to the parent generator.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sub_generator</span>():</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parent_generator</span>():</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;START&#x27;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> sub_generator()</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;END&#x27;</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> parent_generator():</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure></li><li><p><code>yield</code> and <code>send</code> are used together to allow the generator function to receive values during each iteration and send values back into the generator function for processing.</p><p>Here is an example of how <code>yield</code> and <code>send</code> are used:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generator_function</span>():</span><br><span class="line">    result = <span class="keyword">yield</span>  <span class="comment"># First call, receives a value sent by send()</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;gen&#x27;</span>, result)</span><br><span class="line">        result = <span class="keyword">yield</span> result</span><br><span class="line">gen = generator_function()</span><br><span class="line"><span class="comment"># Start the generator</span></span><br><span class="line"><span class="built_in">next</span>(gen)<span class="comment"># or gen.send(None)</span></span><br><span class="line">output = gen.send(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;out&#x27;</span>, output)</span><br><span class="line">output = gen.send(<span class="string">&quot;World&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;out&#x27;</span>, output)</span><br><span class="line"><span class="comment"># print result:</span></span><br><span class="line"><span class="comment"># gen Hello</span></span><br><span class="line"><span class="comment"># out Hello</span></span><br><span class="line"><span class="comment"># gen World</span></span><br><span class="line"><span class="comment"># out World</span></span><br></pre></td></tr></table></figure></li><li><p><code>generator.throw(AnyException)</code> allows generator to throw an Exception, and <code>generator.close()</code> can stop the generator.</p></li></ul></blockquote><h4 id="Coroutine"><a href="#Coroutine" class="headerlink" title="Coroutine"></a>Coroutine</h4><p><strong>Coroutines</strong> are implemented using generator functions and the <code>yield</code> statement. The principle of coroutines is as follows:</p><ol><li><em>Coroutine Function Definition</em>: Define a generator function as a coroutine function. This function can use the <code>yield</code> statement to specify suspension points, where it pauses execution and returns a value to the caller.</li><li><em>Coroutine Initialization</em>: Create a coroutine object by calling the coroutine function.</li><li><em>Coroutine Iteration</em>: Use the <code>next()</code> function or the <code>.send()</code> method of the coroutine object to iterate and execute the coroutine. When the coroutine encounters a <code>yield</code> statement, it pauses execution and returns the result to the caller.</li><li><em>Coroutine Resumption</em>: When the caller sends a value to the coroutine (using the <code>.send()</code> method), the coroutine resumes execution from the last paused position and uses the sent value as the result of the <code>yield</code> expression.</li><li><em>Coroutine Termination</em>: When the coroutine reaches the end of the function or encounters a <code>StopIteration</code> exception, the coroutine terminates. Further calls to the <code>.send()</code> method on the coroutine object will raise a <code>StopIteration</code> exception.</li></ol><blockquote><p>Coroutines allow achieving concurrent execution without the need for multiple threads or processes. Coroutines can switch between different execution paths, enabling efficient asynchronous programming. Coroutines can also delegate to other coroutines using the <code>yield from</code> statement, enabling more complex cooperation and task decomposition.</p><p><strong>Python provides the <code>asyncio</code> module to support coroutine programming, where the <code>async</code> and <code>await</code> keywords offer a more concise syntax for defining and managing coroutines. With <code>asyncio</code>, it becomes easy to write asynchronous programs and handle tasks like I&#x2F;O operations, network communication, and more.</strong></p><p>It’s important to note that coroutines run in a single thread, so their performance may not be as good as multi-threading or multiprocessing when it comes to CPU-bound tasks. <strong>However, in I&#x2F;O-bound tasks, coroutines shine because they can effectively utilize the waiting time for I&#x2F;O to execute other tasks.</strong></p></blockquote><h4 id="Async-x2F-Await"><a href="#Async-x2F-Await" class="headerlink" title="Async&#x2F;Await"></a>Async&#x2F;Await</h4><ol><li><p><strong><code>async def</code></strong> is a keyword combination used in Python to <strong>define asynchronous functions</strong>. An <strong>asynchronous function</strong> is a special type of function <strong>that can contain <code>await</code> expressions</strong>, <strong>which suspend the execution of the function and wait for the completion of asynchronous operations</strong>.</p><p>Here is a example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define an asynchronous function</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">async_func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)  <span class="comment"># Suspend function execution using await, waiting for the completion of an asynchronous operation</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;End&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the asynchronous function in an event loop</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">await</span> async_func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create an event loop and run the main function</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(main())</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure></li><li><p><strong><code>await</code></strong> is a keyword used to suspend the execution of an asynchronous function and wait for the completion of an asynchronous operation. <strong><code>await</code> can only be used within an asynchronous context and is typically used in conjunction with <code>async def</code>.</strong></p><p>The general usage of <code>await</code> is as follows:</p><ul><li><p>Use <code>await</code> within an asynchronous function or coroutine to suspend its execution and wait for the completion of an asynchronous operation. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">async_func</span>():</span><br><span class="line">    result = <span class="keyword">await</span> async_operation()  <span class="comment"># 等待 async_operation() 异步操作的完成</span></span><br><span class="line">    <span class="comment"># 继续异步操作，使用异步操作的结果 result</span></span><br></pre></td></tr></table></figure><blockquote><p> <em><strong>Note that <code>await</code> can only be used within asynchronous functions or coroutines. It is not valid to use <code>await</code> in synchronous code.</strong></em></p></blockquote></li><li><p>Typically, <code>await</code> is followed by an awaitable object, such as an asynchronous function, coroutine, asynchronous iterator, etc. These awaitable objects must implement specific protocols, which include methods like <code>__await__()</code> or <code>__aiter__()</code>. The <code>await</code> expression invokes these methods to obtain an iterator or a context manager from the awaitable object and waits for its completion.</p><p>Here are some common awaitable objects:</p><ul><li><em>Asynchronous functions or coroutines</em>: Use <code>await</code> to wait for the execution of an asynchronous function or coroutine to complete.</li><li>Asynchronous generators: Use <code>await</code> to iterate over asynchronous generators and wait for each generated value.</li><li><em>Asynchronous iterators</em>: Use <code>await</code> to iterate over asynchronous iterators and wait for each iteration value.</li><li><em>Asynchronous context managers</em>: Use <code>await</code> to enter and exit the context of an asynchronous context manager.</li></ul><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">async_func</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> async_context_manager() <span class="keyword">as</span> cm:</span><br><span class="line">        <span class="keyword">await</span> cm.do_something()  <span class="comment"># Wait for the completion of the asynchronous context manager</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">for</span> item <span class="keyword">in</span> async_iterator():</span><br><span class="line">        <span class="keyword">await</span> process_item(item)  <span class="comment"># Wait for the completion of each item generated by the asynchronous iterator</span></span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;GIL-Global-Interpreter-Lock&quot;&gt;&lt;a href=&quot;#GIL-Global-Interpreter-Lock&quot; class=&quot;headerlink&quot; title=&quot;GIL (Global Interpreter Lock)&quot;&gt;&lt;/a&gt;GIL</summary>
      
    
    
    
    <category term="languages" scheme="https://stu-yue.github.io/categories/languages/"/>
    
    <category term="python" scheme="https://stu-yue.github.io/categories/languages/python/"/>
    
    
    <category term="python" scheme="https://stu-yue.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Memo | Optimization Algorithm in Machine Learning</title>
    <link href="https://stu-yue.github.io/jottings/mathematics/memo_optimization_alg/"/>
    <id>https://stu-yue.github.io/jottings/mathematics/memo_optimization_alg/</id>
    <published>2023-08-05T14:56:53.000Z</published>
    <updated>2023-11-13T10:46:27.185Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Reproduced in <a href="https://zhuanlan.zhihu.com/p/42689565">The Summary of Optimization Algorithm in ML</a></p></blockquote><p>For machine learning algorithms with diverse forms and characteristics, we have various optimization algorithms suitable for optimizing their objective functions. Apart from a few problems that can be solved using <strong>Brute Force Search</strong> to obtain the optimal solution, we can categorize the optimization algorithms used in machine learning into two types: </p><ul><li><p><strong>Analytical Solutions</strong>: <em><strong>These algorithms aim to find the optimal solution to the objective function by solving mathematical equations or performing algebraic manipulations. They often involve setting derivatives or gradients to zero and solving the resulting equations</strong>.</em> Analytical solutions are typically used for linear regression, logistic regression, and certain types of optimization problems with closed-form solutions.</p></li><li><p><strong>Numerical Optimization</strong>: <em><strong>These algorithms iteratively search for the optimal solution by evaluating the objective function at different points in the search space. They do not rely on explicit mathematical equations or derivatives</strong></em>. Numerical optimization methods include gradient-based algorithms like gradient descent and its variants, Newton’s method, stochastic gradient descent, and quasi-Newton methods. </p><ul><li><p><strong>Global Optimization Methods:</strong> </p><ul><li><strong>Heuristic Algorithm, Simulated Annealing, Particle Swarm Optimization</strong>, etc.</li></ul></li><li><p><strong>Local Optimization Methods:</strong> </p><ul><li><p><strong>Gradient Based:</strong> </p><ul><li><p><strong>First Order Derivative:</strong> (Jacobian)</p><ul><li><p><strong>Gradient Descent:</strong> $\theta &#x3D; \theta - \eta \cdot\nabla J(\theta)$</p><ul><li>whereas Standard Gradient Descent will only converge to the minimum of the basin as mentioned above.</li></ul></li><li><p><strong>SGD</strong>: $\theta &#x3D; \theta - \eta \cdot \nabla J(\theta;x_i;y_i)$;</p><ul><li>frequent updates, parameters updates have high variance and causes the Loss function to fluctuate to different intensities;</li><li>helps us <strong>discover new and possibly better local minima</strong>;</li><li>it ultimately <strong>complicates the convergence to the exact minimum</strong> and will <strong>keep overshooting</strong> due to the frequent fluctuations;</li></ul></li><li><p><strong>Mini-Batch GD</strong>: ultimately lead us to a much better and stable convergence;</p><ul><li>make use of highly optimized matrix optimizations common to state-of-the-art deep learning libraries that make computing the gradient w.r.t. a mini-batch very efficient.</li></ul></li><li><p><strong>Challenges in GD</strong>: </p><ol><li>Choosing a proper learning rate can be difficult;</li><li>Additionally, the same learning rate applies to all parameter updates. If our data is sparse and our features have very different frequencies, we might not want to update all of them to the same extent, but perform a larger update for rarely occurring features.</li><li>avoiding getting trapped in their numerous <strong>sub-optimal local minima</strong>; Actually, Difficulty arises in fact not from local minima but from *<strong>saddle points*</strong>, i.e. <em>points where one dimension slopes up and another slopes down</em>. These saddle points are usually surrounded by a plateau of the same error, which makes it notoriously hard for SGD to escape, as the gradient is close to zero in all dimensions.</li></ol></li><li><p><strong>Momentum</strong>: $V(t) &#x3D; \gamma\cdot V(t-1)+\eta \cdot\nabla J(\theta)$, then $\theta &#x3D; \theta - V(t)$;</p><ul><li>leads to faster and stable convergence; reduced oscillations</li><li>Problem: What actually happens is that as we reach the minima i.e the lowest point on the curve ,the <strong>momentum</strong> is pretty high and it doesn’t knows to *<strong>slow*</strong> <em>down</em> at that point due to the high momentum <em>which could cause it to miss the minima entirely and continue movie up.</em></li></ul></li><li><p><strong>Nesterov accelerated gradient (NAG)</strong>: $V(t) &#x3D; \gamma\cdot V(t-1)+\eta\cdot\nabla J(\theta - \gamma\cdot V(t-1))$, then $\theta &#x3D; \theta - V(t)$；</p><ul><li>In the method he suggested we first make <strong>a big jump based on out previous momentum</strong> then calculate the Gradient and <strong>then make an correction which results in an parameter update</strong>. Now this anticipatory update prevents us to go too fast and not miss the minima and makes it more responsive to changes.</li><li>We know that we will use our momentum term <strong>γV(t−1)</strong> to move the parameters <strong>θ</strong>. Computing <strong>θ−γV(t−1)</strong> thus gives us an <em>approximation of the next position of the parameters</em> <em>which gives us a</em> <em>rough idea where our parameters are going to be</em>. <strong>We can now effectively look ahead by calculating the gradient not w.r.t. to our current parameters θ but w.r.t. the approximate future position of our parameters</strong></li></ul></li><li><p><strong>AdaGrad</strong>: </p><ul><li>$\theta_{t+1,i} &#x3D; \theta_{t,i}-\frac{\eta}{\sqrt{G_{t,i}+\epsilon}}\cdot g_{t,i}$,  $G_{t,i} &#x3D; G_{t,i}+\nabla_{\theta_{t,i}}J(\theta)$;</li><li>allows the learning Rate <strong>$-\eta$</strong> to <strong>adapt</strong> based on the parameters. So it makes big updates for infrequent parameters and small updates for frequent parameters. For this reason, it is well-suited for dealing with sparse data.</li><li>At the beginning, <strong>AdaGrad</strong> has an incentive effect on convergence, and then slowly becomes penalty convergence, and the updating speed is getting slower and slower</li><li>Problem:  its learning rate $-\eta$ is always Decreasing and decaying.<ul><li>Due to: the accumulation of each squared Gradients in the denominator , since every added term is positive. This in turn causes the <em>learning rate to shrink and eventually become so small,</em> <strong>that the model just stops learning entirely and stops acquiring new additional knowledge.</strong></li><li>This problem of <strong>Decaying learning Rate</strong> is Rectified in another algorithm called <strong>AdaDelta.</strong></li></ul></li></ul></li><li><p><strong>AdaDelta</strong>: </p><ul><li>$g(t)$ is gradient of mini-batch;</li><li><strong>RMSprop</strong>: <ul><li>$E[g^2]<em>t &#x3D; \gamma E[g^2]</em>{t-1}+(1-\gamma)g^2_t$, </li><li>$\Delta\theta_t &#x3D; -\frac{\eta}{\sqrt{E[g^2]_t+\epsilon}}\odot g_t &#x3D; -\frac{\eta}{RMS[g]_t}g_t$,</li><li>$\theta_{t+1} &#x3D; \theta_t + \Delta\theta_t$</li></ul></li><li>The authors note that the <strong>units in this update (as well as in SGD, Momentum, or Adagrad) do not match</strong>, i.e. the update should have the same hypothetical units as the parameter. To realize this, they first define another exponentially decaying average, this time not of squared gradients but of squared parameter updates;</li><li>Thus, they use $RMS[\Delta\theta]_{t-1}$ instead of hyperparameter $\eta$ ;<ul><li>$RMS[\Delta\theta]<em>t &#x3D; \sqrt{E[\Delta\theta^2]</em>{t-1}+\epsilon}$</li><li>$E[\Delta\theta^2]<em>t &#x3D; \gamma E[\Delta\theta^2]</em>{t-1}+(1-\gamma)\Delta\theta^2_t$</li></ul></li><li>Instead of accumulating all previous squared gradients, *<strong>AdaDelta*</strong> limits the window of accumulated past gradients to some fixed size <strong>w</strong>.</li><li>Another thing with AdaDelta is that we don’t even need to set a default learning rate.</li></ul><blockquote><p><strong>What improvements we have done so far——</strong></p><ol><li>We are calculating <em>different learning Rates</em> for each parameter.</li><li>We are also calculating <em>momentum</em>.</li><li>Preventing <strong>Vanishing(decaying) learning Rates</strong>.</li></ol><p><em>Since we are calculating individual</em> <strong>learning rates</strong> <em>for each parameter , why not calculate individual</em> *<strong>momentum*</strong> <em>changes for each parameter and store them separately. This is where a new modified technique and improvement comes into play called as</em> *<strong>Adam.*</strong></p></blockquote></li><li><p><strong>Adam</strong>: Adaptive Moment Estimation (Adam) is another method that computes adaptive learning rates for each parameter. In addition to storing an exponentially decaying average of past squared gradients like <strong>AdaDelta</strong> ,<strong>Adam</strong> *also keeps an exponentially decaying average of past gradients <strong>M(t)</strong>, similar to momentum*:</p><ul><li>$m_t &#x3D; \beta_1m_{t-1}+(1-\beta_1)g_t, \quad v_t &#x3D; \beta_2v_{t-1}+(1-\beta_2)g^2_t$<ul><li>$m_t &#x3D; (1-\beta_1)\sum_{i&#x3D;1}^{t}\beta^{t-i}_{1}g_i$, </li><li>sum all weights of $g_i$ is $(1-\beta_1)\sum_{i&#x3D;1}^{t}\beta_1^{t-i} &#x3D; 1-\beta^t_1$</li></ul></li><li>To rectify the bias to 1, divide $(1-\beta_1^t)$ respectively,   $\hat m_t &#x3D; \frac{m_t}{1-\beta_1^t}, \quad \hat v_t &#x3D; \frac{v_t}{1-\beta_2^t}$,</li><li>$\theta_{t+1} &#x3D; \theta_t - \frac{\eta}{\sqrt{\hat v_t}+\epsilon}\hat m_t$</li><li>指数加权移动平均$m_t$，按元素平方的指数加权移动平均$v_t$</li></ul></li></ul></li><li><p><strong>Second Order Derivative:</strong> (Hessian)</p><ul><li><strong>Newton Method:</strong></li></ul></li></ul></li><li><p><strong>Divide and Conquer:</strong> </p><ul><li><strong>Coordinate Descent:</strong> </li><li><strong>SMO Algorithm:</strong> </li><li><strong>Staged Optimization:</strong></li></ul></li><li><p><strong>Dynamic Programming:</strong></p></li></ul></li></ul></li></ul><p>The following picture illustrates the organization of this memorandum: </p><img src="./memo_optimization_alg/overview.png" style="zoom:100%"><img src="./overview.png" style="zoom:100%"><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><ol><li><a href="https://medium.com/@anishsingh20/types-of-optimization-algorithms-used-in-neural-networks-and-ways-to-optimize-gradient-95ae5d39529f">Types of Optimization Algorithms used in Neural Networks and Ways to Optimize Gradient Descent</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Reproduced in &lt;a href=&quot;https://zhuanlan.zhihu.com/p/42689565&quot;&gt;The Summary of Optimization Algorithm in ML&lt;/a&gt;&lt;/p&gt;
&lt;/blockquo</summary>
      
    
    
    
    <category term="mathematics" scheme="https://stu-yue.github.io/categories/mathematics/"/>
    
    
    <category term="optimization" scheme="https://stu-yue.github.io/tags/optimization/"/>
    
    <category term="ml" scheme="https://stu-yue.github.io/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>Memo | Exploring Linux Files and Directories</title>
    <link href="https://stu-yue.github.io/jottings/languages/shell/memo_exploring_os/"/>
    <id>https://stu-yue.github.io/jottings/languages/shell/memo_exploring_os/</id>
    <published>2023-08-05T02:56:53.000Z</published>
    <updated>2023-11-11T16:34:45.521Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s start by learning some commands that are helpful for researching Linux systems.</p><ul><li><p><code>type</code>: To explain how to interpret a command name.</p></li><li><p><code>which</code>: To show which executable program will be executed.</p></li><li><p><code>man</code>: To show command manual.</p></li><li><p><code>apropos</code>: To display a list of appropriate commands.</p></li><li><p><code>info</code>: To display the command info.</p></li><li><p><code>alias</code>: To create an alias for the command</p><ul><li><code>unalias</code>: To cancel a alias for the command.</li></ul></li><li><p><code>ls</code>: To list the files and directories in the current directory.</p><ul><li><code>-a</code>, <code>-d</code>, <code>-h</code>, <code>-r/--reverse</code>, <code>-l</code>, <code>-S[sort by size]</code>, <code>-t[sort by modification time]</code></li></ul></li><li><p><code>file</code>: To determine the file type.</p><ul><li><code>file filename</code> is OK.</li></ul></li><li><p><code>less</code>: To browse the content of a file,  specifically, less is an improved version of <code>more</code>.</p><ul><li><p><code>less filename</code> is OK.</p><table><thead><tr><th align="left">Commands</th><th>Behavior</th></tr></thead><tbody><tr><td align="left">Page UP or b</td><td>Backward one window</td></tr><tr><td align="left">Page Down or space</td><td>Forward one window</td></tr><tr><td align="left">UP Arrow</td><td>Backward one line</td></tr><tr><td align="left">Down Arrow</td><td>Forward one line</td></tr><tr><td align="left">[N]G</td><td>Go to last line in file (or N lines)</td></tr><tr><td align="left">[N]g</td><td>Go to first line in file (or N lines)</td></tr><tr><td align="left">&#x2F;characters</td><td>Search forward for matching line</td></tr><tr><td align="left">n</td><td>Repeat previous search</td></tr><tr><td align="left">h</td><td>Display help.</td></tr></tbody></table></li></ul></li><li><p><code>cp</code>： </p><table><thead><tr><th>Options</th><th>Implication</th></tr></thead><tbody><tr><td>-a, –archive</td><td>Copy files and directories, along with their attributes, including ownership and permissions</td></tr><tr><td>-i, –interactive</td><td>Prompt the user for confirmation before overwriting an existing file (default disable)</td></tr><tr><td>-r, –recursive</td><td></td></tr><tr><td>-u, –update</td><td>Update the content not already present in the original</td></tr><tr><td>-v, –verbose</td><td>Display detailed command operation information</td></tr></tbody></table></li><li><p><code>mv</code>:</p><table><thead><tr><th>Options</th><th>Implication</th></tr></thead><tbody><tr><td>-i, –interactive</td><td>Prompt the user for confirmation before overwriting an existing file (default disable)</td></tr><tr><td>-u, –update</td><td>Update the content not already present in the original</td></tr><tr><td>-v, –verbose</td><td>Display detailed command operation information</td></tr></tbody></table></li><li><p><code>rm</code>:</p><table><thead><tr><th>Options</th><th>Implication</th></tr></thead><tbody><tr><td>-f, –force</td><td>Directly delete the file even if its attributes are read-only, without requiring individual confirmation</td></tr><tr><td>-i, –interactive</td><td>Prompt the user for confirmation before overwriting an existing file (default disable)</td></tr><tr><td>-r, –recursive</td><td></td></tr><tr><td>-v, –verbose</td><td>Display detailed command operation information</td></tr></tbody></table></li><li><p><code>ln</code>:</p><p><code>ln file hard_link</code> creates a hard link, and <code>ln -s item soft_link</code> creates a soft link.</p><ul><li><p><strong>Hard Links:</strong></p><ul><li>A hard link is a direct reference to the same physical location of a file on the storage device.</li><li>It creates an additional entry in the file system that points to the same <strong>inode</strong> (data structure representing a file) as the original file.</li><li>Changes made to either the original file or the hard link are reflected in both, as they refer to the same underlying data.</li><li>Hard links cannot reference directories or files on different file systems or partitions.</li></ul></li><li><p><strong>Soft Links:</strong></p><ul><li>A symbolic link is a special file that contains a path pointing to another file or directory.</li><li>It acts as a pointer or shortcut to the target file or directory.</li><li>Symbolic links are independent files and have their own <strong>inodes</strong>.</li><li>Modifying the original file or symbolic link does not affect each other, as they are separate entities.</li><li>Symbolic links can reference directories or files on different file systems or partitions.</li></ul><blockquote><p><strong>Soft links can be created to a non-existent filename (of course, if you use <code>vi</code> on this soft link file, Linux will automatically create a new file named “filename”). Hard links cannot be created in such cases since the file must already exist, and the inode must exist as well.</strong></p><p><strong>Using <code>ls -li</code> can view the inodes of the files.</strong> <strong><code>drwxrwxr-x 2 </code>‘s 2</strong> is the number of hard links to a file. Besides, the usual number of inodes for a directory is 2 (include parent directory and itself <code>.</code>)</p></blockquote></li></ul></li><li><p><code>tar</code>: To create archive files (usually with the <code>.tar</code> extension) and <em>archive</em> files.</p><ul><li><p><strong>create archive file</strong>: <code>tar -cvf archive.tar file1 file2 directory/</code></p><ul><li><code>-c</code> (<strong>c</strong>reate archive file), <code>-v</code> (view details), <code>-f</code> (specify archive file)</li></ul></li><li><p><strong>extract archive file</strong>: <code>tar -xvf archive.tar</code></p><ul><li><code>-x</code> (extract the content of archive files)</li></ul></li><li><p><strong>compress archive file</strong>: <code>tar -czvf archive.tar.gz directory/</code></p><ul><li><code>-z</code> (use <code>gzip</code> to compress)</li></ul></li><li><p><strong>decompress archive file</strong>: <code>tar -xzvf archive.tar.gz</code>, <code>tar -xjvf archive.tar.bz2</code></p></li><li><p><strong>list the content of archive files</strong>: <code>tar -tvf archive.tar</code></p></li><li><p><code>tar -tf test.tar</code>: view package structure</p></li><li><p><code>tar -C dest_dir/ -x[z]vf test.tar[.gz] specified_dir_or_file...[path in -tf shows]</code>: unzip the specified file&#x2F;directory in the package;</p></li></ul><blockquote><p><code>unzip archive.zip -d dest_dir</code></p></blockquote></li><li><p><code>split</code> and <code>cat</code>: split the <code>tar.gz</code> into small files,</p><ul><li><p><code>split</code>: <code>split -6/-b 3M -d -a 2 cud_test.tar.gz[dst_filename] cud_test.tar.gz_[out_filename]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cud_test.tar.gz_00</span><br><span class="line">cud_test.tar.gz_01</span><br><span class="line">cud_test.tar.gz_02</span><br><span class="line">cud_test.tar.gz_03</span><br><span class="line">cud_test.tar.gz_04</span><br></pre></td></tr></table></figure><ul><li>-&lt;line_N&gt; : split into a file every N lines</li><li>-b &lt;bytes&gt; : split into a file every N bytes</li><li>-d : specify the generated split file suffix in numeric form </li><li>-a x : set the length of the sequence (suffix digits)</li></ul></li><li><p><code>cat cud_test.tar.gz_* &gt; cud_test.tar.gz</code> : to concatenate split files;</p></li></ul></li></ul><p>Before starting using commands, let’s introduce <strong>wildcards</strong> that provide special characters to help you quickly specify a group of filenames.</p><table><thead><tr><th>Wildcard</th><th>Implication</th></tr></thead><tbody><tr><td>*</td><td>match any sequence of characters, including zero characters.</td></tr><tr><td>?</td><td>match any single character (excluding zero character)</td></tr><tr><td>[character]</td><td>match any single character within the specified character set</td></tr><tr><td>[!character]</td><td>match any single character without the specified character set</td></tr><tr><td>[[:class:]]</td><td>match any single character within the specified character class</td></tr></tbody></table><p>The following table lists the most commonly used character classes.</p><table><thead><tr><th>Character Class</th><th>Implication</th></tr></thead><tbody><tr><td>[:alnum:]</td><td>match any single letter or digit</td></tr><tr><td>[:alpha:]</td><td>match any single letter</td></tr><tr><td>[:digit:]</td><td>match any single digit</td></tr><tr><td>[:lower:]</td><td>match any single lower letter</td></tr><tr><td>[:upper:]</td><td>match any single upper letter</td></tr></tbody></table><p>There are some examples constructed with wildcard:</p><p><code>*</code>, <code>g*</code>, <code>b*.txt</code>, <code>Data???</code>, <code>[abc]*</code>, <code>BACKUP.[0-9][0-9][0-9]</code>, <code>[[:upper:]]</code>, <code>[![:digit:]]*</code>, <code>*[[:lower:]123]</code></p><h4 id="Service-and-Systemctl"><a href="#Service-and-Systemctl" class="headerlink" title="Service and Systemctl"></a>Service and Systemctl</h4><ul><li><p><code>systemctl</code> is a system service manager that actually combines the <code>service</code> and <code>chkconfig</code> commands together.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">systemctl is-enabled httpd.service</span><br><span class="line">systemctl status httpd.service</span><br><span class="line">systemctl list-unit-files --<span class="built_in">type</span>=service</span><br><span class="line">systemctl restart httpd.service</span><br><span class="line">systemctl stop httpd.service</span><br><span class="line">systemctl reload httpd.service</span><br><span class="line">systemctl restart httpd.service</span><br><span class="line">systemctl <span class="built_in">enable</span> httpd<span class="comment"># bootstrap</span></span><br><span class="line">systemctl <span class="built_in">disable</span> httpd<span class="comment"># not bootstrap</span></span><br></pre></td></tr></table></figure></li><li><p><code>service</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">service ssh start</span><br><span class="line">service ssh stop</span><br><span class="line">service ssh restart</span><br><span class="line">service ssh status</span><br><span class="line">service --status-all</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Let’s start by learning some commands that are helpful for researching Linux systems.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;type&lt;/code&gt;: To explain how t</summary>
      
    
    
    
    <category term="languages" scheme="https://stu-yue.github.io/categories/languages/"/>
    
    <category term="shell" scheme="https://stu-yue.github.io/categories/languages/shell/"/>
    
    
    <category term="shell" scheme="https://stu-yue.github.io/tags/shell/"/>
    
    <category term="linux" scheme="https://stu-yue.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Hot Points</title>
    <link href="https://stu-yue.github.io/jottings/tidbits/hot_points/"/>
    <id>https://stu-yue.github.io/jottings/tidbits/hot_points/</id>
    <published>2023-07-22T12:00:53.000Z</published>
    <updated>2023-10-28T05:01:11.823Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Generate random numbers by reading <strong>thermal noise</strong> on CPU pins.</p></li><li><p><strong>Hot Plug</strong>, refers to the operation of inserting&#x2F;removing a device while it is running. In contrast, <strong>Cold Plug</strong> means do above operation while the device is powered off.</p></li><li><p>Software version’s explanation:</p><table><thead><tr><th>Version</th><th>Description</th></tr></thead><tbody><tr><td>Snapshot</td><td>Development version</td></tr><tr><td>Alpha</td><td>Internal beta</td></tr><tr><td>Beta</td><td>Public beta</td></tr><tr><td>Pre (M)</td><td>Similar to Alpha, sometimes subdivided into M_(Milestone) version</td></tr><tr><td>RC(Release Candidate)</td><td>During Beta stage, new features will continue to be added, but once the RC version is reached, there will mainly be on debugging and issue resolution.</td></tr><tr><td>GA(General Availability)</td><td>Some software may be labeled as “stable” or “production”.</td></tr><tr><td>Release&#x2F;Stable</td><td></td></tr><tr><td>Current</td><td>The latest version, but no necessarily a stable one.</td></tr><tr><td>Eval</td><td>There may be a monthly or fixed time limit for usage.</td></tr></tbody></table></li><li><p><strong>Declarative Programming</strong> expresses the logic of a computation without describing its control flow.</p><blockquote><p>Many languages that apply this style attempt to minimize or eliminate side effects by describing <em>what</em> the  program must accomplish in terms of the problem domain (what to do), rather than specifying all the details of <em>how</em> the program should achieve the result (how to do).</p></blockquote><p><strong>Imperative Programming</strong> uses statements that change a program’s state. </p><blockquote><p>Imperative Programming focuses on describing <em>how</em> a program operates step by step, rather than on high-level descriptions of its expected results.</p></blockquote></li><li><p><strong>KVM</strong>: Kernel-based Virtual Machine, is a virtualization infrastructure used in the Linux kernel to turn the Linux kernel into a <strong>hypervisor</strong>;</p><ul><li><strong>Hypervisor</strong>: creates and runs virtual machines, sometimes called a virtual machine monitor (VMM), like a meta-OS; </li><li>IT resource pooled, OS and hardware decoupled, allocated according to needs;</li><li>A computer on which a hypervisor runs one or more virtual machines is called a <strong>host machine</strong>, and <strong>each virtual machine is called a guest machine</strong>;</li><li><strong>(Type 1) Native or bare mental hypervisor:</strong> runs directly on the host’s hardware to manage guest operating systems. It takes the place of a host operating system and VM resources are scheduled directly to the hardware by the hypervisor. <ul><li>This type of hypervisor is most common in an enterprise data center or other server-based environments.</li><li>KVM, Microsoft Hyper-V, and VMware vSphere are examples of a type 1 hypervisor. KVM was merged into the Linux kernel in 2007, so if you’re using a modern version of <a href="https://www.redhat.com/en/topics/linux">Linux</a>, you already have access to KVM.</li></ul></li><li><strong>(Type 2) Hosted hypervisor:</strong> run on a conventional operating system as a software layer or application.<ul><li>It works by abstracting guest operating systems from the host operating system. VM resources are scheduled against a host operating system, which is then executed against the hardware.</li><li>A type 2 hypervisor is better for individual users who want to run multiple operating systems on a personal computer.</li><li>VMware Workstation and Oracle VirtualBox are examples of a type 2 hypervisor.</li></ul></li></ul><img src="./hot_points/hypervisor_type.png" style="zoom:30%"><img src="./hypervisor_type.png" style="zoom:50%"><ul><li><strong>(Emulator) The difference with the Hypervisor is that the Hypervisor runs the same VM and host CPU architecture, while the Emulator can be used to run systems or programs on other hardware platforms (arm, mips, x86).</strong><ul><li>When used as a machine emulator, QEMU can run OSes and programs made for one machine (e.g. an ARM board) on a different machine (e.g. your x86 PC). By using dynamic translation, it achieves very good performance;</li><li>QEMU can use other hypervisors like <a href="https://wiki.archlinux.org/title/Xen">Xen</a> or <a href="https://wiki.archlinux.org/title/KVM">KVM</a> to use CPU extensions (<a href="https://en.wikipedia.org/wiki/Hardware-assisted_virtualization">HVM</a>) for virtualization. When used as a virtualizer, QEMU achieves near native performances by executing the guest code directly on the host CPU.</li><li>When QEMU is used in conjunction with KVM, KVM provides hardware virtualization support, while QEMU is responsible for virtual machine simulation and management. In this configuration, <strong>KVM functions as a Hypervisor to directly interact with hardware and provide high-performance virtualization support</strong>, while <strong>QEMU runs on the upper layer of KVM and is responsible for VM simulation and management</strong>, including device simulation, VM creation, start, and stop.</li><li>So while QEMU is not a traditional Hypervisor on its own, when used in conjunction with KVM, QEMU can work with KVM to provide a complete virtualization solution and act as part of a Hypervisor</li></ul></li></ul></li><li><hr></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Generate random numbers by reading &lt;strong&gt;thermal noise&lt;/strong&gt; on CPU pins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hot Plug&lt;/strong&gt;, refer</summary>
      
    
    
    
    <category term="tidbits" scheme="https://stu-yue.github.io/categories/tidbits/"/>
    
    
    <category term="points" scheme="https://stu-yue.github.io/tags/points/"/>
    
  </entry>
  
</feed>
