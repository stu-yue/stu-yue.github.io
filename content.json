{"pages":[{"title":"CATEGORIES","date":"2023-07-13T06:47:46.496Z","path":"categories/index.html","text":""},{"title":"ABOUT","date":"2023-08-07T08:07:00.552Z","path":"about/index.html","text":"üë©‚Äçüíª: A CODER WITH GREEN HANDS üí°: THINK TWICE, CODE ONCE! üéØ: GOTO NIPS, MSRA AND BE REASSURED ‚ù£ÔºöSONGXUSHIQI 12345// life mottoif (sad() == true) &#123; sad().stop(); beAwesome();&#125;"},{"title":"TAGS","date":"2023-07-13T06:48:03.646Z","path":"tags/index.html","text":""}],"posts":[{"title":"Memo | Optimization Algorithm in Machine Learning","date":"2023-08-05T14:56:53.000Z","path":"jottings/mathematics/memo_optimization_alg/","text":"Reproduced in The Summary of Optimization Algorithm in ML For machine learning algorithms with diverse forms and characteristics, we have various optimization algorithms suitable for optimizing their objective functions. Apart from a few problems that can be solved using Brute Force Search to obtain the optimal solution, we can categorize the optimization algorithms used in machine learning into two types: Analytical Solutions: These algorithms aim to find the optimal solution to the objective function by solving mathematical equations or performing algebraic manipulations. They often involve setting derivatives or gradients to zero and solving the resulting equations. Analytical solutions are typically used for linear regression, logistic regression, and certain types of optimization problems with closed-form solutions. Numerical Optimization: These algorithms iteratively search for the optimal solution by evaluating the objective function at different points in the search space. They do not rely on explicit mathematical equations or derivatives. Numerical optimization methods include gradient-based algorithms like gradient descent and its variants, Newton‚Äôs method, stochastic gradient descent, and quasi-Newton methods. Global Optimization Methods: Heuristic Algorithm, Simulated Annealing, Particle Swarm Optimization, etc. Local Optimization Methods: Gradient Based: First Order Derivative: Gradient Descent: Second Order Derivative: Newton Method: Divide and Conquer: Coordinate Descent: SMO Algorithm: Staged Optimization: Dynamic Programming: The following picture illustrates the organization of this memorandum:","tags":[{"name":"optimization","slug":"optimization","permalink":"https://stu-yue.github.io/tags/optimization/"},{"name":"ml","slug":"ml","permalink":"https://stu-yue.github.io/tags/ml/"}],"categories":[{"name":"mathematics","slug":"mathematics","permalink":"https://stu-yue.github.io/categories/mathematics/"}]},{"title":"Memo | Exploring Linux Files and Directories","date":"2023-08-05T02:56:53.000Z","path":"jottings/languages/shell/memo_exploring_os/","text":"Let‚Äôs start by learning some commands that are helpful for researching Linux systems. ls: To list the files and directories in the current directory. -a, -d, -h, -r/--reverse, -l, -S[sort by size], -t[sort by modification time] file: To determine the file type. file filename is OK. less: To browse the content of a file, specifically, less is an improved version of more. less filename is OK. Commands Behavior Page UP or b Backward one window Page Down or space Forward one window UP Arrow Backward one line Down Arrow Forward one line [N]G Go to last line in file (or N lines) [N]g Go to first line in file (or N lines) &#x2F;characters Search forward for matching line n Repeat previous search h Display help. cpÔºö Options Implication -a, ‚Äìarchive Copy files and directories, along with their attributes, including ownership and permissions -i, ‚Äìinteractive Prompt the user for confirmation before overwriting an existing file (default disable) -r, ‚Äìrecursive -u, ‚Äìupdate Update the content not already present in the original -v, ‚Äìverbose Display detailed command operation information mv: Options Implication -i, ‚Äìinteractive Prompt the user for confirmation before overwriting an existing file (default disable) -u, ‚Äìupdate Update the content not already present in the original -v, ‚Äìverbose Display detailed command operation information rm: Options Implication -f, ‚Äìforce Directly delete the file even if its attributes are read-only, without requiring individual confirmation -i, ‚Äìinteractive Prompt the user for confirmation before overwriting an existing file (default disable) -r, ‚Äìrecursive -v, ‚Äìverbose Display detailed command operation information ln: ln file hard_link creates a hard link, and ln -s item soft_link creates a soft link. Hard Links: A hard link is a direct reference to the same physical location of a file on the storage device. It creates an additional entry in the file system that points to the same inode (data structure representing a file) as the original file. Changes made to either the original file or the hard link are reflected in both, as they refer to the same underlying data. Hard links cannot reference directories or files on different file systems or partitions. Soft Links: A symbolic link is a special file that contains a path pointing to another file or directory. It acts as a pointer or shortcut to the target file or directory. Symbolic links are independent files and have their own inodes. Modifying the original file or symbolic link does not affect each other, as they are separate entities. Symbolic links can reference directories or files on different file systems or partitions. Soft links can be created to a non-existent filename (of course, if you use vi on this soft link file, Linux will automatically create a new file named ‚Äúfilename‚Äù). Hard links cannot be created in such cases since the file must already exist, and the inode must exist as well. Using ls -li can view the inodes of the files. drwxrwxr-x 2 ‚Äòs 2 is the number of hard links to a file. Besides, the usual number of inodes for a directory is 2 (include parent directory and itself .) Before starting using commands, let‚Äôs introduce wildcards that provide special characters to help you quickly specify a group of filenames. Wildcard Implication * match any sequence of characters, including zero characters. ? match any single character (excluding zero character) [character] match any single character within the specified character set [!character] match any single character without the specified character set [[:class:]] match any single character within the specified character class The following table lists the most commonly used character classes. Character Class Implication [:alnum:] match any single letter or digit [:alpha:] match any single letter [:digit:] match any single digit [:lower:] match any single lower letter [:upper:] match any single upper letter There are some examples constructed with wildcard: *, g*, b*.txt, Data???, [abc]*, BACKUP.[0-9][0-9][0-9], [[:upper:]], [![:digit:]]*, *[[:lower:]123]","tags":[{"name":"shell","slug":"shell","permalink":"https://stu-yue.github.io/tags/shell/"},{"name":"linux","slug":"linux","permalink":"https://stu-yue.github.io/tags/linux/"}],"categories":[{"name":"languages","slug":"languages","permalink":"https://stu-yue.github.io/categories/languages/"},{"name":"shell","slug":"languages/shell","permalink":"https://stu-yue.github.io/categories/languages/shell/"}]},{"title":"Hot Points","date":"2023-07-22T12:00:53.000Z","path":"jottings/tidbits/hot_points/","text":"Generate random numbers by reading thermal noise on CPU pins. Hot Plug, refers to the operation of inserting&#x2F;removing a device while it is running. In contrast, Cold Plug means do above operation while the device is powered off. Software version‚Äôs explanation: Version Description Snapshot Development version Alpha Internal beta Beta Public beta Pre (M) Similar to Alpha, sometimes subdivided into M_(Milestone) version RC(Release Candidate) During Beta stage, new features will continue to be added, but once the RC version is reached, there will mainly be on debugging and issue resolution. GA(General Availability) Some software may be labeled as ‚Äústable‚Äù or ‚Äúproduction‚Äù. Release&#x2F;Stable Current The latest version, but no necessarily a stable one. Eval There may be a monthly or fixed time limit for usage.","tags":[{"name":"points","slug":"points","permalink":"https://stu-yue.github.io/tags/points/"}],"categories":[{"name":"tidbits","slug":"tidbits","permalink":"https://stu-yue.github.io/categories/tidbits/"}]},{"title":"Summa | The Majority of Memory Categories","date":"2023-07-20T08:41:53.000Z","path":"jottings/architecture/summa_memory_categories/","text":"Reproduced in 8 types of memory every embedded engineer should know about! The majority of memory can be categorized as shown in the following picture: The real difference between primary and secondary memories is the speed&#x2F;volatility(without power) tradeoffs. Primary MemoryPrimary memory is very fast, but it cannot hold data without power. The popular name for Primary Memory is RAM, which has 2 most important types namely SRAM and DRAM. Bistable Circuit usually consists of two complementary transistors or other switching devices, one used to hold the circuit in one stable state and the other to switch the circuit to another stable state. The switch between these two states is triggered by the input signal. Bistable Circuit can store data. Latches and registers are bistable devices. SRAM is the use of bistable flip-flop to save information, as long as the power is not lost, the information is not lost. DRAM uses capacitors to store charge to store information, so data stored in the DRAM must be constantly refreshed every few milliseconds or else it will end up being erased. The action is taken care of by a special device named DRAM controllers. SRAM DRAM Construction Principle It uses a cross-coupled flip flop configuration of transistors It uses a capacitor transistor circuit to hold data Cost Relatively more expensive, it needs more transistors per bit of data it can store Relatively less expensive, as fewer transistors per bit of storage are needed Speed Faster Slower (capacitor charge and discharge time) Volatility As long as power is ON, it can store data since it uses no capacitors Data needs to be continuously refreshed (usually in the order of 4 times a second) since the capacitors leak power. Power consumption Less More Density Less dense (6 transistors, more area needed) Highly dense (1 pass transistor and 1 capacitor, easy to integrate) Addition components needed None DRAM controllers are needed to make it work like an SRAM. This controller offloads the data refreshing duties of a microprocessor and hence a DRAM coupled with a DRAM controller behaves more like an SRAM from the processor‚Äôs perspective. Application areas Cache memory (Ls2) Main memory (memory chips) NVRAM or Non Volatile Random Access Memory, is a special type of RAM that can store data permanently. It‚Äôs basically an SRAM with a power supply Secondary MemoryROM MASK ROM: The main characteristic of this device is the fact that the data is written onto the device as it gets manufactured and it is impossible to change them. This is done by designing the chip in such a manner so that it already contains the necessary data. In order to mass production, the manufacturer makes a ROM or EPROM with original data as a sample in advance, and then mass-produces the same ROM as the sample. This kind of ROM sample for mass production is the MASK ROM, and the data burned in the MASK ROM can never be modified. PROM stands for Programmable Read-Only Memory. These are programmable chips for user needs, the main characteristic being it can only be programmed one time. That is it cannot be erased or reprogrammed. They are also known as One Time Programmable devices or OTPs for short. EPROM stands for Erasable Programmable Read-Only Memory. These chips usually have a small glass window on top and if you expose them to direct sunlight(UV, ultraviolet) that will erase the chip‚Äôs data. They can then be programmed again with fresh data. Cons: Inconvenient, instability, can not be exposed to the light source otherwise easy to lead to data loss EEPROM stands for Electrically Erasable Programmable Read-Only Memory. These chips can be erased and reprogrammed using electricity as opposed to exposing them to UV rays as EPROMs. EEPROM can be erased and reprogrammed on a computer or dedicated device, generally plugging and playing. FLASH MEMORY The basic storage unit of flash memory is the transistor-based storage unit, and each storage unit can store 1 bit of data. Storage units are usually organized into a block, and each block contains thousands of storage units. Each storage unit has a floating gate to store electric charges. The state of a storage unit can be determined as ‚Äú1‚Äù or ‚Äú0‚Äù based on the amount of electric charges stored in the floating gate. The state of a storage unit is changed by injecting or extracting electrons into&#x2F;from the floating gate to modify the amount of electric charges stored in it. Flash memory uses Hot carrier injection(HCI) mechanism to write data. In simple terms, a certain storage unit is grounded at the source, a positive voltage is applied to its control gate, and a positive voltage is applied to the drain to generate a strong electric field between the source and drain. This will give electrons enough energy (hot carriers) to be attracted by the voltage at the control gate and injected into the floating gate. Afterwards, as the insulating material on the top and bottom of the floating gate is not conductive, these electrons are trapped in the floating gate and cannot escape. (Every time electrons enter and exit the surrounding silicon dioxide on the floating gate, it will cause aging[1]) To save cost, flash memory adopts page programming mode. Each page contains a certain number of storage units, and all units in a page are written at the same time. Cons: Flash memory has the issue of wear-out (write&#x2F;erase endurance limits), which is usually mitigated by disabling bad blocks, and then reducing usable capacity. USB flash disk, namely ‚ÄúU disk‚Äù, is a new generation of storage devices based on USB interface and flash memory chip as storage medium. It is basically composed of five parts: USB port, main control chip, flash memory chip, PCB backboard, outer package. USB flash drives, SD cards, and SSDs are a type of storage device that uses flash memory chips as the storage medium. They are primarily composed of a controller (main control) and flash memory chips, and have no mechanical structure, consisting purely of electronic circuitry. They are resistant to physical shocks and impacts. The controller manages data storage and other functions. Even after power loss, data remains stored in the memory cells. USB flash drives generally have a cache on them to prevent the loss of data copies from being quickly plugged in&#x2F;out. OTHER Hard Disk Drive: The disk reads data according to the polarity of the magnetic particle and writes data according to the polarity of the magnetic head. Compact Disk: CD-ROM can only be read and not written to because after being burned once, each unit has a fixed different reflectivity (the reading probe emits laser and the reflected laser is read as ‚Äú1‚Äù, or non-reflected laser is read as ‚Äú0‚Äù). Floppy Disk: A type of magnetic disk, less capacity, slower speed.","tags":[{"name":"memory","slug":"memory","permalink":"https://stu-yue.github.io/tags/memory/"}],"categories":[{"name":"architecture","slug":"architecture","permalink":"https://stu-yue.github.io/categories/architecture/"}]},{"title":"Welcome to Yue's Jotter","date":"2023-07-13T08:23:57.000Z","path":"jottings/intro/","text":"","tags":[],"categories":[]},{"title":"Summa | Firmware and Drivers","date":"2023-07-13T06:21:53.000Z","path":"jottings/architecture/summa_firmware_and_drivers/","text":"Reproduced in Firmware vs Device Drivers: Explained with Examples! Firmware vs. Device Drivers Firmware Device Drivers Firmware is a class of software that is written for specific custom hardware. Device drivers are software that is needed to make a given hardware accessory Firmware lives and runs directly on the hardware. Device drivers live on hard-disk and run on the CPU. Firmware is independent of an operating system, i.e., you can run any operating system on top of a given motherboard‚Äôs firmware. Device drivers are highly dependent on the operating system on which they are used. For example, for the same hardware device, you need different device drivers for using that on Windows vs Linux. Firmware cannot be updated through an operating system, we need to go into the BIOS&#x2F;UEFI to update the device drivers. Drivers can be updated from within the operating system. Firmware engineers do not need any knowledge of operating systems. But they need core knowledge on processors and the latest RAMs, PCIe standards, and so on to write firmware that complies with the latest standards Device driver engineers need knowledge about the specific device that they are using, the communication standard the device uses to talk to the computer (like Bluetooth, USB, etc), and the operating system the device driver is written for. Firmware is written by motherboard manufacturers Drivers are written by engineers in companies that produce hardware accessories that connect to your computer Examples include the BIOS&#x2F;UEFI interface that comes with the computer‚Äôs motherboard Examples include special software you install to handle the extra buttons on your mouse, software that comes with any non-standard hardware like special game controllers, also the software that helps us use all the standard hardware like USB storage devices, keyboards, mice, headphones, etc. Layers of software on a typical computer are shown in the following figure: Firmware‚Äã Firmware is a computer program that is written to work directly on specific custom hardware and it lives in non-volatile memory such as a flash chip and it is executed directly from it. The job of the firmware is to make the hardware accessible to the operating system. Firmware can be thought of as the glasses through which the operating system can see the actual hardware! ‚Äã Originally Firmware is written on Masked ROMs, which is a special type of memory that can be programmed&#x2F;written-data-to only once. The products were then shipped with these unchangeable programs called firmware and they run for ages till the device goes out of use. ‚Äã The first replacement of Masked ROMs came in the form of EPROM which can be erased by exposure to UV light and then reprogrammed as required. Then came EEPROMs which used electricity to change the contents. Nowadays the Masked ROMs have been replaced with Flash memory, which is cheaper and serves the purpose. Device DriversDevice drivers are programs that can control a given hardware and provide a software interface to it. Other programs like Operating Systems can interact with the hardware through this software interface without needing to know the actual underlying implementation of the software interface. The relation graph between firmware and drivers is also shown below: ‚Äã Generally speaking, drivers and firmware together form the module that operates hardware. But why not make the firmware perfect so that it doesn‚Äôt require driver support? ‚Äã The answer to the above question is, there are different operating systems which have completely different ways of operating hardware. So, on the one hand, hardware manufactures need to write firmware to make their hardware easier to use with software, but on the other hand, they cannot make the firmware too rigid in order to be compatible with various operating systems. They must leave enough room for software to freely operate ‚Äî‚Äî and that‚Äôs where drivers come in.","tags":[{"name":"firmware","slug":"firmware","permalink":"https://stu-yue.github.io/tags/firmware/"},{"name":"driver","slug":"driver","permalink":"https://stu-yue.github.io/tags/driver/"}],"categories":[{"name":"architecture","slug":"architecture","permalink":"https://stu-yue.github.io/categories/architecture/"}]}],"categories":[{"name":"mathematics","slug":"mathematics","permalink":"https://stu-yue.github.io/categories/mathematics/"},{"name":"languages","slug":"languages","permalink":"https://stu-yue.github.io/categories/languages/"},{"name":"shell","slug":"languages/shell","permalink":"https://stu-yue.github.io/categories/languages/shell/"},{"name":"tidbits","slug":"tidbits","permalink":"https://stu-yue.github.io/categories/tidbits/"},{"name":"architecture","slug":"architecture","permalink":"https://stu-yue.github.io/categories/architecture/"}],"tags":[{"name":"optimization","slug":"optimization","permalink":"https://stu-yue.github.io/tags/optimization/"},{"name":"ml","slug":"ml","permalink":"https://stu-yue.github.io/tags/ml/"},{"name":"shell","slug":"shell","permalink":"https://stu-yue.github.io/tags/shell/"},{"name":"linux","slug":"linux","permalink":"https://stu-yue.github.io/tags/linux/"},{"name":"points","slug":"points","permalink":"https://stu-yue.github.io/tags/points/"},{"name":"memory","slug":"memory","permalink":"https://stu-yue.github.io/tags/memory/"},{"name":"firmware","slug":"firmware","permalink":"https://stu-yue.github.io/tags/firmware/"},{"name":"driver","slug":"driver","permalink":"https://stu-yue.github.io/tags/driver/"}]}