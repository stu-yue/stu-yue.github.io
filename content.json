{"pages":[{"title":"CATEGORIES","date":"2023-07-13T06:47:46.496Z","path":"categories/index.html","text":""},{"title":"ABOUT","date":"2023-08-07T13:55:25.942Z","path":"about/index.html","text":"👩‍💻: A CODER WITH GREEN HANDS 💡: THINK TWICE, CODE ONCE! 🎯: GOTO NIPS, MSRA AND BE REASSURED 💌：THANKS TO SONGXUSHIQI 12345// life mottoif (sad() == true) &#123; sad().stop(); beAwesome();&#125;"},{"title":"TAGS","date":"2023-07-13T06:48:03.646Z","path":"tags/index.html","text":""}],"posts":[{"title":"","date":"2023-08-29T05:56:57.783Z","path":"jottings/nlp/杂记/","text":"词向量模型的演化历程 1 One-hot编码高维稀疏——高维计算量剧增，信息稀疏分布，难以优化 向量正交——无法表达两词向量间的潜在关系，造成语义鸿沟","tags":[],"categories":[{"name":"nlp","slug":"nlp","permalink":"https://stu-yue.github.io/categories/nlp/"}]},{"title":"Memo | Algebra Basis","date":"2023-08-27T07:56:53.000Z","path":"jottings/mathematics/memo_algebra_basis/","text":"**Positive Definiteness of the Norm: ** According to the usual definition, a norm should satisfy the property of positive definiteness which means that a norm must have a non-negative value for non-zero vectors and only attain zero when the vector is the zero. **Norm and Distance Evaluation: ** Norm Distance $L_0\\ \\text{norm}$ : $ $L_1\\ \\text{norm}$ : $ $L_2\\ \\text{norm}$ : $ $L_p\\ \\text{norm}$ : $ $\\text{Infinite norm}$ : $ Normed Space: Normed space introduces a norm (or length, modulus) concept on the basis of linear space.","tags":[{"name":"algebra","slug":"algebra","permalink":"https://stu-yue.github.io/tags/algebra/"}],"categories":[{"name":"mathematics","slug":"mathematics","permalink":"https://stu-yue.github.io/categories/mathematics/"}]},{"title":"Memo | See the World through Shell","date":"2023-08-27T07:56:53.000Z","path":"jottings/languages/shell/memo_see_the_world_through_shell/","text":"In this post, there’re other commands we should be familiar with: echo: To display a line text. -e (explain the escape sequences) clear: history: To display the history list content. list history commands: sequence conduct !! repeat the last command executed !number repeat the number line command in the history !string repeat the command starting with this string !?string repeat the command containing this string Expansions in Shell Mathematical Expression: Format: $((expression)), for example, echo $((2 + 2)); Operators: +, -, *, / (integer division), %, ** (exponentiation); Curly Brackets (or Braces): Curly braces can create multiple text characters. Generally speaking, a pattern in curly braces may contain a header and a postscript. The curly brace expression itself may contain a list of strings separated by commas, an integer interval, or a single character interval. Whitespace characters cannot be embedded in this mode. echo Number_&#123;1..5&#125;, echo &#123;Z..A&#125;, echo Front-&#123;A,B,C&#125;; mkdir &#123;2007..2009&#125;-0&#123;1..9&#125; &#123;2007..2009&#125;-&#123;10..12&#125; Furthermore, curly braces can be nested: 12echo a&#123;A&#123;1,2&#125;,B&#123;3,4&#125;&#125;baA1b aA2b aB3b aB4b Parameter Expansion: **Command Substitution: ** Use the output of a command as expansion mode: ls -l $(which cp), echo$(ls), file $(ls /usr/bin* | grep zip); In the old shell, [&#96;&#96;] can replace [$()]: 1ls -l `which cp` Double Quotation: In double quotes, the special characters used by the shell lose their special meaning and are treated as ordinary characters. Mathematical expansion, parameter expansion and command substitution are still performed. (Double quotation can retain whitespace) ls -l &quot;two words.txt&quot;, echo &quot;$USER $((2+2)) $(cal)&quot;; echo &quot;$(cal)&quot; is different with echo $(cal), try it. Single Quotation: Single quotation disables all mode expansions. 123456ubuntu@VM-16-17-ubuntu:~$ echo text ~/*.txt &#123;a,b&#125; $(echo foo) $((2+2)) $USERubuntu@VM-16-17-ubuntu:~$ echo &quot;text ~/*.txt &#123;a,b&#125; $(echo foo) $((2+2)) $USER&quot;ubuntu@VM-16-17-ubuntu:~$ echo &#x27;text ~/*.txt &#123;a,b&#125; $(echo foo) $((2+2)) $USER&#x27;text /home/ubuntu/lazy_dog.txt /home/ubuntu/ls.txt a b foo 4 ubuntutext ~/*.txt &#123;a,b&#125; foo 4 ubuntutext ~/*.txt &#123;a,b&#125; $(echo foo) $((2+2)) $USER **Backslash: ** \\ can escape special characters in shell, but not in single quotes. 12echo &quot;The balance for user $USER is: \\$5.00&quot;mv bad\\&amp;filename good_filename NOTE: 1$&quot;abc&quot;, $&quot;\\n&quot; The above is a special string conversion syntax used to localize strings (with Settings such as the environment variable LANG or LC_MESSAGES). 1$&#x27;abc&#x27;, $&#x27;\\n&#x27;, $&#x27;ab\\tc&#x27; When you use the form $’abc’ in the Shell, the Shell extends the string and replaces the special characters with the corresponding escape sequence.","tags":[{"name":"shell","slug":"shell","permalink":"https://stu-yue.github.io/tags/shell/"},{"name":"linux","slug":"linux","permalink":"https://stu-yue.github.io/tags/linux/"}],"categories":[{"name":"languages","slug":"languages","permalink":"https://stu-yue.github.io/categories/languages/"},{"name":"shell","slug":"languages/shell","permalink":"https://stu-yue.github.io/categories/languages/shell/"}]},{"title":"Memo | Redirection","date":"2023-08-25T06:56:53.000Z","path":"jottings/languages/shell/memo_redirection/","text":"Input&#x2F;output redirection is achieved by modifying file pointers. When redirection occurs, file descriptors themselves are not changed, instead, it’s the file pointers associated with the file descriptors that are altered. Manipulation of File Descriptors in Shell In redirection, &amp; is used to indicates the following numbers is file descriptor rather than a filename. Output Redirection: stdiout redirection: command &gt;file: [overwrite], stdout overwrites the file. &gt; file: clear the content. command &gt;&gt;file: [append], stdout appends to the file. stderr redirection: command 2&gt;file: [overwrite], stderr overwrites the file. command 2&gt;&gt;file: [append], stderr appends to the file. Both stdout and stderr: command &gt;file 2&gt;&amp;1: [overwrite], both stdout and stderr overwrite the file. command &gt;&gt;file 2&gt;&amp;1: [append], both stdout and stderr append to the file. command &gt;file1 2&gt;file2: stdout overwrites the file1, stderr overwrites the file2. command &gt;&gt;file1 2&gt;&gt;file2: stdout appends to file1, stderr appends to file2. command &gt;file 2&gt;file: [not recommend] file is opened twice, leading to resource competition. command &gt;&gt;file 2&gt;&gt;file: [not recommend] file is opened twice, leading to resource competition. Input Redirection: command &lt;file: take the contents of the file as the input to command. 1234#!/bin/bashwhile read str; do echo $strdone &lt;readme.txt command &lt;&lt;END: read data from standard input (keyboard) until meeting the delimiter END (defined by the user). command &lt;file1 &gt;file2: input by file1, and output to file2 &amp;&gt;: redirect both stdout and stderr to the same location (usually a file). &gt;&amp;: redirect the output of one file descriptor to another &gt;&amp;-: equal to redirection to /dev/null PipelinePipeline is used to link the stdout of the previous instruction as the stdin of the next instruction. Pipeline is often used to perform complex operations on data. It’s possible to put several commands together to form a pipeline (usually called filter). For example: 1ls /bin /usr/bin | sort | uniq | less CommandThere’s some useful command in this memo: cat: To link file. cat can accept not one parameter, so it can concatenate the file: cat movie.mpeg.0* &gt; movie.mpeg; sort: To sort the text lines. uniq: To report&#x2F;omit the repetitive lines. grep: To print the matching rows. -i (ignore upper&#x2F;lower), -v (reverse find, print mismatching lines), -n (show the matching lines), -r (recursively find), -l (only print matching filename), -c (only print the number of matching line) wc: To print the LF, word, bytes of the text. -c (bytes), -l (lines), -w (words) head&#x2F;tail: To print first&#x2F;last part of text. -n (lines), -c (bytes) tail -f filename: continue to monitor this file, when the new is added to the file, they appear immediately on the screen. tee: read from stdin, and write to stdout and file. -a (append mode), -i (ignore-interrupts) ls -l | tee -a ls.log : print the content both in the stdout and file. ls /usr/bin | tee ls.log | grep zip","tags":[{"name":"shell","slug":"shell","permalink":"https://stu-yue.github.io/tags/shell/"},{"name":"linux","slug":"linux","permalink":"https://stu-yue.github.io/tags/linux/"}],"categories":[{"name":"languages","slug":"languages","permalink":"https://stu-yue.github.io/categories/languages/"},{"name":"shell","slug":"languages/shell","permalink":"https://stu-yue.github.io/categories/languages/shell/"}]},{"title":"Memo | GIL and Coroutine","date":"2023-08-10T08:01:53.000Z","path":"jottings/languages/python/memo_GIL_and_coroutine/","text":"GIL (Global Interpreter Lock) GIL is not a characteristic of Python itself, but rather a characteristic to CPython, the reference implementation of Python. In CPython, GIL is a mutex lock used to ensure that only on thread is executing at a time within a process. In the absence of the GIL, it’s possible for multiple threads executing the same code simultaneously to cause incorrect reference counting of variables, leading to the garbage collector directly reclaiming the variables involved in the executed code. This can result in errors when other threads attempt to use those reclaimed variables. How to work: Each thread acquires the GIL at the beginning of its execution to prevent other threads from preempting. Similarly, after each thread completes a segment of code (or before system calls that may cause blocking, such as IO operations), it releases the GIL to allow other threads to utilize resources. In CPython, there’s another mechanism called check_interval, where the interpreter periodically checks the status of the GIL lock for threads. After a certain interval, the interpreter forces the current thread to release the GIL, allowing other threads to have opportunity to execute. Overall, each Python thread is encapsulated in a similar loop structure. Let’s take a look at the following code: 12345678910111213for (;;) &#123; if (--ticker &lt; 0) &#123; ticker = check_interval; /* Give another thread a chance */ PyThread_release_lock(interpreter_lock); /* Other thread may run now */ PyThread_acquire_lock(interpreter_lock); &#125; bytecode = *next_instr++; switch(bytecode) &#123; /* execute the next instruction ... */ &#125;&#125; The above example represents instruction counting, while the current approach is mostly based on time slicing. Here’s another example that demonstrates GIL’s working principle: 123456789101112131415161718# coding=utf-8from threading import Threadfrom multiprocessing import Processdef test(): # endless loop for full CPU utilization while True: pass# multi-thread version:# t1 = Thread(target=test)# multi-process version:t1 = Process(target=test)t1.start()# main thread executionwhile True: pass When the multi-thread code running, we can observe the CPU utilization from htop as shown below: 121 [50%]2 [50%] According to the above, we can know that each thread spends their a half time waiting for GIL. Additionally, the multi-process version as shown below: 121 [100%]2 [100%] The other way to utilize multi-core CPU is Multi-Process or Coroutine GeneratorGenerator contains the yield keyword to produce values. It has the following characteristics: Laziness: Generators are lazy in nature, meaning they produce values on-demand as requested by the caller, rather than generating all the values at once. This lazy evaluation allows for efficient memory usage, especially when dealing with large or infinite sequences. Memory efficiency: Due to their lazy evaluation, generators are memory-efficient. Iterability: Generators are iterable objects, which means they can be looped over using a for loop or consumed by other iterable functions like list() or sum(). They provide a convenient way to iterate over a sequence of values without the need to store the entire sequence in memory. State persistence: Generators maintain their internal state between successive calls. When a generator function is paused at a yield statement, the local variables’ values are preserved. This allows the generator to resume execution from where it left off, retaining the necessary information to generate the next value. Infinite sequences: Generators can be used to represent infinite sequences since they generate values on-the-fly. Function-like behavior: Generators are defined using the def keyword like regular functions, and they can have parameters, return values, and other function features. However, they differ in their execution behavior, as they can be paused and resumed. When the generator function finishes executing (no more yield statements or returns), the generator object raises a StopIteration exception. yield from is a syntactic sugar that allows delegation of generator execution within a generator function. It provides a concise way to call a sub-generator from a parent generator and directly pass the values yielded by the sub-generator to the parent generator. 123456789101112def sub_generator(): yield &#x27;A&#x27; yield &#x27;B&#x27; yield &#x27;C&#x27; def parent_generator(): yield &#x27;START&#x27; yield from sub_generator() yield &#x27;END&#x27; for item in parent_generator(): print(item) yield and send are used together to allow the generator function to receive values during each iteration and send values back into the generator function for processing. Here is an example of how yield and send are used: 1234567891011121314151617def generator_function(): result = yield # First call, receives a value sent by send() while True: print(&#x27;gen&#x27;, result) result = yield resultgen = generator_function()# Start the generatornext(gen) # or gen.send(None)output = gen.send(&quot;Hello&quot;)print(&#x27;out&#x27;, output)output = gen.send(&quot;World&quot;)print(&#x27;out&#x27;, output)# print result:# gen Hello# out Hello# gen World# out World generator.throw(AnyException) allows generator to throw an Exception, and generator.close() can stop the generator. CoroutineCoroutines are implemented using generator functions and the yield statement. The principle of coroutines is as follows: Coroutine Function Definition: Define a generator function as a coroutine function. This function can use the yield statement to specify suspension points, where it pauses execution and returns a value to the caller. Coroutine Initialization: Create a coroutine object by calling the coroutine function. Coroutine Iteration: Use the next() function or the .send() method of the coroutine object to iterate and execute the coroutine. When the coroutine encounters a yield statement, it pauses execution and returns the result to the caller. Coroutine Resumption: When the caller sends a value to the coroutine (using the .send() method), the coroutine resumes execution from the last paused position and uses the sent value as the result of the yield expression. Coroutine Termination: When the coroutine reaches the end of the function or encounters a StopIteration exception, the coroutine terminates. Further calls to the .send() method on the coroutine object will raise a StopIteration exception. Coroutines allow achieving concurrent execution without the need for multiple threads or processes. Coroutines can switch between different execution paths, enabling efficient asynchronous programming. Coroutines can also delegate to other coroutines using the yield from statement, enabling more complex cooperation and task decomposition. Python provides the asyncio module to support coroutine programming, where the async and await keywords offer a more concise syntax for defining and managing coroutines. With asyncio, it becomes easy to write asynchronous programs and handle tasks like I&#x2F;O operations, network communication, and more. It’s important to note that coroutines run in a single thread, so their performance may not be as good as multi-threading or multiprocessing when it comes to CPU-bound tasks. However, in I&#x2F;O-bound tasks, coroutines shine because they can effectively utilize the waiting time for I&#x2F;O to execute other tasks. Async&#x2F;Await async def is a keyword combination used in Python to define asynchronous functions. An asynchronous function is a special type of function that can contain await expressions, which suspend the execution of the function and wait for the completion of asynchronous operations. Here is a example: 12345678910111213141516import asyncio# Define an asynchronous functionasync def async_func(): print(&quot;Start&quot;) await asyncio.sleep(1) # Suspend function execution using await, waiting for the completion of an asynchronous operation print(&quot;End&quot;)# Run the asynchronous function in an event loopasync def main(): await async_func()# Create an event loop and run the main functionloop = asyncio.get_event_loop()loop.run_until_complete(main())loop.close() await is a keyword used to suspend the execution of an asynchronous function and wait for the completion of an asynchronous operation. await can only be used within an asynchronous context and is typically used in conjunction with async def. The general usage of await is as follows: Use await within an asynchronous function or coroutine to suspend its execution and wait for the completion of an asynchronous operation. For example: 123async def async_func(): result = await async_operation() # 等待 async_operation() 异步操作的完成 # 继续异步操作，使用异步操作的结果 result Note that await can only be used within asynchronous functions or coroutines. It is not valid to use await in synchronous code. Typically, await is followed by an awaitable object, such as an asynchronous function, coroutine, asynchronous iterator, etc. These awaitable objects must implement specific protocols, which include methods like __await__() or __aiter__(). The await expression invokes these methods to obtain an iterator or a context manager from the awaitable object and waits for its completion. Here are some common awaitable objects: Asynchronous functions or coroutines: Use await to wait for the execution of an asynchronous function or coroutine to complete. Asynchronous generators: Use await to iterate over asynchronous generators and wait for each generated value. Asynchronous iterators: Use await to iterate over asynchronous iterators and wait for each iteration value. Asynchronous context managers: Use await to enter and exit the context of an asynchronous context manager. For example: 123456async def async_func(): async with async_context_manager() as cm: await cm.do_something() # Wait for the completion of the asynchronous context manager async for item in async_iterator(): await process_item(item) # Wait for the completion of each item generated by the asynchronous iterator","tags":[{"name":"python","slug":"python","permalink":"https://stu-yue.github.io/tags/python/"}],"categories":[{"name":"languages","slug":"languages","permalink":"https://stu-yue.github.io/categories/languages/"},{"name":"python","slug":"languages/python","permalink":"https://stu-yue.github.io/categories/languages/python/"}]},{"title":"Memo | Optimization Algorithm in Machine Learning","date":"2023-08-05T14:56:53.000Z","path":"jottings/mathematics/memo_optimization_alg/","text":"Reproduced in The Summary of Optimization Algorithm in ML For machine learning algorithms with diverse forms and characteristics, we have various optimization algorithms suitable for optimizing their objective functions. Apart from a few problems that can be solved using Brute Force Search to obtain the optimal solution, we can categorize the optimization algorithms used in machine learning into two types: Analytical Solutions: These algorithms aim to find the optimal solution to the objective function by solving mathematical equations or performing algebraic manipulations. They often involve setting derivatives or gradients to zero and solving the resulting equations. Analytical solutions are typically used for linear regression, logistic regression, and certain types of optimization problems with closed-form solutions. Numerical Optimization: These algorithms iteratively search for the optimal solution by evaluating the objective function at different points in the search space. They do not rely on explicit mathematical equations or derivatives. Numerical optimization methods include gradient-based algorithms like gradient descent and its variants, Newton’s method, stochastic gradient descent, and quasi-Newton methods. Global Optimization Methods: Heuristic Algorithm, Simulated Annealing, Particle Swarm Optimization, etc. Local Optimization Methods: Gradient Based: First Order Derivative: Gradient Descent: Second Order Derivative: Newton Method: Divide and Conquer: Coordinate Descent: SMO Algorithm: Staged Optimization: Dynamic Programming: The following picture illustrates the organization of this memorandum:","tags":[{"name":"optimization","slug":"optimization","permalink":"https://stu-yue.github.io/tags/optimization/"},{"name":"ml","slug":"ml","permalink":"https://stu-yue.github.io/tags/ml/"}],"categories":[{"name":"mathematics","slug":"mathematics","permalink":"https://stu-yue.github.io/categories/mathematics/"}]},{"title":"Memo | Exploring Linux Files and Directories","date":"2023-08-05T02:56:53.000Z","path":"jottings/languages/shell/memo_exploring_os/","text":"Let’s start by learning some commands that are helpful for researching Linux systems. type: To explain how to interpret a command name. which: To show which executable program will be executed. man: To show command manual. apropos: To display a list of appropriate commands. info: To display the command info. alias: To create an alias for the command unalias: To cancel a alias for the command. ls: To list the files and directories in the current directory. -a, -d, -h, -r/--reverse, -l, -S[sort by size], -t[sort by modification time] file: To determine the file type. file filename is OK. less: To browse the content of a file, specifically, less is an improved version of more. less filename is OK. Commands Behavior Page UP or b Backward one window Page Down or space Forward one window UP Arrow Backward one line Down Arrow Forward one line [N]G Go to last line in file (or N lines) [N]g Go to first line in file (or N lines) &#x2F;characters Search forward for matching line n Repeat previous search h Display help. cp： Options Implication -a, –archive Copy files and directories, along with their attributes, including ownership and permissions -i, –interactive Prompt the user for confirmation before overwriting an existing file (default disable) -r, –recursive -u, –update Update the content not already present in the original -v, –verbose Display detailed command operation information mv: Options Implication -i, –interactive Prompt the user for confirmation before overwriting an existing file (default disable) -u, –update Update the content not already present in the original -v, –verbose Display detailed command operation information rm: Options Implication -f, –force Directly delete the file even if its attributes are read-only, without requiring individual confirmation -i, –interactive Prompt the user for confirmation before overwriting an existing file (default disable) -r, –recursive -v, –verbose Display detailed command operation information ln: ln file hard_link creates a hard link, and ln -s item soft_link creates a soft link. Hard Links: A hard link is a direct reference to the same physical location of a file on the storage device. It creates an additional entry in the file system that points to the same inode (data structure representing a file) as the original file. Changes made to either the original file or the hard link are reflected in both, as they refer to the same underlying data. Hard links cannot reference directories or files on different file systems or partitions. Soft Links: A symbolic link is a special file that contains a path pointing to another file or directory. It acts as a pointer or shortcut to the target file or directory. Symbolic links are independent files and have their own inodes. Modifying the original file or symbolic link does not affect each other, as they are separate entities. Symbolic links can reference directories or files on different file systems or partitions. Soft links can be created to a non-existent filename (of course, if you use vi on this soft link file, Linux will automatically create a new file named “filename”). Hard links cannot be created in such cases since the file must already exist, and the inode must exist as well. Using ls -li can view the inodes of the files. drwxrwxr-x 2 ‘s 2 is the number of hard links to a file. Besides, the usual number of inodes for a directory is 2 (include parent directory and itself .) tar: To create archive files (usually with the .tar extension) and archive files. create archive file: tar -cvf archive.tar file1 file2 directory/ -c (create archive file), -v (view details), -f (specify archive file) extract archive file: tar -xvf archive.tar -x (extract the content of archive files) compress archive file: tar -czvf archive.tar.gz directory/ -z (use gzip to compress) decompress archive file: tar -xzvf archive.tar.gz, tar -xjvf archive.tar.bz2 list the content of archive files: tar -tvf archive.tar unzip archive.zip Before starting using commands, let’s introduce wildcards that provide special characters to help you quickly specify a group of filenames. Wildcard Implication * match any sequence of characters, including zero characters. ? match any single character (excluding zero character) [character] match any single character within the specified character set [!character] match any single character without the specified character set [[:class:]] match any single character within the specified character class The following table lists the most commonly used character classes. Character Class Implication [:alnum:] match any single letter or digit [:alpha:] match any single letter [:digit:] match any single digit [:lower:] match any single lower letter [:upper:] match any single upper letter There are some examples constructed with wildcard: *, g*, b*.txt, Data???, [abc]*, BACKUP.[0-9][0-9][0-9], [[:upper:]], [![:digit:]]*, *[[:lower:]123]","tags":[{"name":"shell","slug":"shell","permalink":"https://stu-yue.github.io/tags/shell/"},{"name":"linux","slug":"linux","permalink":"https://stu-yue.github.io/tags/linux/"}],"categories":[{"name":"languages","slug":"languages","permalink":"https://stu-yue.github.io/categories/languages/"},{"name":"shell","slug":"languages/shell","permalink":"https://stu-yue.github.io/categories/languages/shell/"}]},{"title":"Hot Points","date":"2023-07-22T12:00:53.000Z","path":"jottings/tidbits/hot_points/","text":"Generate random numbers by reading thermal noise on CPU pins. Hot Plug, refers to the operation of inserting&#x2F;removing a device while it is running. In contrast, Cold Plug means do above operation while the device is powered off. Software version’s explanation: Version Description Snapshot Development version Alpha Internal beta Beta Public beta Pre (M) Similar to Alpha, sometimes subdivided into M_(Milestone) version RC(Release Candidate) During Beta stage, new features will continue to be added, but once the RC version is reached, there will mainly be on debugging and issue resolution. GA(General Availability) Some software may be labeled as “stable” or “production”. Release&#x2F;Stable Current The latest version, but no necessarily a stable one. Eval There may be a monthly or fixed time limit for usage.","tags":[{"name":"points","slug":"points","permalink":"https://stu-yue.github.io/tags/points/"}],"categories":[{"name":"tidbits","slug":"tidbits","permalink":"https://stu-yue.github.io/categories/tidbits/"}]},{"title":"Summa | The Majority of Memory Categories","date":"2023-07-20T08:41:53.000Z","path":"jottings/architecture/summa_memory_categories/","text":"Reproduced in 8 types of memory every embedded engineer should know about! The majority of memory can be categorized as shown in the following picture: The real difference between primary and secondary memories is the speed&#x2F;volatility(without power) tradeoffs. Primary MemoryPrimary memory is very fast, but it cannot hold data without power. The popular name for Primary Memory is RAM, which has 2 most important types namely SRAM and DRAM. Bistable Circuit usually consists of two complementary transistors or other switching devices, one used to hold the circuit in one stable state and the other to switch the circuit to another stable state. The switch between these two states is triggered by the input signal. Bistable Circuit can store data. Latches and registers are bistable devices. SRAM is the use of bistable flip-flop to save information, as long as the power is not lost, the information is not lost. DRAM uses capacitors to store charge to store information, so data stored in the DRAM must be constantly refreshed every few milliseconds or else it will end up being erased. The action is taken care of by a special device named DRAM controllers. SRAM DRAM Construction Principle It uses a cross-coupled flip flop configuration of transistors It uses a capacitor transistor circuit to hold data Cost Relatively more expensive, it needs more transistors per bit of data it can store Relatively less expensive, as fewer transistors per bit of storage are needed Speed Faster Slower (capacitor charge and discharge time) Volatility As long as power is ON, it can store data since it uses no capacitors Data needs to be continuously refreshed (usually in the order of 4 times a second) since the capacitors leak power. Power consumption Less More Density Less dense (6 transistors, more area needed) Highly dense (1 pass transistor and 1 capacitor, easy to integrate) Addition components needed None DRAM controllers are needed to make it work like an SRAM. This controller offloads the data refreshing duties of a microprocessor and hence a DRAM coupled with a DRAM controller behaves more like an SRAM from the processor’s perspective. Application areas Cache memory (Ls2) Main memory (memory chips) NVRAM or Non Volatile Random Access Memory, is a special type of RAM that can store data permanently. It’s basically an SRAM with a power supply Secondary MemoryROM MASK ROM: The main characteristic of this device is the fact that the data is written onto the device as it gets manufactured and it is impossible to change them. This is done by designing the chip in such a manner so that it already contains the necessary data. In order to mass production, the manufacturer makes a ROM or EPROM with original data as a sample in advance, and then mass-produces the same ROM as the sample. This kind of ROM sample for mass production is the MASK ROM, and the data burned in the MASK ROM can never be modified. PROM stands for Programmable Read-Only Memory. These are programmable chips for user needs, the main characteristic being it can only be programmed one time. That is it cannot be erased or reprogrammed. They are also known as One Time Programmable devices or OTPs for short. EPROM stands for Erasable Programmable Read-Only Memory. These chips usually have a small glass window on top and if you expose them to direct sunlight(UV, ultraviolet) that will erase the chip’s data. They can then be programmed again with fresh data. Cons: Inconvenient, instability, can not be exposed to the light source otherwise easy to lead to data loss EEPROM stands for Electrically Erasable Programmable Read-Only Memory. These chips can be erased and reprogrammed using electricity as opposed to exposing them to UV rays as EPROMs. EEPROM can be erased and reprogrammed on a computer or dedicated device, generally plugging and playing. FLASH MEMORY The basic storage unit of flash memory is the transistor-based storage unit, and each storage unit can store 1 bit of data. Storage units are usually organized into a block, and each block contains thousands of storage units. Each storage unit has a floating gate to store electric charges. The state of a storage unit can be determined as “1” or “0” based on the amount of electric charges stored in the floating gate. The state of a storage unit is changed by injecting or extracting electrons into&#x2F;from the floating gate to modify the amount of electric charges stored in it. Flash memory uses Hot carrier injection(HCI) mechanism to write data. In simple terms, a certain storage unit is grounded at the source, a positive voltage is applied to its control gate, and a positive voltage is applied to the drain to generate a strong electric field between the source and drain. This will give electrons enough energy (hot carriers) to be attracted by the voltage at the control gate and injected into the floating gate. Afterwards, as the insulating material on the top and bottom of the floating gate is not conductive, these electrons are trapped in the floating gate and cannot escape. (Every time electrons enter and exit the surrounding silicon dioxide on the floating gate, it will cause aging[1]) To save cost, flash memory adopts page programming mode. Each page contains a certain number of storage units, and all units in a page are written at the same time. Cons: Flash memory has the issue of wear-out (write&#x2F;erase endurance limits), which is usually mitigated by disabling bad blocks, and then reducing usable capacity. USB flash disk, namely “U disk”, is a new generation of storage devices based on USB interface and flash memory chip as storage medium. It is basically composed of five parts: USB port, main control chip, flash memory chip, PCB backboard, outer package. USB flash drives, SD cards, and SSDs are a type of storage device that uses flash memory chips as the storage medium. They are primarily composed of a controller (main control) and flash memory chips, and have no mechanical structure, consisting purely of electronic circuitry. They are resistant to physical shocks and impacts. The controller manages data storage and other functions. Even after power loss, data remains stored in the memory cells. USB flash drives generally have a cache on them to prevent the loss of data copies from being quickly plugged in&#x2F;out. OTHER Hard Disk Drive: The disk reads data according to the polarity of the magnetic particle and writes data according to the polarity of the magnetic head. Compact Disk: CD-ROM can only be read and not written to because after being burned once, each unit has a fixed different reflectivity (the reading probe emits laser and the reflected laser is read as “1”, or non-reflected laser is read as “0”). Floppy Disk: A type of magnetic disk, less capacity, slower speed.","tags":[{"name":"memory","slug":"memory","permalink":"https://stu-yue.github.io/tags/memory/"}],"categories":[{"name":"architecture","slug":"architecture","permalink":"https://stu-yue.github.io/categories/architecture/"}]},{"title":"Welcome to Yue's Jotter","date":"2023-07-13T08:23:57.000Z","path":"jottings/intro/","text":"","tags":[],"categories":[]},{"title":"Summa | Firmware and Drivers","date":"2023-07-13T06:21:53.000Z","path":"jottings/architecture/summa_firmware_and_drivers/","text":"Reproduced in Firmware vs Device Drivers: Explained with Examples! Firmware vs. Device Drivers Firmware Device Drivers Firmware is a class of software that is written for specific custom hardware. Device drivers are software that is needed to make a given hardware accessory Firmware lives and runs directly on the hardware. Device drivers live on hard-disk and run on the CPU. Firmware is independent of an operating system, i.e., you can run any operating system on top of a given motherboard’s firmware. Device drivers are highly dependent on the operating system on which they are used. For example, for the same hardware device, you need different device drivers for using that on Windows vs Linux. Firmware cannot be updated through an operating system, we need to go into the BIOS&#x2F;UEFI to update the device drivers. Drivers can be updated from within the operating system. Firmware engineers do not need any knowledge of operating systems. But they need core knowledge on processors and the latest RAMs, PCIe standards, and so on to write firmware that complies with the latest standards Device driver engineers need knowledge about the specific device that they are using, the communication standard the device uses to talk to the computer (like Bluetooth, USB, etc), and the operating system the device driver is written for. Firmware is written by motherboard manufacturers Drivers are written by engineers in companies that produce hardware accessories that connect to your computer Examples include the BIOS&#x2F;UEFI interface that comes with the computer’s motherboard Examples include special software you install to handle the extra buttons on your mouse, software that comes with any non-standard hardware like special game controllers, also the software that helps us use all the standard hardware like USB storage devices, keyboards, mice, headphones, etc. Layers of software on a typical computer are shown in the following figure: Firmware​ Firmware is a computer program that is written to work directly on specific custom hardware and it lives in non-volatile memory such as a flash chip and it is executed directly from it. The job of the firmware is to make the hardware accessible to the operating system. Firmware can be thought of as the glasses through which the operating system can see the actual hardware! ​ Originally Firmware is written on Masked ROMs, which is a special type of memory that can be programmed&#x2F;written-data-to only once. The products were then shipped with these unchangeable programs called firmware and they run for ages till the device goes out of use. ​ The first replacement of Masked ROMs came in the form of EPROM which can be erased by exposure to UV light and then reprogrammed as required. Then came EEPROMs which used electricity to change the contents. Nowadays the Masked ROMs have been replaced with Flash memory, which is cheaper and serves the purpose. Device DriversDevice drivers are programs that can control a given hardware and provide a software interface to it. Other programs like Operating Systems can interact with the hardware through this software interface without needing to know the actual underlying implementation of the software interface. The relation graph between firmware and drivers is also shown below: ​ Generally speaking, drivers and firmware together form the module that operates hardware. But why not make the firmware perfect so that it doesn’t require driver support? ​ The answer to the above question is, there are different operating systems which have completely different ways of operating hardware. So, on the one hand, hardware manufactures need to write firmware to make their hardware easier to use with software, but on the other hand, they cannot make the firmware too rigid in order to be compatible with various operating systems. They must leave enough room for software to freely operate —— and that’s where drivers come in.","tags":[{"name":"firmware","slug":"firmware","permalink":"https://stu-yue.github.io/tags/firmware/"},{"name":"driver","slug":"driver","permalink":"https://stu-yue.github.io/tags/driver/"}],"categories":[{"name":"architecture","slug":"architecture","permalink":"https://stu-yue.github.io/categories/architecture/"}]}],"categories":[{"name":"nlp","slug":"nlp","permalink":"https://stu-yue.github.io/categories/nlp/"},{"name":"mathematics","slug":"mathematics","permalink":"https://stu-yue.github.io/categories/mathematics/"},{"name":"languages","slug":"languages","permalink":"https://stu-yue.github.io/categories/languages/"},{"name":"shell","slug":"languages/shell","permalink":"https://stu-yue.github.io/categories/languages/shell/"},{"name":"python","slug":"languages/python","permalink":"https://stu-yue.github.io/categories/languages/python/"},{"name":"tidbits","slug":"tidbits","permalink":"https://stu-yue.github.io/categories/tidbits/"},{"name":"architecture","slug":"architecture","permalink":"https://stu-yue.github.io/categories/architecture/"}],"tags":[{"name":"algebra","slug":"algebra","permalink":"https://stu-yue.github.io/tags/algebra/"},{"name":"shell","slug":"shell","permalink":"https://stu-yue.github.io/tags/shell/"},{"name":"linux","slug":"linux","permalink":"https://stu-yue.github.io/tags/linux/"},{"name":"python","slug":"python","permalink":"https://stu-yue.github.io/tags/python/"},{"name":"optimization","slug":"optimization","permalink":"https://stu-yue.github.io/tags/optimization/"},{"name":"ml","slug":"ml","permalink":"https://stu-yue.github.io/tags/ml/"},{"name":"points","slug":"points","permalink":"https://stu-yue.github.io/tags/points/"},{"name":"memory","slug":"memory","permalink":"https://stu-yue.github.io/tags/memory/"},{"name":"firmware","slug":"firmware","permalink":"https://stu-yue.github.io/tags/firmware/"},{"name":"driver","slug":"driver","permalink":"https://stu-yue.github.io/tags/driver/"}]}